@inherits LayoutComponentBase
@implements IDisposable
@inject NavigationManager NavigationManager

<Page OnPageResize="@OnPageResize" @bind-DesktopIsNavOpen="IsNavOpen" @bind-MobileIsNavOpen="IsNavOpenMobile">
  <Header>
    <MainLayoutHeader IsManagedSidebar="@IsManagedSidebar" IsNavOpen="@IsSidebarNavOpen" OnNavToggle="@NavToggleHandler" />
  </Header>
  <Sidebar>
    <MainLayoutSidebar IsNavOpen="@IsSidebarNavOpen" IsManagedSidebar="@IsManagedSidebar" />
  </Sidebar>
  <Content>
    <PageSection>@Body</PageSection>
  </Content>
</Page>

@code {
  private bool IsManagedSidebar { get; set; }
  private bool IsNavOpen        { get; set; } = true;
  private bool IsMobileView     { get; set; } = true;
  private bool IsNavOpenMobile  { get; set; }
  private bool IsSidebarNavOpen { get => IsMobileView ? IsNavOpenMobile : IsNavOpen; }
  
  protected override void OnInitialized()
  {
    NavigationManager.LocationChanged += LocationChanged;
    base.OnInitialized();
  }

  private void LocationChanged(object sender, LocationChangedEventArgs e)
  {
    if (IsMobileView)
    {
      IsNavOpenMobile = false;
      StateHasChanged();
    }
  }

  void IDisposable.Dispose()
  {
    NavigationManager.LocationChanged -= LocationChanged;
  }
  
  private void NavToggleHandler(bool isNavOpen)
  {
    if (IsMobileView)
    {
      OnNavToggleMobile(isNavOpen);
    }
    else
    {
      OnNavToggle(isNavOpen);
    }
  }  
  
  private void OnNavToggleMobile(bool isNavOpen)
  {
    IsNavOpenMobile = isNavOpen;
  }
  
  private void OnNavToggle(bool isNavOpen)
  {
    IsNavOpen = isNavOpen;
  }
  
  private void OnPageResize(PageResizeEventArgs args)
  {
    IsMobileView = args.MobileView;
  }
} 