<Masthead>
  <MastheadToggle>
    <PageToggleButton AriaLabel="Global navigation" IsNavOpen="@IsNavOpen" OnNavToggle="@NavToggleHandler">
      <BarsIcon />
    </PageToggleButton>
  </MastheadToggle>
  <MastheadMain>
    <MastheadBrand>
      <Brand Src="@ImgBrand" Alt="Patternfly Logo" />
    </MastheadBrand>
  </MastheadMain>
  <MastheadContent>
    <Toolbar id="toolbar" IsFullHeight IsStatic>
      <ToolbarContent>
        <ToolbarGroup
          Variant="ToolbarGroupVariant.IconButtonGroup"
          Alignment="@(new () { Default = Alignment.Right })"
          Spacer="@(new () { Default = ToolbarSpacer.None, Medium = ToolbarSpacer.Medium })"
        >
          <ToolbarItem>
            <Button AriaLabel="Notifications" Variant="ButtonVariant.Plain">
              <AttentionBellIcon />
            </Button>
          </ToolbarItem>
          <ToolbarGroup Variant="ToolbarGroupVariant.IconButtonGroup" Visibility="@(new () { Default = Visibility.Hidden, Large = Visibility.Visible })">
            <ToolbarItem>
              <Button AriaLabel="Settings actions" Variant="ButtonVariant.Plain">
                <CogIcon />
              </Button>
            </ToolbarItem>
            <ToolbarItem>
              <Button AriaLabel="Help actions" Variant="ButtonVariant.Plain">
                <QuestionCircleIcon />
              </Button>
            </ToolbarItem>
          </ToolbarGroup>
        </ToolbarGroup>
        <ToolbarItem Visibility="@(new () { Default = Visibility.Hidden, Medium = Visibility.Visible, Large = Visibility.Hidden })">
          <Dropdown IsPlain Position="DropdownPosition.Right">
            <Toggle>
              <KebabToggle />
            </Toggle>
            <DropdownItems>
              <DropdownItem @key="1">
                <CogIcon /> Settings
              </DropdownItem>
              <DropdownItem @key="2">
                <HelpIcon /> Help
              </DropdownItem>
            </DropdownItems>
          </Dropdown>
        </ToolbarItem>
        <ToolbarItem Visibility="@(new () { Default = Visibility.Visible, Medium = Visibility.Hidden, Large = Visibility.Hidden, ExtraLarge = Visibility.Hidden, ExtraLarge2 = Visibility.Hidden })">
          <Dropdown IsPlain Position="DropdownPosition.Right">
            <Toggle>
              <KebabToggle />
            </Toggle>
            <DropdownItems>
              <DropdownGroup @key="1">
                <DropdownItem @key="1">My profile</DropdownItem>
                <DropdownItem @key="2" Component="button">
                  User management
                </DropdownItem>
                <DropdownItem @key="3">Logout</DropdownItem>
              </DropdownGroup>
              <Divider @key="4" />
              <DropdownItem @key="5">
                <CogIcon /> Settings
              </DropdownItem>
              <DropdownItem @key="6">
                <HelpIcon /> Help
              </DropdownItem>
            </DropdownItems>
          </Dropdown>
        </ToolbarItem>
        <ToolbarItem Visibility="@(new () { Default = Visibility.Hidden, Medium = Visibility.Visible })">
          <Dropdown Position="DropdownPosition.Right">
            <Toggle>
              <DropdownToggle>
                <Icon>
                  <Avatar Src="@ImgAvatar" Alt="Avatar" />
                </Icon>
                <ChildContent>
                  John Smith
                </ChildContent>
              </DropdownToggle>
            </Toggle>
            <DropdownItems>
              <DropdownGroup @key="1">
                <DropdownItem @key="1">My profile</DropdownItem>
                <DropdownItem @key="2" Component="button">
                  User management
                </DropdownItem>
                <DropdownItem @key="3">Logout</DropdownItem>
              </DropdownGroup>
            </DropdownItems>
          </Dropdown>
        </ToolbarItem>
      </ToolbarContent>
    </Toolbar>
  </MastheadContent>
</Masthead>

@code {
  [Parameter] public bool IsNavOpen { get; set; }
  [Parameter] public bool IsManagedSidebar { get; set; }
  [Parameter] public EventCallback<bool> OnNavToggle { get; set; }

  private string ImgBrand  => "assets/images/pf_logo_color.svg";
  private string ImgAvatar => "assets/images/img_avatar.svg";

  private async Task NavToggleHandler(bool isNavOpen)
  {
    IsNavOpen = isNavOpen;
    await OnNavToggle.InvokeAsync(IsNavOpen);
  }
}
