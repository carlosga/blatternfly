@implements IDisposable
@inject NavigationManager NavigationManager

<Page
  @bind-IsManagedSidebar="@IsManagedSidebar"
  @bind-DesktopIsNavOpen="IsNavOpen"
  @bind-MobileIsNavOpen="IsNavOpenMobile"
  OnPageResize="@OnPageResize"
  MainContainerId="@MainContainerIdValue"
  Breadcrumb="@RenderedBreadcrumb"
  NotificationDrawer="@NotificationDrawer"
  IsNotificationDrawerExpanded="@IsNotificationDrawerExpanded"
>
  <SkipToContent>
    <SkipToContent Href="@SkipToContentHref">
      Skip to content
    </SkipToContent>
  </SkipToContent>
  <Header>
    <DashboardHeader IsManagedSidebar="@IsManagedSidebar" IsNavOpen="@IsSidebarNavOpen" OnNavToggle="@NavToggleHandler" />
  </Header>
  <Sidebar>
    <DashboardSidebar IsNavOpen="@IsSidebarNavOpen" IsManagedSidebar="@IsManagedSidebar" />
  </Sidebar>
  <Content>
    @if (HasPageTemplateTitle)
    {
      <PageSection Variant="PageSectionVariants.Light">
        <TextContent>
          <Text Component="TextVariants.h1">Main title</Text>
          <Text Component="TextVariants.p">This is a full page demo.</Text>
        </TextContent>
      </PageSection>
    }
    @ChildContent
  </Content>
</Page>

@code {
  /// Additional attributes that will be applied to the component.
  [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

  /// Content rendered inside the component.
  [Parameter] public RenderFragment ChildContent { get; set; }

  [Parameter] public string MainContainerId { get; set; }

  [Parameter] public bool HasNoBreadcrumb { get; set; }

  [Parameter] public RenderFragment Breadcrumb { get; set; }

  [Parameter] public bool HasPageTemplateTitle { get; set; }

  [Parameter] public RenderFragment NotificationDrawer { get; set; }

  [Parameter] public bool IsNotificationDrawerExpanded { get; set; }

  private RenderFragment RenderedBreadcrumb
    => HasNoBreadcrumb ? null : Breadcrumb ?? DashboardBreadCrumb;

  private RenderFragment DashboardBreadCrumb => __builder =>
  {
      <Breadcrumb>
      <BreadcrumbItem>Section home</BreadcrumbItem>
      <BreadcrumbItem to="#">Section title</BreadcrumbItem>
      <BreadcrumbItem to="#">Section title</BreadcrumbItem>
      <BreadcrumbItem to="#" isActive>
        Section landing
      </BreadcrumbItem>
    </Breadcrumb>
  };

  private bool   IsManagedSidebar     { get; set; } = true;
  private bool   IsNavOpen            { get; set; } = true;
  private bool   IsMobileView         { get; set; } = true;
  private bool   IsNavOpenMobile      { get; set; }
  private bool   IsSidebarNavOpen     { get => IsMobileView ? IsNavOpenMobile : IsNavOpen; }
  private string SkipToContentHref    { get => MainContainerIdValue; }
  private string MainContainerIdValue { get => !string.IsNullOrEmpty(MainContainerId) ? MainContainerId : "main-content-page-layout-default-nav"; }

  protected override void OnInitialized()
  {
    NavigationManager.LocationChanged += LocationChanged;
    base.OnInitialized();
  }

  private void LocationChanged(object sender, LocationChangedEventArgs e)
  {
    if (IsMobileView)
    {
      IsNavOpenMobile = false;
      StateHasChanged();
    }
  }

  void IDisposable.Dispose()
  {
    NavigationManager.LocationChanged -= LocationChanged;
  }

  private void NavToggleHandler(bool isNavOpen)
  {
    if (IsMobileView)
    {
      OnNavToggleMobile(isNavOpen);
    }
    else
    {
      OnNavToggle(isNavOpen);
    }
  }

  private void OnNavToggleMobile(bool isNavOpen)
  {
    IsNavOpenMobile = isNavOpen;
  }

  private void OnNavToggle(bool isNavOpen)
  {
    IsNavOpen = isNavOpen;
  }

  private void OnPageResize(PageResizeEventArgs args)
  {
    IsMobileView = args.MobileView;
  }
}