@page "/demos/card-view"
@layout DemoLayout

<DashboardWrapper MainContainerId="main-content-card-view-default-nav">
  <PageSection Variant="PageSectionVariants.Light">
    <TextContent>
      <Text Component="TextVariants.h1">Projects</Text>
      <Text Component="TextVariants.p">This is a demo that showcases PatternFly cards.</Text>
    </TextContent>
    <Toolbar id="toolbar-group-types">
      <ToolbarContent>
        <ToolbarItem Variant="ToolbarItemVariant.OverflowMenu">
          <OverflowMenu Breakpoint="Breakpoints.Medium">
            <OverflowMenuItem>
              <Button Variant="ButtonVariant.Primary">Create a project</Button>
            </OverflowMenuItem>
            <OverflowMenuControl HasAdditionalOptions>
              <Dropdown IsPlain>
                <Toggle>
                  <KebabToggle id="toggle-id-6"/>
                </Toggle>
                <DropdownItems>
                  <OverflowMenuDropdownItem @key="1">Link</OverflowMenuDropdownItem>
                  <OverflowMenuDropdownItem @key="2" Component="button">
                    Action
                  </OverflowMenuDropdownItem>
                  <OverflowMenuDropdownItem @key="3" IsDisabled>
                    Disabled Link
                  </OverflowMenuDropdownItem>
                  <OverflowMenuDropdownItem @key="4" IsDisabled Component="button">
                    Disabled Action
                  </OverflowMenuDropdownItem>
                  <DropdownSeparator @key="5" />
                  <OverflowMenuDropdownItem @key="7">Separated Link</OverflowMenuDropdownItem>
                  <OverflowMenuDropdownItem @key="6" Component="button">
                    Separated Action
                  </OverflowMenuDropdownItem>
                </DropdownItems>
              </Dropdown>
            </OverflowMenuControl>
          </OverflowMenu>
        </ToolbarItem>
        <ToolbarItem Variant="ToolbarItemVariant.Pagination" Alignment="@(new Alignment {Default = Alignments.Right})">
          <Pagination
            ItemCount="@TotalItemCount"
            Page="@Page"
            PerPage="@PerPage"
            PerPageOptions="@DefaultPerPageOptions"
            OnSetPage="@OnSetPage"
            OnPerPageSelect="@OnPerPageSelect"
            Variant="PaginationVariant.Top"
            IsCompact/>
        </ToolbarItem>
      </ToolbarContent>
    </Toolbar>
  </PageSection>
  <PageSection IsFilled="true">
    <Gallery HasGutter>
      <Card IsHoverable IsCompact>
        <Bullseye>
          <EmptyState Variant="EmptyStateVariant.ExtraSmall">
            <EmptyStateIcon>
              <PlusCircleIcon/>
            </EmptyStateIcon>
            <Title HeadingLevel="HeadingLevel.h2" Size="TitleSizes.Medium">
              Add a new card to your page
            </Title>
            <EmptyStateSecondaryActions>
              <Button Variant="ButtonVariant.Link">Add card</Button>
            </EmptyStateSecondaryActions>
          </EmptyState>
        </Bullseye>
      </Card>
      @foreach (var product in FilteredProducts)
      {
        <Card IsHoverable IsCompact @key="@product.Name">
          <CardHeader>
            <img src="@product.IconSrc" alt="@product.IconAlt icon" style="max-width:60px"/>
            <CardActions>
              <Dropdown IsPlain Position="DropdownPosition.Right">
                <Toggle><KebabToggle/></Toggle>
                <DropdownItems>
                  <DropdownItem @key="1" OnClick="@(() => DeleteItem(product))" Position="">
                    <TrashIcon/>
                    Delete
                  </DropdownItem>
                </DropdownItems>
              </Dropdown>
              <Checkbox
                Value="@product.IsChecked"
                ValueChanged="@(() => OnSelectProduct(product))"
                AriaLabel="card checkbox example"
                id="@product.StrId"/>
            </CardActions>
          </CardHeader>
          <CardTitle>@product.Name</CardTitle>
          <CardBody>@product.Description</CardBody>
        </Card>
      }
    </Gallery>
  </PageSection>
  <PageSection
    IsFilled="false"
    Sticky="StickyPosition.Bottom"
    Padding="@(new Padding { Default = Paddings.NoPadding })"
    Variant="PageSectionVariants.Light">
    <Pagination
      ItemCount="@TotalItemCount"
      Page="@Page"
      PerPage="@PerPage"
      OnPerPageSelect="@OnPerPageSelect"
      OnSetPage="@OnSetPage"
      Variant="PaginationVariant.Bottom"/>
  </PageSection>
 </DashboardWrapper>

@code {
  private int Page           { get; set; } = 1;
  private int PerPage        { get; set; } = 10;
  private int TotalItemCount { get; set; } = 10;
  
  private PerPageOptions[] DefaultPerPageOptions = 
  {
    new() { Title = "1" , Value = 1 },
    new() { Title = "5" , Value = 5 },
    new() { Title = "10", Value = 10 }
  };
  
  private async Task OnSetPage(SetPageEventArgs args)
  {
    await Fetch(args.NewPage, PerPage);
  }
  
  private async Task OnPerPageSelect(PerPageSelectEventArgs args)
  {
    await Fetch(1, args.NewPerPage);
  }
 
  
  private List<Product> Products { get; set; }
  private List<int> SelectedProducts { get; set; } = new();
  private IEnumerable<Product> FilteredProducts { get => Products is not null && Products.Count > 0 ? Products : Array.Empty<Product>(); }

  private async Task Fetch(int page, int perPage)
  {
    using var http = new HttpClient();
    
    var uri = new Uri($"https://my-json-server.typicode.com/jenny-s51/cardviewdata/posts?_page={page}&_limit={perPage}");
    
    Products = await http.GetFromJsonAsync<List<Product>>(uri);

    Page    = page;
    PerPage = perPage;
  }
  
  private void DeleteItem(Product product)
  {
    Products.Remove(product);
  }
  
  private void OnSelectProduct(Product product)
  {
    product.IsChecked = !product.IsChecked;
    if (product.IsChecked)
    {
      SelectedProducts.Add(product.Id);
    }
    else
    {
      SelectedProducts.Remove(product.Id);
    }
  }

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    await Fetch(Page, PerPage);
  }
}