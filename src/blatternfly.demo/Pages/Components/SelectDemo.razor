@page "/components/select"

<TextContent>
  <Title class="pf-u-mb-md">Select</Title>
  <Text class="pf-u-mb-md">
    A <strong>select list</strong> enables users to select one or more items from a list.
  </Text>
  <Text class="pf-u-mb-md">
    See the <a target="_blank" href="https://www.patternfly.org/v4/components/select/design-guidelines">PatternFly design guidelines</a> for more details.
  </Text>
</TextContent>

<section class="example-section">
  <Title Size="TitleSizes.Large">Single</Title>
  <div>
    <span id="@TitleId" hidden>
      Title
    </span>
    <Select
      Variant="SelectVariant.Single"
      AriaLabel="Select Input"
      OnToggle="@OnToggle"
      OnSelect="@OnSelect"
      Selections="@Selected"
      IsOpen="@IsOpen"
      aria-labelledby="@TitleId"
      IsDisabled="@IsDisabled"
      Direction="@Direction"
      PlaceholderText="Select a title"
    >
      <ToggleIcon>
        @if (IsToggleIcon)
        {
            <CubeIcon />
        }
      </ToggleIcon>
      <ChildContent>
        <SelectOption @key="0" Value="Select a title" IsPlaceholder="true" />
        <SelectOption @key="1" Value="Mr" />
        <SelectOption @key="2" Value="Miss" />
        <SelectOption @key="3" Value="Mrs" />
        <SelectOption @key="4" Value="Ms" />
        <Divider Component="DividerVariant.li" @key="5" />
        <SelectOption @key="6" Value="Dr" />
        <SelectOption @key="7" Value="Other" />
      </ChildContent>
    </Select>
    <Checkbox
      label="isDisabled"
      AriaLabel="disabled checkbox"
      id="toggle-disabled"
      name="toggle-disabled"
      @bind-Value="@IsDisabled"
    />
    <Checkbox
      label="Expands up"
      AriaLabel="direction checkbox"
      id="toggle-direction"
      name="toggle-direction"
      @bind-Value="@DirectionUp"
    />
    <Checkbox
      label="Show icon"
      AriaLabel="show icon checkbox"
      id="toggle-icon"
      name="toggle-icon"
      @bind-Value="@IsToggleIcon"
    />
  </div>
</section>

@code {
  private string TitleId => "title-id-1";

  private bool IsToggleIcon { get; set; }
  private bool IsOpen       { get; set; }
  private string Selected   { get; set; }
  private bool IsDisabled   { get; set; }
  private SelectDirection Direction { get; set; } = SelectDirection.Down;

  private bool _directionUp;

  private bool DirectionUp
  {
    get => _directionUp;
    set
    {
      _directionUp = value;
      Direction = value ? SelectDirection.Up : SelectDirection.Down;
    }
  }

  private void ClearSelection()
  {
    Selected = null;
    IsOpen   = false;
  }

  private void OnToggle(bool isOpen) => IsOpen = isOpen;

  private void OnSelect(SelectOption selection)
  {
    if (selection.IsPlaceholder)
    {
      ClearSelection();
    }
    else
    {
      Selected = selection.Value;
      IsOpen = false;
    }
  }
}