@page "/components/select"

<TextContent>
  <Title class="pf-u-mb-md">Select</Title>
  <Text class="pf-u-mb-md">
    A <strong>select list</strong> enables users to select one or more items from a list.
  </Text>
  <Text class="pf-u-mb-md">
    See the <a target="_blank" href="https://www.patternfly.org/v4/components/select/design-guidelines">PatternFly design guidelines</a> for more details.
  </Text>
</TextContent>

<Flex>
  <FlexItem Component="nav" class="ws-toc">
    <Title Size="TitleSizes.Large">Table of contents</Title>
    <JumpLinks IsVertical ScrollableSelector=".pf-c-page__main" OffsetSelector=".pf-c-page__header">
      <JumpLinksItem Href="#examples">
        <ChildContent>Examples</ChildContent>
        <SubLists>
          <JumpLinksList>
            <JumpLinksItem Href="#single">Single</JumpLinksItem>
            <JumpLinksItem Href="#with-a-style-applied-to-the-placeholder-text">With a style applied to the placeholder text</JumpLinksItem>
          </JumpLinksList>
        </SubLists>
      </JumpLinksItem>
    </JumpLinks>
  </FlexItem>
  <FlexItem Grow="@(new FlexGrow { Default = true })">
    <Title id="examples" Size="TitleSizes.Large">Examples</Title>

    <section id="single" class="example-section">
      <Title Size="TitleSizes.Large">Single</Title>
      <div>
        <span id="@TitleId" hidden>
          Title
        </span>
        <Select
          Variant="SelectVariant.Single"
          AriaLabel="Select Input"
          OnToggle="@Select1.OnToggle"
          OnSelect="@Select1.OnSelect"
          Selections="@Select1.Selected"
          IsOpen="@Select1.IsOpen"
          aria-labelledby="@TitleId"
          IsDisabled="@Select1.IsDisabled"
          Direction="@Select1.Direction"
          PlaceholderText="Select a title"
        >
          <ToggleIcon>
            @if (Select1.IsToggleIcon)
            {
                <CubeIcon />
            }
          </ToggleIcon>
          <ChildContent>
            <SelectOption @key="0" Value="Select a title" IsPlaceholder="true" />
            <SelectOption @key="1" Value="Mr" />
            <SelectOption @key="2" Value="Miss" />
            <SelectOption @key="3" Value="Mrs" />
            <SelectOption @key="4" Value="Ms" />
            <Divider Component="DividerVariant.li" @key="5" />
            <SelectOption @key="6" Value="Dr" />
            <SelectOption @key="7" Value="Other" />
          </ChildContent>
        </Select>
        <Checkbox
          label="isDisabled"
          AriaLabel="disabled checkbox"
          id="toggle-disabled"
          name="toggle-disabled"
          @bind-Value="@Select1.IsDisabled"
        />
        <Checkbox
          label="Expands up"
          AriaLabel="direction checkbox"
          id="toggle-direction"
          name="toggle-direction"
          @bind-Value="@Select1.DirectionUp"
        />
        <Checkbox
          label="Show icon"
          AriaLabel="show icon checkbox"
          id="toggle-icon"
          name="toggle-icon"
          @bind-Value="@Select1.IsToggleIcon"
        />
      </div>
    </section>

    <section id="with-a-style-applied-to-the-placeholder-text" class="example-section">
      <Title Size="TitleSizes.Large">With a style applied to the placeholder text</Title>
      <div>
        <span id="@TitleId" hidden>
          Placeholder styles
        </span>
        <Select
          Variant="SelectVariant.Single"
          HasPlaceholderStyle
          AriaLabel="Select Input"
          OnToggle="@Select2.OnToggle"
          OnSelect="@Select2.OnSelect"
          Selections="@Select2.Selected"
          IsOpen="@Select2.IsOpen"
          PlaceholderText="Filter by status"
          aria-labelledby="@TitleId"
        >
          <ChildContent>
            <SelectOption @key="0" Value="Active" />
            <SelectOption @key="1" Value="Cancelled" />
            <SelectOption @key="2" Value="Paused" />
          </ChildContent>
        </Select>
      </div>
    </section>
  </FlexItem>
</Flex>

@code {
  private string TitleId => "title-id-1";

  private SelectModel Select1 { get; set; } = new();
  private SelectModel Select2 { get; set; } = new();

  public class SelectModel
  {
    public bool            IsToggleIcon { get; set; }
    public bool            IsOpen       { get; set; }
    public string          Selected     { get; set; }
    public bool            IsDisabled   { get; set; }
    public SelectDirection Direction    { get; set; } = SelectDirection.Down;

    private bool _directionUp;

    public bool DirectionUp
    {
      get => _directionUp;
      set
      {
        _directionUp = value;
        Direction = value ? SelectDirection.Up : SelectDirection.Down;
      }
    }

    public void ClearSelection()
    {
      Selected = null;
      IsOpen   = false;
    }

    public void OnToggle(bool isOpen) => IsOpen = isOpen;

    public void OnSelect(SelectOption selection)
    {
      if (selection.IsPlaceholder)
      {
        ClearSelection();
      }
      else
      {
        Selected = selection.Value;
        IsOpen = false;
      }
    }
  }
}