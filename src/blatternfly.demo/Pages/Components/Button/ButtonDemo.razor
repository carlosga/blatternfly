@page "/components/button"

<TextContent>
  <Title class="pf-u-mb-md">Button</Title>
  <Text class="pf-u-mb-md">
    A <strong>button</strong> is a box area or text that communicates and triggers user actions when clicked or selected.
  </Text>
  <Text class="pf-u-mb-md">
    See the <a target="_blank" href="https://www.patternfly.org/v4/components/button/design-guidelines">PatternFly design guidelines</a> for more details.
  </Text>
</TextContent>

<Flex>
  <FlexItem Component="nav" class="ws-toc">
    <Title Size="TitleSizes.Large">Table of contents</Title>
    <JumpLinks IsVertical ScrollableSelector=".pf-c-page__main" OffsetSelector=".pf-c-page__header">
      <JumpLinksItem Href="#examples">
        <ChildContent>Examples</ChildContent>
        <SubLists>
          <JumpLinksList>
            <JumpLinksItem Href="#variations">Variations</JumpLinksItem>
            <JumpLinksItem Href="#disabled">Disabled</JumpLinksItem>
            <JumpLinksItem Href="#aria-disabled">Aria Disabled</JumpLinksItem>
            <JumpLinksItem Href="#links-as-buttons">Links as buttons</JumpLinksItem>
            <JumpLinksItem Href="#inline-link-as-span">Inline link as span</JumpLinksItem>
            <JumpLinksItem Href="#block-level">Block level</JumpLinksItem>
            <JumpLinksItem Href="#types">Types</JumpLinksItem>
            <JumpLinksItem Href="#small">Small</JumpLinksItem>
            <JumpLinksItem Href="#call-to-action">Call to action</JumpLinksItem>
            <JumpLinksItem Href="#progress">Progress</JumpLinksItem>
          </JumpLinksList>
        </SubLists>
      </JumpLinksItem>
    </JumpLinks>
  </FlexItem>
  <FlexItem Grow="@(new FlexGrow { Default = true })">
    <Title id="examples" Size="TitleSizes.Large">Examples</Title>

    <section id="variations" class="example-section">
      <Title Size="TitleSizes.Large">Variations</Title>
      <Button Variant="ButtonVariant.Primary">Primary</Button>
      <Button Variant="ButtonVariant.Secondary">Secondary</Button>
      <Button Variant="ButtonVariant.Secondary" IsDanger>
        Danger Secondary
      </Button>
      <Button Variant="ButtonVariant.Tertiary">Tertiary</Button>
      <Button Variant="ButtonVariant.Danger">Danger</Button>
      <Button Variant="ButtonVariant.Warning">Warning</Button>
      <br />
      <br />
      <Button Variant="ButtonVariant.Link">
        <Icon><PlusCircleIcon /></Icon>
        <ChildContent>Link</ChildContent>
      </Button>
      <Button Variant="ButtonVariant.Link" IconPosition="Alignments.Right">
        <Icon><ExternalLinkSquareAltIcon /></Icon>
        <ChildContent>Link</ChildContent>
      </Button>
      <Button Variant="ButtonVariant.Link" IsInline>
        Inline link
      </Button>
      <Button Variant="ButtonVariant.Link" IsDanger>
        Danger link
      </Button>
      <br />
      <br />
      <Button Variant="ButtonVariant.Plain" AriaLabel="Action">
        <TimesIcon />
      </Button>
      <br />
      <br />
      <Button Variant="ButtonVariant.Control">Control</Button>
      <Button Variant="ButtonVariant.Control" AriaLabel="Copy">
        <CopyIcon />
      </Button>
    </section>

    <section id="disabled" class="example-section">
      <Title Size="TitleSizes.Large">Disabled</Title>
      <Button Variant="ButtonVariant.Primary" IsDisabled>Primary disabled</Button>
      <Button Variant="ButtonVariant.Secondary" IsDisabled>Secondary disabled</Button>
      <Button Variant="ButtonVariant.Secondary" IsDanger IsDisabled>
        Danger secondary disabled
      </Button>
      <Button IsDisabled Variant="ButtonVariant.Tertiary">
        Tertiary disabled
      </Button>
      <Button IsDisabled Variant="ButtonVariant.Danger">
        Danger disabled
      </Button>
      <Button IsDisabled Variant="ButtonVariant.Warning">
        Warning disabled
      </Button>
      <br />
      <br />
      <Button IsDisabled Variant="ButtonVariant.Link">
        <Icon><PlusCircleIcon /></Icon>
        <ChildContent>Link disabled</ChildContent>
      </Button>
      <Button IsDisabled Variant="ButtonVariant.Link" IsInline>
        Inline link disabled
      </Button>
      <Button Variant="ButtonVariant.Link" IsDanger IsDisabled>
        Danger link disabled
      </Button>
      <Button IsDisabled Variant="ButtonVariant.Plain" AriaLabel="Action">
        <TimesIcon />
      </Button>
      <Button IsDisabled Variant="ButtonVariant.Control">
        Control disabled
      </Button>
    </section>

    <section id="aria-disabled" class="example-section">
      <Title Size="TitleSizes.Large">Aria Disabled</Title>
      <Button Variant="ButtonVariant.Primary" IsAriaDisabled>Primary disabled</Button>
      <Button Variant="ButtonVariant.Secondary" IsAriaDisabled>Secondary disabled</Button>
      <Button Variant="ButtonVariant.Secondary" IsDanger IsAriaDisabled>
        Danger secondary disabled
      </Button>
      <Button IsAriaDisabled Variant="ButtonVariant.Tertiary">
        Tertiary disabled
      </Button>
      <Button IsAriaDisabled Variant="ButtonVariant.Danger">
        Danger disabled
      </Button>
      <Button IsAriaDisabled Variant="ButtonVariant.Warning">
        Warning disabled
      </Button>
      <br />
      <br />
      <Button IsAriaDisabled Variant="ButtonVariant.Link">
        <Icon><PlusCircleIcon /></Icon>
        <ChildContent>Link disabled</ChildContent>
      </Button>
      <Button IsAriaDisabled Variant="ButtonVariant.Link" IsInline>
        Inline link disabled
      </Button>
      <Button Variant="ButtonVariant.Link" IsDanger IsAriaDisabled>
        Danger link disabled
      </Button>
      <Button IsAriaDisabled Variant="ButtonVariant.Plain" AriaLabel="Action">
        <TimesIcon />
      </Button>
      <Button IsAriaDisabled Variant="ButtonVariant.Control">
        Control disabled
      </Button>
    </section>

    <section class="example-section">
      <Title Size="TitleSizes.Large">Links as buttons</Title>
      <Button Component="a" href="https://pf4.patternfly.org/" target="_blank" Variant="ButtonVariant.Primary">
        Link to core docs
      </Button>
      <Button Component="a" href="https://pf4.patternfly.org/" target="_blank" Variant="ButtonVariant.Secondary">
        Secondary link to core docs
      </Button>
      <Button IsDisabled Component="a" href="https://pf4.patternfly.org/" target="_blank" Variant="ButtonVariant.Tertiary">
        Tertiary link to core docs
      </Button>
      <Button Component="a" href="https://pf4.patternfly.org/contribution/#modifiers" Variant="ButtonVariant.Link">
        Jump to modifiers in contribution guidelines
      </Button>
    </section>

    <section id="inline-link-as-span" class="example-section">
      <Title Size="TitleSizes.Large">Inline link as span</Title>
      <p>
        Lorem ipsum dolor sit amet, consectetur adipiscing elit.
        <Button Variant="ButtonVariant.Link" IsInline Component="span">
          This is long button text that needs to be a span so that it will wrap inline with the text around it.
        </Button> Sed hendrerit nisi in cursus maximus. Ut malesuada nisi turpis, in condimentum velit elementum non.
      </p>
    </section>

    <section id="block-level" class="example-section">
      <Title Size="TitleSizes.Large">Block level</Title>
      <Button IsBlock="true">Block level button</Button>
    </section>

    <section id="types" class="example-section">
      <Title Size="TitleSizes.Large">Types</Title>
      <Button Type="ButtonType.Submit">Submit</Button> <Button Type="ButtonType.Reset">Reset</Button> <Button>Default</Button>
    </section>

    <section id="small" class="example-section">
      <Title Size="TitleSizes.Large">Small</Title>
      <Button Variant="ButtonVariant.Primary" IsSmall>
        Primary
      </Button>
      <Button Variant="ButtonVariant.Secondary" IsSmall>
        Secondary
      </Button>
      <Button Variant="ButtonVariant.Tertiary" IsSmall>
        Tertiary
      </Button>
      <Button Variant="ButtonVariant.Danger" IsSmall>
        Danger
      </Button>
      <Button Variant="ButtonVariant.Warning" IsSmall>
        Warning
      </Button>
    </section>

    <section id="call-to-action" class="example-section">
      <Title Size="TitleSizes.Large">Call to action</Title>
      <Button Variant="ButtonVariant.Primary" IsLarge>
        Call to action
      </Button>
      <Button Variant="ButtonVariant.Secondary" IsLarge>
        Call to action
      </Button>
      <Button Variant="ButtonVariant.Tertiary" IsLarge>
        Call to action
      </Button>
      <Button Variant="ButtonVariant.Link" IsLarge>
        Call to action <ArrowRightIcon />
      </Button>
    </section>

    <section id="progress" class="example-section">
      <Title Size="TitleSizes.Large">Progress</Title>
      <Button
        SpinnerAriaValueText="@PrimarySpinnerText"
        IsLoading="IsPrimaryLoading"
        Variant="ButtonVariant.Primary"
        OnClick="@OnPrimaryClick"
      >
        @if (IsPrimaryLoading)
        {
          <label>Click to stop loading</label>
        }
        else
        {
          <label>Click to start loading</label>
        }
      </Button>

      <Button
        SpinnerAriaValueText="@SecondarySpinnerText"
        IsLoading="IsSecondaryLoading"
        Variant="ButtonVariant.Secondary"
        OnClick="@OnSecondaryClick"
      >
        @if (IsSecondaryLoading)
        {
          <label>Click to stop loading</label>
        }
        else
        {
          <label>Click to start loading</label>
        }
      </Button>

      <Button
        SpinnerAriaValueText="UploadingSpinnerText"
        IsLoading="@IsUploading"
        Variant="ButtonVariant.Plain"
        OnClick="@OnUploadingClick"
      >
        <Icon><UploadIcon /></Icon>
      </Button>
    </section>
  </FlexItem>
</Flex>

@code {
  private bool IsPrimaryLoading   { get; set; } = true;
  private bool IsSecondaryLoading { get; set; } = true;
  private bool IsUploading        { get; set; } = true;

  private string PrimarySpinnerText   => IsPrimaryLoading ? "Loading" : null;
  private string SecondarySpinnerText => IsPrimaryLoading ? "Loading" : null;
  private string UploadingSpinnerText => IsUploading      ? "Loading" : null;

  private void OnPrimaryClick(MouseEventArgs _)
  {
    IsPrimaryLoading = !IsPrimaryLoading;
  }

  private void OnSecondaryClick(MouseEventArgs _)
  {
    IsSecondaryLoading = !IsSecondaryLoading;
  }

  private void OnUploadingClick(MouseEventArgs _)
  {
    IsUploading = !IsUploading;
  }
}