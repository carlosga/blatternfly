@page "/components/slider"

<Title HeadingLevel="HeadingLevel.h1" Size="TitleSizes.ExtraLarge4">Slider</Title>
<Title HeadingLevel="HeadingLevel.h2" Size="TitleSizes.ExtraLarge">Examples</Title>

<section class="example-section">
  <Title Size="TitleSizes.Large">Discrete</Title>
  <Text Component="TextVariants.h3">Slider value is: @DisplayValue</Text>
  <Slider @bind-Value="@Value1" CustomSteps="Steps" />
  <br />
  <Text Component="TextVariants.h3">Slider value is: @Math.Floor(Value2)</Text>
  <Text Component="TextVariants.small">(min = 0, max = 200, step = 50)</Text>
  <Slider @bind-Value="@Value2" Max="200" Step="50" showTicks/>
  <br /> 
  <Text Component="TextVariants.h3">Slider value is: @Math.Floor(Value3)</Text>
  <Text Component="TextVariants.small">(min = -25, max = 75, step = 10, boundaries not shown)</Text>
  <Slider @bind-Value="@Value3" Min="-25" Max="75" Step="10" ShowTicks="true" ShowBoundaries="false"/>
  <br />
  <Text Component="TextVariants.h3">Slider value is: @Math.Floor(Value4)</Text>
  <Text Component="TextVariants.small">(min = -25, max = 75, step = 10, boundaries shown)</Text>
  <Slider @bind-Value="@Value4" Min="-25" Max="75" Step="10" ShowTicks="true" />
  <br />
  <Text Component="TextVariants.h3">Slider value is: @Math.Floor(Value5)</Text>
  <Text Component="TextVariants.small">(min = -25, max = 75, step = 10, boundaries shown, ticks not shown)</Text>
  <Slider @bind-Value="@Value5" Min="-25" Max="75" Step="10" />  
</section>

<section class="example-section">
  <Title Size="TitleSizes.Large">Continuous</Title>
  <Text Component="TextVariants.h3">Slider Value is: @ContinuousValue1</Text>
  <Slider @bind-Value="ContinuousValue1" />
  <br />
  <Text Component="TextVariants.h3">Slider Value is: @ContinuousValue2</Text>
  <Slider
    @bind-Value="@ContinuousValue2"
    AreCustomStepsContinuous="true"
    CustomSteps="@ContinuousSteps"
  />
</section>

<section class="example-section">
  <Title Size="TitleSizes.Large">Thumb value input</Title>
  <Slider
    @bind-Value="@ThumbValue"
    IsInputVisible="true"
    InputValue="@ThumbInputValue"
    InputLabel="%"
    InputPosition="SliderInputPosition.AboveThumb"
    InputValueChanged="@OnThumbInputValueChanged"
  />
</section>

<section class="example-section">
  <Title Size="TitleSizes.Large">Disabled</Title>
  <Text Component="TextVariants.h3">Slider Value is: @DisabledDisplayValue</Text>
  <Slider IsDisabled="true" @bind-Value="@DisabledValue" CustomSteps="Steps"/>
</section>

@code {
  
  private decimal Value1 { get; set; } = 50.0M;
  private decimal Value2 { get; set; } = 50.0M;
  private decimal Value3 { get; set; } = 25.0M;
  private decimal Value4 { get; set; } = 50.0M;
  private decimal Value5 { get; set; } = 50.0M;
  
  private decimal ContinuousValue1 { get; set; } = 50.0M;
  private decimal ContinuousValue2 { get; set; } = 50.0M;
  
  private decimal ThumbValue      { get; set; } = 50.0M;
  private decimal ThumbInputValue { get; set; } = 50.0M;
  
  private decimal DisabledValue { get; set; } = 50.0M; 

  private readonly  SliderStepObject[] ContinuousSteps = 
  {
    new() { Value = 0.0M  , Label = "0%" },
    new() { Value = 100.0M, Label = "100%" }
  };
  
  private readonly SliderStepObject[] Steps = 
  {
    new() { Value = 0.0M   , Label = "0" },
    new() { Value = 12.5M  , Label = "1", IsLabelHidden = true },
    new() { Value = 25.0M  , Label = "2" },
    new() { Value = 37.5M  , Label = "3", IsLabelHidden = true },
    new() { Value = 50.0M  , Label = "4" },
    new() { Value = 62.5M  , Label = "5", IsLabelHidden = true },
    new() { Value = 75.0M  , Label = "6" },
    new() { Value = 87.5M  , Label = "7", IsLabelHidden = true },
    new() { Value = 100.0M , Label = "8" }
  };
  
  private SliderStepObject Step { get => Steps.SingleOrDefault(step => step.Value == Value1); }
  private string DisplayValue { get => Step?.Label ?? "0"; }
  
  private SliderStepObject DisabledStep { get => Steps.SingleOrDefault(step => step.Value == DisabledValue); }
  private string DisabledDisplayValue { get => DisabledStep?.Label ?? "0"; }
  
  private void OnThumbInputValueChanged(SliderInputValueChangedEventArgs args)
  {
    decimal newValue;
    if (!args.InputValue.HasValue)
    {
      newValue = args.Value;
    }
    else
    {
      newValue = args.InputValue > 100.0M ? 100.0M : Math.Floor(args.InputValue.Value);
    }
    ThumbValue      = newValue;
    ThumbInputValue = newValue;
  }
}