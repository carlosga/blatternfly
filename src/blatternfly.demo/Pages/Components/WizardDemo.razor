@page "/components/wizard"
@using Blatternfly.Demo.Components

<TextContent>
  <Title class="pf-u-mb-md">Wizard</Title>
  <Text class="pf-u-mb-md">
    A <strong>wizard</strong> provides a guided workflow that offers a path to complete a task, create an object or objects, or finish a series of steps for some other outcome. 
  </Text>
  <Text class="pf-u-mb-md">
    See the <a target="_blank" href="https://www.patternfly.org/v4/components/wizard/design-guidelines">PatternFly design guidelines</a> for more details.
  </Text>
</TextContent>

<section class="example-section">
  <Title Size="TitleSizes.Large">Basic</Title>
  <Wizard
    NavAriaLabel="@BasicNavAriaLabel"
    MainAriaLabel="@BasicMainAriaLabel"
    Height="400"
  >
    <WizardStep Name="First step"><p>Step 1 content</p></WizardStep>
    <WizardStep Name="Second step"><p>Step 2 content</p></WizardStep>
    <WizardStep Name="Third step"><p>Step 3 content</p></WizardStep>
    <WizardStep Name="Fourth step"><p>Step 4 content</p></WizardStep>
    <WizardStep Name="Review" NextButtonText="Finish"><p>Review step content</p></WizardStep>
  </Wizard>
</section>

<section class="example-section">
  <Title Size="TitleSizes.Large">Incrementally enabled steps</Title>
  <Wizard
    NavAriaLabel="@BasicNavAriaLabel"
    MainAriaLabel="@BasicMainAriaLabel"
    OnClose="@OnCloseWizard"
    OnNext="@OnNext"
    Height="400"
  >
    <WizardStep Id="1" Name="First step"><p>Step 1 content</p></WizardStep>
    <WizardStep Id="2" Name="Second step" CanJumpTo="@(StepIdReached >= 2)"><p>Step 2 content</p></WizardStep>
    <WizardStep Id="3" Name="Third step"  CanJumpTo="@(StepIdReached >= 3)"><p>Step 3 content</p></WizardStep>
    <WizardStep Id="4" Name="Fourth step" CanJumpTo="@(StepIdReached >= 4)"><p>Step 4 content</p></WizardStep>
    <WizardStep Id="5" Name="Review"      CanJumpTo="@(StepIdReached >= 5)" NextButtonText="Finish"><p>Review step content</p></WizardStep>
  </Wizard>
</section>

<section class="example-section">
  <Title Size="TitleSizes.Large">Expandable steps</Title>
  @* <Wizard *@
  @*   NavAriaLabel="@BasicNavAriaLabel" *@
  @*   MainAriaLabel="@BasicMainAriaLabel" *@
  @*   Steps="@ExpandableSteps" *@
  @*   Height="400" *@
  @*   IsNavExpandable *@
  @* /> *@
</section>

<section class="example-section">
  <Title Size="TitleSizes.Large">Finished</Title>
  <Wizard
    NavAriaLabel="@BasicNavAriaLabel"
    MainAriaLabel="@BasicMainAriaLabel"
    OnClose="@OnCloseWizard"
    Height="400"
  >
    <WizardStep Name="First step"><p>Step 1 content</p></WizardStep>
    <WizardStep Name="Second step"><p>Step 2 content</p></WizardStep>
    <WizardStep Name="Third step"><p>Step 3 content</p></WizardStep>
    <WizardStep Name="Fourth step"><p>Step 4 content</p></WizardStep>
    <WizardStep Name="Review" NextButtonText="Finish"><p>Review step content</p></WizardStep>
    <WizardStep Name="Finish" IsFinishedStep="true"><FinishedStep OnClose="@OnCloseWizard" /></WizardStep>
  </Wizard>
</section>

@code {
  
  private const    string BasicTitle         = "Basic wizard";
  private readonly string BasicNavAriaLabel  = $"{BasicTitle} steps";
  private readonly string BasicMainAriaLabel = $"{BasicTitle} content";

  private int  StepIdReached  { get; set; } = 1;

  /*
  private readonly WizardStep[] ExpandableSteps =
  {
      new()
      {
        Name = "First step"  , Component = __builder => { <p>Step 1 content</p> },
        Steps = new WizardStep[]
        {
          new() { Name = "Substep A" , Component = __builder => { <p>Substep A content</p> } },    
          new() { Name = "Substep B" , Component = __builder => { <p>Substep B content</p> } },
        }
      },
      new() { Name = "Second step" , Component = __builder => { <p>Step 2 content</p> } },
      new()
      {
        Name = "Third step"  , Component = __builder => { <p>Step 3 content</p> },
        Steps = new WizardStep[]
        {
          new() { Name = "Substep C" , Component = __builder => { <p>Substep C content</p> } },    
          new() { Name = "Substep D" , Component = __builder => { <p>Substep D content</p> } },
        }
      },
      new() { Name = "Fourth step" , Component = __builder => { <p>Step 4 content</p> } },
      new() { Name = "Review"      , Component = __builder => { <p>Review step content</p> }, NextButtonText = "Finish" }    
  };

  private readonly WizardStep[] FinishedSteps =
  {
  };  
  */
  private Task OnCloseWizard()
  {
		Console.WriteLine("close wizard");
    return Task.CompletedTask;
  }
  
  private Task OnNext(WizardStepChangedEventArgs args)
  {
    StepIdReached = StepIdReached < args.NewStep.Value ? args.NewStep.Value : StepIdReached;
    
    return Task.CompletedTask;
  }
}