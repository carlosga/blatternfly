@page "/components/table"

<TextContent>
  <Title class="pf-u-mb-md">Table</Title>
  <Text class="pf-u-mb-md">
    A <strong>table</strong> is used to display large data sets that can be easily laid out in a simple grid with column headers.
  </Text>
  <Text class="pf-u-mb-md">
    See the <a target="_blank" href="https://www.patternfly.org/v4/components/table/design-guidelines">PatternFly design guidelines</a> for more details.
  </Text>
</TextContent>

<Flex>
  <FlexItem Component="nav" class="ws-toc">
    <Title Size="TitleSizes.Large">Table of contents</Title>
    <JumpLinks IsVertical ScrollableSelector=".pf-c-page__main" OffsetSelector=".pf-c-page__header">
      <JumpLinksItem Href="#examples">
        <ChildContent>Examples</ChildContent>
        <SubLists>
          <JumpLinksList>
            <JumpLinksItem Href="#basic">Basic</JumpLinksItem>
            <JumpLinksItem Href="#empty-state">Empty state</JumpLinksItem>
            <JumpLinksItem Href="#sortable-and-wrapping-headers">Sortable & wrapping headers</JumpLinksItem>
            <JumpLinksItem Href="#selectable">Selectable</JumpLinksItem>
            <JumpLinksItem Href="#expandable">Expandable</JumpLinksItem>
            <JumpLinksItem Href="#sticky-column">Sticky column</JumpLinksItem>
            <JumpLinksItem Href="#nested-column-headers">Nested column headers</JumpLinksItem>
          </JumpLinksList>
        </SubLists>
      </JumpLinksItem>
    </JumpLinks>
  </FlexItem>
  <FlexItem Grow="@(new FlexGrow { Default = true })">
    <Title id="examples" Size="TitleSizes.Large">Examples</Title>

    <Snippet id="basic" Title="Basic">
      <TableBasic />
    </Snippet>

    <Snippet id="empty-state" Title="Empty state">
      <TableEmptyState />
    </Snippet>

    <Snippet id="sortable-and-wrapping-headers" Title="Sortable & wrapping headers">
      <TableSortableAndWrappingHeaders />
    </Snippet>

    <section id="selectable" class="example-section">
      <Title Size="TitleSizes.Large">Selectable</Title>
      <Table AriaLabel="Selectable Table">
        <TableHeader>
          <TableHeaderRow Columns="@SelectableState.Columns" Context="column">
            <ColumnTemplate>
              <TableHeaderCell Select="@column.Select" OnSelect="@SelectableState.OnSelectAllRows">
                @column.Name
              </TableHeaderCell>
            </ColumnTemplate>
          </TableHeaderRow>
        </TableHeader>
        <TableBody Rows="@SelectableState.Rows" Context="item">
          <RowTemplate>
            <TableRow>
              <TableCell @key="0" Select="@item.Selection" OnSelect="@SelectableState.OnSelectRow"></TableCell>
              <TableCell @key="1" DataLabel="@SelectableState.Columns[1].Name">@item.Name</TableCell>
              <TableCell @key="2" DataLabel="@SelectableState.Columns[2].Name">@item.Branches</TableCell>
              <TableCell @key="3" DataLabel="@SelectableState.Columns[3].Name">@item.PullRequests</TableCell>
              <TableCell @key="4" DataLabel="@SelectableState.Columns[4].Name">@item.Workspaces</TableCell>
              <TableCell @key="5" DataLabel="@SelectableState.Columns[5].Name">@item.LastCommit</TableCell>
            </TableRow>
          </RowTemplate>
        </TableBody>
      </Table>
    </section>

    <section id="expandable" class="example-section">
      <Title Size="TitleSizes.Large">Expandable</Title>
      <Checkbox
        Label="Compact"
        @bind-Value="@ExpandableState.IsCompact"
        AriaLabel="toggle compact variation"
        id="toggle-compact"
        name="toggle-compact"
      />
      <Table
        AriaLabel="Expandable Table"
        Variant="@ExpandableState.Variant"
      >
        <TableHeader>
          <TableHeaderRow Columns="@ExpandableState.Columns" Context="column">
            <ColumnTemplate>
              <TableHeaderCell>@column</TableHeaderCell>
            </ColumnTemplate>
          </TableHeaderRow>
        </TableHeader>
        <TableBody Rows="@ExpandableState.Rows" Context="item">
          <ExpandableRowTemplate>
            <TableRowGroup IsExpanded="@item.IsExpanded">
              <TableRow @key="@item">
                <TableCell @key="1" Expand="@item.Expand" OnToggle="@ExpandableState.OnToggle"></TableCell>
                <TableCell @key="2" DataLabel="@ExpandableState.Columns[0]">@item.Parent.Name</TableCell>
                <TableCell @key="3" DataLabel="@ExpandableState.Columns[1]">@item.Parent.Branches</TableCell>
                <TableCell @key="4" DataLabel="@ExpandableState.Columns[2]">@item.Parent.PullRequests</TableCell>
                <TableCell @key="5" DataLabel="@ExpandableState.Columns[3]">@item.Parent.Workspaces</TableCell>
                <TableCell @key="6" DataLabel="@ExpandableState.Columns[4]">@item.Parent.LastCommit</TableCell>
              </TableRow>
              @if (@item.Expand is not null && @item.Expand.IsExpanded)
              {
                <TableRow @key="@item.Child" IsExpanded="@item.IsExpanded">
                  @if (!string.IsNullOrEmpty(item.Child.Value3))
                  {
                    <TableCell @key="1" colspan="2">
                      <ExpandableRowContent>@item.Child.Value1</ExpandableRowContent>
                    </TableCell>
                    <TableCell @key="2" colspan="2">
                      <ExpandableRowContent>@item.Child.Value2</ExpandableRowContent>
                    </TableCell>
                    <TableCell @key="3" colspan="2">
                      <ExpandableRowContent>@item.Child.Value3</ExpandableRowContent>
                    </TableCell>
                  }
                  else if (!string.IsNullOrEmpty(item.Child.Value2))
                  {
                    <TableCell></TableCell>
                    <TableCell @key="1" colspan="2">
                      <ExpandableRowContent>@item.Child.Value1</ExpandableRowContent>
                    </TableCell>
                    <TableCell @key="2" colspan="3">
                      <ExpandableRowContent>@item.Child.Value2</ExpandableRowContent>
                    </TableCell>
                  }
                  else
                  {
                    <TableCell></TableCell>
                    <TableCell @key="1" colspan="5" NoPadding="@item.Expand.NoPadding">
                      <ExpandableRowContent>@item.Child.Value1</ExpandableRowContent>
                    </TableCell>
                  }
                </TableRow>
              }
            </TableRowGroup>
          </ExpandableRowTemplate>
        </TableBody>
      </Table>
    </section>

    <section id="sticky-column" class="example-section">
      <Title Size="TitleSizes.Large">Sticky column</Title>
      <InnerScrollContainer>
        <Table AriaLabel="Sticky column table" GridBreakPoint="TableGridBreakPoint.None" style="width: 1000px">
          <TableHeader>
            <TableHeaderRow Columns="@StickyState.Columns" Context="column">
              <ColumnTemplate>
                <TableHeaderCell
                  IsStickyColumn="@column.IsSticky"
                  HasRightBorder="@column.HasRightBorder"
                  Sort="@column.Sort"
                  Modifier="@column.WrapModifier"
                  OnSort="@StickyState.OnSort"
                >
                  @column.Name
                </TableHeaderCell>
              </ColumnTemplate>
            </TableHeaderRow>
          </TableHeader>
          <TableBody Rows="@StickyState.Range" Context="item">
            <RowTemplate>
              <TableRow>
                <TableCell IsStickyColumn="@StickyState.Columns[0].IsSticky" HasRightBorder="@StickyState.Columns[0].HasRightBorder" DataLabel="@StickyState.Columns[0].Name">@item.Value1</TableCell>
                <TableCell IsStickyColumn="@StickyState.Columns[1].IsSticky" HasRightBorder="@StickyState.Columns[1].HasRightBorder" DataLabel="@StickyState.Columns[1].Name">@item.Value2</TableCell>
                <TableCell IsStickyColumn="@StickyState.Columns[2].IsSticky" HasRightBorder="@StickyState.Columns[2].HasRightBorder" DataLabel="@StickyState.Columns[2].Name">@item.Value3</TableCell>
                <TableCell IsStickyColumn="@StickyState.Columns[3].IsSticky" HasRightBorder="@StickyState.Columns[3].HasRightBorder" DataLabel="@StickyState.Columns[3].Name">@item.Value4</TableCell>
                <TableCell IsStickyColumn="@StickyState.Columns[4].IsSticky" HasRightBorder="@StickyState.Columns[4].HasRightBorder" DataLabel="@StickyState.Columns[4].Name">@item.Value5</TableCell>
                <TableCell IsStickyColumn="@StickyState.Columns[5].IsSticky" HasRightBorder="@StickyState.Columns[5].HasRightBorder" DataLabel="@StickyState.Columns[5].Name">@item.Value6</TableCell>
                <TableCell IsStickyColumn="@StickyState.Columns[6].IsSticky" HasRightBorder="@StickyState.Columns[6].HasRightBorder" DataLabel="@StickyState.Columns[6].Name">@item.Value7</TableCell>
                <TableCell IsStickyColumn="@StickyState.Columns[7].IsSticky" HasRightBorder="@StickyState.Columns[7].HasRightBorder" DataLabel="@StickyState.Columns[7].Name">@item.Value8</TableCell>
                <TableCell IsStickyColumn="@StickyState.Columns[8].IsSticky" HasRightBorder="@StickyState.Columns[8].HasRightBorder" DataLabel="@StickyState.Columns[8].Name">@item.Value9</TableCell>
              </TableRow>
            </RowTemplate>
          </TableBody>
        </Table>
      </InnerScrollContainer>
    </section>

    <section id="nested-column-headers" class="example-section">
      <Title Size="TitleSizes.Large">Nested column headers</Title>
      <InnerScrollContainer>
        <Table
          AriaLabel="Nested column headers table"
          GridBreakPoint="TableGridBreakPoint.None"
          NestedHeaderColumnSpans="NestedColumnsState.ColSpans"
          style="width: 1000px"
        >
          <TableHeader HasNestedHeader>
            <TableHeaderRow Columns="@NestedColumnsState.Columns" Context="column">
              <ColumnTemplate>
                <TableHeaderCell
                  HasRightBorder="@column.HasRightBorder"
                  Sort="@column.Sort"
                  OnSort="@NestedColumnsState.OnSort"
                  Modifier="@column.WrapModifier"
                  colspan="@column.ColSpan"
                  rowspan="@column.RowSpan"
                >
                  @column.Name
                </TableHeaderCell>
              </ColumnTemplate>
            </TableHeaderRow>
            <TableHeaderRow Columns="@NestedColumnsState.Columns" Context="column">
              <ColumnTemplate>
                @if (column.SubColumns != null)
                {
                  @foreach (var subcolumn in column.SubColumns)
                  {
                    <TableHeaderCell
                      HasRightBorder="@subcolumn.HasRightBorder"
                      Sort="@subcolumn.Sort"
                      OnSort="@NestedColumnsState.OnSort"
                      Modifier="@subcolumn.WrapModifier"
                      IsSubHeader
                    >
                      @subcolumn.Name
                    </TableHeaderCell>
                  }
                }
              </ColumnTemplate>
            </TableHeaderRow>
          </TableHeader>
          <TableBody Rows="@NestedColumnsState.Range" Context="item">
            <RowTemplate>
              <TableRow>
                <TableCell>
                  @item.PodSource
                </TableCell>
                <TableCell>
                  @item.PodDestination
                </TableCell>
                <TableCell>
                  <div>
                    <span>@item.PodDate</span>
                    <span class="pf-u-color-200">@item.PodTime</span>
                  </div>
                </TableCell>
                <TableCell>
                  <Stack>
                    <StackItem>
                      <span>@item.PortSourceNumber</span>
                    </StackItem>
                    <StackItem>
                      <span class="pf-u-color-200">@item.PortSourceScheme</span>
                    </StackItem>
                  </Stack>
                </TableCell>
                <TableCell>
                  <Stack>
                    <StackItem>
                      <span>@item.PortDestinationNumber</span>
                    </StackItem>
                    <StackItem>
                      <span class="pf-u-color-200">(@item.PortDestinationScheme)</span>
                    </StackItem>
                  </Stack>
                </TableCell>
                <TableCell>@item.Protocol</TableCell>
                <TableCell>@item.FlowRate</TableCell>
                <TableCell>@item.Traffic</TableCell>
                <TableCell>@item.Packets</TableCell>
              </TableRow>
            </RowTemplate>
          </TableBody>
        </Table>
      </InnerScrollContainer>
    </section>
  </FlexItem>
</Flex>

@code {



  private Selectable SelectableState { get; } = new();
  public class Selectable
  {
    public static SelectType AllRowsSelector { get; } = new();

    public Column[] Columns =
    {
      new() { Select = AllRowsSelector },
      new() { Name   = "Repositories" },
      new() { Name   = "Branches" },
      new() { Name   = "Pull requests" },
      new() { Name   = "Workspaces" },
      new() { Name   = "Last commit" },
    };
    public Repository[] Rows { get; } =
    {
      new ("one", "two", "a", "four", "five", new SelectType { RowIndex = 0, Disable = false  }),
      new ("a"  , "two", "k", "four", "five", new SelectType { RowIndex = 1, Disable = true }),
      new ("a"  , "two", "k", "four", "five", new SelectType { RowIndex = 2, Disable = false }),
      new ("a"  , "two", "k", "four", "five", new SelectType { RowIndex = 3, Disable = false }),
      new ("a"  , "two", "k", "four", "five", new SelectType { RowIndex = 4, Disable = false }),
      new ("p"  , "two", "b", "four", "five", new SelectType { RowIndex = 5, Disable = false })
    };

    public void OnSelectAllRows(SelectEventArgs args)
    {
      AllRowsSelector.IsSelected = args.IsSelected;

      foreach (var row in Rows.Where(r => !r.Selection.Disable))
      {
        row.Selection.IsSelected = args.IsSelected;
      }
    }

    public void OnSelectRow(SelectEventArgs args)
    {
      Rows[args.RowIndex].Selection.IsSelected = args.IsSelected;
    }
  }

  private Expandable ExpandableState { get; } = new ();
  public class Expandable
  {
    public bool IsCompact { get; set; } = true;

    public TableVariant? Variant { get => IsCompact ? TableVariant.Compact : null; }

    public string[] Columns { get; } = { "", "Repositories",  "Branches",  "Pull requests",  "Workspaces",  "Last commit" };

    public ExpandableModel[] Rows { get; } =
    {
      new() { Parent = new Repository("one", "two", "a", "four", "five"), Child = null },
      new() {
        Parent = new Repository("parent 1", "two", "k", "four", "five"),
        Child  = new Values("single cell"),
        Expand = new ExpandType
        {
          RowIndex   = 1,
          IsExpanded = true
        }
      },
      new() {
        Parent = new Repository("parent 2", "two", "b", "four", "five"),
        Child  = new Values("single cell - fullWidth"),
        Expand = new ExpandType
        {
          RowIndex   = 2,
          FullWidth  = true,
          IsExpanded = true
        }
      },
      new() {
        Parent = new Repository("parent 3", "2", "b", "four", "five"),
        Child  = new Values("single cell - noPadding"),
        Expand = new ExpandType
        {
          RowIndex   = 3,
          NoPadding  = true,
          IsExpanded = true
        }
      },
      new() {
        Parent = new Repository("parent 4", "2", "b", "four", "five"),
        Child  = new Values("single cell - fullWidth & noPadding"),
        Expand = new ExpandType
        {
          RowIndex   = 4,
          FullWidth  = true,
          NoPadding  = true,
          IsExpanded = true
        }
      },
      new() {
        Parent = new Repository("parent 5", "2", "b", "four", "five"),
        Child  = new Values("spans 'Repositories' and 'Branches'", "spans 'Pull requests' and 'Workspaces', and 'Last commit'"),
        Expand = new ExpandType
        {
          RowIndex   = 5,
          IsExpanded = true
        }
      },
      new() {
        Parent = new Repository("parent 6", "2", "b", "four", "five"),
        Child  = new Values(
          "fullWidth, spans the collapsible column and 'Repositories'",
          "fullWidth, spans 'Branches' and 'Pull requests'",
          "fullWidth, spans 'Workspaces' and 'Last commit'"
        ),
        Expand = new ExpandType
        {
          RowIndex   = 6,
          FullWidth  = true,
          IsExpanded = true
        }
      }
    };

    public void OnToggle(CollapseEventArgs args)
    {
      Rows[args.RowIndex].Expand.IsExpanded = args.IsOpen;
    }
  }

  public class ExpandableModel
  {
    public Repository Parent     { get; set; }
    public Values     Child      { get; set; }
    public ExpandType Expand     { get; set; }
    public bool       IsExpanded { get => Expand is not null && Expand.IsExpanded; }
  }

  public class StickyModel
  {
    public string Value1 { get; }
    public string Value2 { get; }
    public string Value3 { get; }
    public string Value4 { get; }
    public string Value5 { get; }
    public string Value6 { get; }
    public string Value7 { get; }
    public string Value8 { get; }
    public string Value9 { get; }

    public StickyModel(
      string value1,
      string value2 = null,
      string value3 = null,
      string value4 = null,
      string value5 = null,
      string value6 = null,
      string value7 = null,
      string value8 = null,
      string value9 = null)
    {
      Value1 = value1;
      Value2 = value2;
      Value3 = value3;
      Value4 = value4;
      Value5 = value5;
      Value5 = value6;
      Value5 = value7;
      Value5 = value8;
      Value5 = value9;
    }
  }

  private Sticky StickyState { get; } = new ();
  public class Sticky
  {
    private static SortBy SortBy { get; } = new ();

    public Column[] Columns { get; } =
    {
      new Column { Name = "Fact"    , Sort = new SortType { ColumnIndex = 0, SortBy = SortBy }, IsSticky = true, HasRightBorder = true },
      new Column { Name = "State"   , Sort = new SortType { ColumnIndex = 0, SortBy = SortBy } },
      new Column { Name = "Header 3", WrapModifier = WrapModifier.Truncate, },
      new Column { Name = "Header 4", WrapModifier = WrapModifier.Truncate, },
      new Column { Name = "Header 5", WrapModifier = WrapModifier.Truncate, },
      new Column { Name = "Header 6", WrapModifier = WrapModifier.Truncate, },
      new Column { Name = "Header 7", WrapModifier = WrapModifier.Truncate, },
      new Column { Name = "Header 8", WrapModifier = WrapModifier.Truncate, },
      new Column { Name = "Header 9", WrapModifier = WrapModifier.Truncate, },
    };

    public StickyModel[] Rows { get; init; }

    public IEnumerable<StickyModel> Range { get; set; }

    public Sticky()
    {
      Rows = new StickyModel[]
      {
        new ("Fact 1", "State 1", "Test cell 1-3", "Test cell 1-4", "Test cell 1-5", "Test cell 1-6", "Test cell 1-7", "Test cell 1-8", "Test cell 1-9"),
        new ("Fact 2", "State 2", "Test cell 2-3", "Test cell 2-4", "Test cell 2-5", "Test cell 2-6", "Test cell 2-7", "Test cell 2-8", "Test cell 2-9"),
        new ("Fact 3", "State 3", "Test cell 3-3", "Test cell 3-4", "Test cell 3-5", "Test cell 3-6", "Test cell 3-7", "Test cell 3-8", "Test cell 3-9"),
        new ("Fact 4", "State 4", "Test cell 4-3", "Test cell 4-4", "Test cell 4-5", "Test cell 4-6", "Test cell 4-7", "Test cell 4-8", "Test cell 4-9"),
        new ("Fact 5", "State 5", "Test cell 5-3", "Test cell 5-4", "Test cell 5-5", "Test cell 5-6", "Test cell 5-7", "Test cell 5-8", "Test cell 5-9"),
        new ("Fact 6", "State 6", "Test cell 6-3", "Test cell 6-4", "Test cell 6-5", "Test cell 6-6", "Test cell 6-7", "Test cell 6-8", "Test cell 6-9"),
        new ("Fact 7", "State 7", "Test cell 7-3", "Test cell 7-4", "Test cell 7-5", "Test cell 7-6", "Test cell 7-7", "Test cell 7-8", "Test cell 7-9"),
        new ("Fact 8", "State 8", "Test cell 8-3", "Test cell 8-4", "Test cell 8-5", "Test cell 8-6", "Test cell 8-7", "Test cell 8-8", "Test cell 8-9"),
        new ("Fact 9", "State 9", "Test cell 9-3", "Test cell 9-4", "Test cell 9-5", "Test cell 9-6", "Test cell 9-7", "Test cell 9-8", "Test cell 9-9")
      };

      Range = Rows;
    }

    public void OnSort(SortEventArgs args)
    {
      var q = Rows.AsQueryable();

      if (args.ColumnIndex == 0)
      {
        if (args.SortByDirection == SortByDirection.Asc)
        {
          q = q.OrderBy(x => x.Value1);
        }
        else
        {
          q = q.OrderByDescending(x => x.Value1);
        }
      }
      else if (args.ColumnIndex == 1)
      {
        if (args.SortByDirection == SortByDirection.Asc)
        {
          q = q.OrderBy(x => x.Value2);
        }
        else
        {
          q = q.OrderByDescending(x => x.Value2);
        }
      }

      Range            = q.AsEnumerable();
      SortBy.Index     = args.ColumnIndex;
      SortBy.Direction = args.SortByDirection;
    }
  }

  public class NestedColumnsModel
  {
    public string PodSource              { get; set; }
    public string PodDestination         { get; set; }
    public string PodDate                { get; set; }
    public string PodTime                { get; set; }
    public string PortSourceNumber       { get; set; }
    public string PortSourceScheme       { get; set; }
    public string PortDestinationNumber  { get; set; }
    public string PortDestinationScheme  { get; set; }
    public string Protocol               { get; set; }
    public string FlowRate               { get; set; }
    public string Traffic                { get; set; }
    public string Packets                { get; set; }
  }

  private NestedColumns NestedColumnsState { get; } = new ();
  public class NestedColumns
  {
    private static SortBy SortBy { get; } = new ();

    public int[] ColSpans { get; set; } = new [] { 3, 2, 1, 1, 1, 1 };

    public Column[] Columns { get; } =
    {
      new Column {
        Name           = "Pods",
        ColSpan        = 3,
        HasRightBorder = true,
        SubColumns     = new Column[]
        {
          new Column { Name = "Source"     , Sort = new SortType { ColumnIndex = 0, SortBy = SortBy } },
          new Column { Name = "Destination", Sort = new SortType { ColumnIndex = 1, SortBy = SortBy } },
          new Column { Name = "Date & Time", HasRightBorder = true, Sort = new SortType { ColumnIndex = 2, SortBy = SortBy }, WrapModifier = WrapModifier.FitContent }
        }
      },
      new Column {
        Name           = "Ports",
        ColSpan        = 2,
        HasRightBorder = true,
        SubColumns     = new Column []
        {
          new Column { Name = "Source"    , Sort = new SortType { ColumnIndex = 3, SortBy = SortBy }, WrapModifier = WrapModifier.FitContent },
          new Column { Name = "Desination", HasRightBorder = true, Sort = new SortType { ColumnIndex = 4, SortBy = SortBy }, WrapModifier = WrapModifier.FitContent }
        }
      },
      new Column
      {
        Name           = "Protocol",
        HasRightBorder = true,
        RowSpan        = 2,
        Index          = 5,
        Sort           = new SortType { ColumnIndex = 5, SortBy = SortBy },
        WrapModifier   = WrapModifier.FitContent
      },
      new Column
      {
        Name           = "Flow rate",
        HasRightBorder = true,
        RowSpan        = 2,
        Index          = 6,
        Sort           = new SortType { ColumnIndex = 6, SortBy = SortBy },
        WrapModifier   = WrapModifier.FitContent
      },
      new Column
      {
        Name           = "Traffic",
        HasRightBorder = true,
        RowSpan        = 2,
        Index          = 7,
        Sort           = new SortType { ColumnIndex = 7, SortBy = SortBy },
        WrapModifier   = WrapModifier.FitContent
      },
      new Column
      {
        Name           = "Packets",
        RowSpan        = 2,
        Index          = 8,
        Sort           = new SortType { ColumnIndex = 8, SortBy = SortBy },
        WrapModifier   = WrapModifier.FitContent
      }
    };

    public NestedColumnsModel[] Rows { get; init; }

    public IEnumerable<NestedColumnsModel> Range { get; set; }

    public NestedColumns()
    {
      Rows = new NestedColumnsModel[]
      {
        new NestedColumnsModel
        {
          PodSource              = "api-pod-source-name",
          PodDestination         = "api-pod-destination-name",
          PodDate                = "June 22, 2021",
          PodTime                = "3:58:24 PM",
          PortSourceNumber       = "443",
          PortSourceScheme       = "HTTPS",
          PortDestinationNumber  = "24",
          PortDestinationScheme  = "SMTP",
          Protocol               = "TCP",
          FlowRate               = "1.9 Kbps",
          Traffic                = "2.1 KB",
          Packets                = "3",
        }
      };

      Range = Rows;
    }

    public void OnSort(SortEventArgs args)
    {
      var q = Rows.AsQueryable();

      if (args.ColumnIndex == 0)
      {
        if (args.SortByDirection == SortByDirection.Asc)
        {
          q = q.OrderBy(x => x.PodSource);
        }
        else
        {
          q = q.OrderByDescending(x => x.PodSource);
        }
      }
      else if (args.ColumnIndex == 1)
      {
        if (args.SortByDirection == SortByDirection.Asc)
        {
          q = q.OrderBy(x => x.PodDestination);
        }
        else
        {
          q = q.OrderByDescending(x => x.PodDestination);
        }
      }
      else if (args.ColumnIndex == 2)
      {
        if (args.SortByDirection == SortByDirection.Asc)
        {
          q = q.OrderBy(x => x.PodDate);
        }
        else
        {
          q = q.OrderByDescending(x => x.PodDate);
        }
      }
      else if (args.ColumnIndex == 3)
      {
        if (args.SortByDirection == SortByDirection.Asc)
        {
          q = q.OrderBy(x => x.PortSourceNumber);
        }
        else
        {
          q = q.OrderByDescending(x => x.PortSourceNumber);
        }
      }
      else if (args.ColumnIndex == 4)
      {
        if (args.SortByDirection == SortByDirection.Asc)
        {
          q = q.OrderBy(x => x.PortDestinationNumber);
        }
        else
        {
          q = q.OrderByDescending(x => x.PortDestinationNumber);
        }
      }
      else if (args.ColumnIndex == 5)
      {
        if (args.SortByDirection == SortByDirection.Asc)
        {
          q = q.OrderBy(x => x.Protocol);
        }
        else
        {
          q = q.OrderByDescending(x => x.Protocol);
        }
      }
      else if (args.ColumnIndex == 6)
      {
        if (args.SortByDirection == SortByDirection.Asc)
        {
          q = q.OrderBy(x => x.FlowRate);
        }
        else
        {
          q = q.OrderByDescending(x => x.FlowRate);
        }
      }
      else if (args.ColumnIndex == 7)
      {
        if (args.SortByDirection == SortByDirection.Asc)
        {
          q = q.OrderBy(x => x.Traffic);
        }
        else
        {
          q = q.OrderByDescending(x => x.Traffic);
        }
      }
      else if (args.ColumnIndex == 8)
      {
        if (args.SortByDirection == SortByDirection.Asc)
        {
          q = q.OrderBy(x => x.Packets);
        }
        else
        {
          q = q.OrderByDescending(x => x.Packets);
        }
      }

      Range            = q.AsEnumerable();
      SortBy.Index     = args.ColumnIndex;
      SortBy.Direction = args.SortByDirection;
    }
  }
}