<InnerScrollContainer>
  <Table
    AriaLabel="Sticky column table"
    GridBreakPoint="TableGridBreakPoint.None"
    style="width: 1000px"
  >
    <TableHeader>
      <TableHeaderRow Columns="@Columns" Context="column">
        <ColumnTemplate>
          <TableHeaderCell
            IsStickyColumn="@column.IsSticky"
            HasRightBorder="@column.HasRightBorder"
            Sort="@column.Sort"
            Modifier="@column.WrapModifier"
            OnSort="@OnSort"
          >
            @column.Name
          </TableHeaderCell>
        </ColumnTemplate>
      </TableHeaderRow>
    </TableHeader>
    <TableBody Rows="@Range" Context="item">
      <RowTemplate>
        <TableRow>
          <TableCell IsStickyColumn="@Columns[0].IsSticky" HasRightBorder="@Columns[0].HasRightBorder" DataLabel="@Columns[0].Name">@item.Value1</TableCell>
          <TableCell IsStickyColumn="@Columns[1].IsSticky" HasRightBorder="@Columns[1].HasRightBorder" DataLabel="@Columns[1].Name">@item.Value2</TableCell>
          <TableCell IsStickyColumn="@Columns[2].IsSticky" HasRightBorder="@Columns[2].HasRightBorder" DataLabel="@Columns[2].Name">@item.Value3</TableCell>
          <TableCell IsStickyColumn="@Columns[3].IsSticky" HasRightBorder="@Columns[3].HasRightBorder" DataLabel="@Columns[3].Name">@item.Value4</TableCell>
          <TableCell IsStickyColumn="@Columns[4].IsSticky" HasRightBorder="@Columns[4].HasRightBorder" DataLabel="@Columns[4].Name">@item.Value5</TableCell>
          <TableCell IsStickyColumn="@Columns[5].IsSticky" HasRightBorder="@Columns[5].HasRightBorder" DataLabel="@Columns[5].Name">@item.Value6</TableCell>
          <TableCell IsStickyColumn="@Columns[6].IsSticky" HasRightBorder="@Columns[6].HasRightBorder" DataLabel="@Columns[6].Name">@item.Value7</TableCell>
          <TableCell IsStickyColumn="@Columns[7].IsSticky" HasRightBorder="@Columns[7].HasRightBorder" DataLabel="@Columns[7].Name">@item.Value8</TableCell>
          <TableCell IsStickyColumn="@Columns[8].IsSticky" HasRightBorder="@Columns[8].HasRightBorder" DataLabel="@Columns[8].Name">@item.Value9</TableCell>
        </TableRow>
      </RowTemplate>
    </TableBody>
  </Table>
</InnerScrollContainer>

@code {
  private static SortBy SortBy { get; } = new ();

  public Column[] Columns { get; } =
  {
    new Column { Name = "Fact"    , Sort = new SortType { ColumnIndex = 0, SortBy = SortBy }, IsSticky = true, HasRightBorder = true },
    new Column { Name = "State"   , Sort = new SortType { ColumnIndex = 0, SortBy = SortBy } },
    new Column { Name = "Header 3", WrapModifier = WrapModifier.Truncate, },
    new Column { Name = "Header 4", WrapModifier = WrapModifier.Truncate, },
    new Column { Name = "Header 5", WrapModifier = WrapModifier.Truncate, },
    new Column { Name = "Header 6", WrapModifier = WrapModifier.Truncate, },
    new Column { Name = "Header 7", WrapModifier = WrapModifier.Truncate, },
    new Column { Name = "Header 8", WrapModifier = WrapModifier.Truncate, },
    new Column { Name = "Header 9", WrapModifier = WrapModifier.Truncate, },
  };

  public StickyModel[]            Rows  { get; set; }
  public IEnumerable<StickyModel> Range { get; set; }

  protected override void OnInitialized()
  {
    base.OnInitialized();

    Rows = new StickyModel[]
    {
      new ("Fact 1", "State 1", "Test cell 1-3", "Test cell 1-4", "Test cell 1-5", "Test cell 1-6", "Test cell 1-7", "Test cell 1-8", "Test cell 1-9"),
      new ("Fact 2", "State 2", "Test cell 2-3", "Test cell 2-4", "Test cell 2-5", "Test cell 2-6", "Test cell 2-7", "Test cell 2-8", "Test cell 2-9"),
      new ("Fact 3", "State 3", "Test cell 3-3", "Test cell 3-4", "Test cell 3-5", "Test cell 3-6", "Test cell 3-7", "Test cell 3-8", "Test cell 3-9"),
      new ("Fact 4", "State 4", "Test cell 4-3", "Test cell 4-4", "Test cell 4-5", "Test cell 4-6", "Test cell 4-7", "Test cell 4-8", "Test cell 4-9"),
      new ("Fact 5", "State 5", "Test cell 5-3", "Test cell 5-4", "Test cell 5-5", "Test cell 5-6", "Test cell 5-7", "Test cell 5-8", "Test cell 5-9"),
      new ("Fact 6", "State 6", "Test cell 6-3", "Test cell 6-4", "Test cell 6-5", "Test cell 6-6", "Test cell 6-7", "Test cell 6-8", "Test cell 6-9"),
      new ("Fact 7", "State 7", "Test cell 7-3", "Test cell 7-4", "Test cell 7-5", "Test cell 7-6", "Test cell 7-7", "Test cell 7-8", "Test cell 7-9"),
      new ("Fact 8", "State 8", "Test cell 8-3", "Test cell 8-4", "Test cell 8-5", "Test cell 8-6", "Test cell 8-7", "Test cell 8-8", "Test cell 8-9"),
      new ("Fact 9", "State 9", "Test cell 9-3", "Test cell 9-4", "Test cell 9-5", "Test cell 9-6", "Test cell 9-7", "Test cell 9-8", "Test cell 9-9")
    };

    Range = Rows;
  }

  public void OnSort(SortEventArgs args)
  {
    var q = Rows.AsQueryable();

    q = q.OrderBy(x => x.Value1, args.SortByDirection, () => args.ColumnIndex == 0);
    q = q.OrderBy(x => x.Value2, args.SortByDirection, () => args.ColumnIndex == 1);

    Range            = q.AsEnumerable();
    SortBy.Index     = args.ColumnIndex;
    SortBy.Direction = args.SortByDirection;
  }

  public record StickyModel(
    string Value1,
    string Value2 = null,
    string Value3 = null,
    string Value4 = null,
    string Value5 = null,
    string Value6 = null,
    string Value7 = null,
    string Value8 = null,
    string Value9 = null);
}