<ToggleGroup AriaLabel="Default with single selectable">
  <ToggleGroupItem ButtonId="default" @bind-IsSelected="@DefaultTableSelected">
    <Text>Default</Text>
  </ToggleGroupItem>
  <ToggleGroupItem ButtonId="compact" @bind-IsSelected="@CompactTableSelected">
    <Text>Compact</Text>
  </ToggleGroupItem>
  <ToggleGroupItem ButtonId="compactBorderless" @bind-IsSelected="@BorderlessTableSelected">
    <Text>Compact borderless</Text>
  </ToggleGroupItem>
</ToggleGroup>

<Table
  AriaLabel="Simple Table"
  Variant="@Variant"
  Borders="@Borders"
>
  <TableCaption>Simple table using composable components</TableCaption>
  <TableHeader>
    <TableHeaderRow Columns="@Columns" Context="column">
      <ColumnTemplate>
        <TableHeaderCell>@column</TableHeaderCell>
      </ColumnTemplate>
    </TableHeaderRow>
  </TableHeader>
  <TableBody Rows="@Repositories" Context="repository">
    <RowTemplate>
      <TableRow>
        <TableCell DataLabel="@Columns[0]">@repository.Name</TableCell>
        <TableCell DataLabel="@Columns[1]">@repository.Branches</TableCell>
        <TableCell DataLabel="@Columns[2]">@repository.PullRequests</TableCell>
        <TableCell DataLabel="@Columns[3]">@repository.Workspaces</TableCell>
        <TableCell DataLabel="@Columns[4]">@repository.LastCommit</TableCell>
      </TableRow>
    </RowTemplate>
  </TableBody>
</Table>

@code {
  public string[]     Columns      { get; } = { "Repositories", "Branches", "Pull requests", "Workspaces", "Last commit" };
  public Repository[] Repositories { get; } =
  {
    new("Repository one"  , "Branch one"  , "PR one"  , "Workspace one"  , "Commit one"),
    new("Repository two"  , null          , null      , "Workspace two"  , "Commit two"),
    new("Repository three", "Branch three", "PR three", "Workspace three", "Commit three")
  };

  public TableVariant? Variant { get; set; }
  public bool          Borders { get; set; } = true;

  public bool _defaultTableSelected = true;
  public bool DefaultTableSelected
  {
    get => _defaultTableSelected;
    set
    {
      if (!EqualityComparer<bool>.Default.Equals(value, _defaultTableSelected))
      {
        _compactTableSelected    = false;
        _borderlessTableSelected = false;

        _defaultTableSelected = true;
        Variant               = null;
      }
    }
  }

  public bool _compactTableSelected;
  public bool CompactTableSelected
  {
    get => _compactTableSelected;
    set
    {
      if (!EqualityComparer<bool>.Default.Equals(value, _compactTableSelected))
      {
        _defaultTableSelected    = false;
        _borderlessTableSelected = false;

        _compactTableSelected = true;
        Variant               = _compactTableSelected ? TableVariant.Compact : null;
        Borders               = true;
      }
    }
  }

  public bool _borderlessTableSelected;
  public bool BorderlessTableSelected
  {
    get => _borderlessTableSelected;
    set
    {
      if (!EqualityComparer<bool>.Default.Equals(value, _borderlessTableSelected))
      {
        _defaultTableSelected    = false;
        _compactTableSelected    = false;
        _borderlessTableSelected = true;
        Variant                  = TableVariant.Compact;
        Borders                  = false;
      }
    }
  }
}