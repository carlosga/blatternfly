@page "/components/table"

<TextContent>
  <Title class="pf-u-mb-md">Table</Title>
  <Text class="pf-u-mb-md">
    A <strong>table</strong> is used to display large data sets that can be easily laid out in a simple grid with column headers.
  </Text>
  <Text class="pf-u-mb-md">
    See the <a target="_blank" href="https://www.patternfly.org/v4/components/table/design-guidelines">PatternFly design guidelines</a> for more details.
  </Text>
</TextContent>

<section class="example-section">
  <Title Size="TitleSizes.Large">Basic</Title>
  <ToggleGroup AriaLabel="Default with single selectable">
    <ToggleGroupItem ButtonId="default" @bind-IsSelected="@DefaultTableSelected">
      <Text>Default</Text>
    </ToggleGroupItem>
    <ToggleGroupItem ButtonId="compact" @bind-IsSelected="@CompactTableSelected">
      <Text>Compact</Text>
    </ToggleGroupItem>
    <ToggleGroupItem ButtonId="compactBorderless" @bind-IsSelected="@BorderlessTableSelected">
      <Text>Compact borderless</Text>
    </ToggleGroupItem>
  </ToggleGroup>
  <Table
    AriaLabel="Simple Table"
    Variant="@_variant"
    Borders="@_borders"
  >
    <TableCaption>Simple table using composable components</TableCaption>
    <TableHeader>
      <TableHeaderRow Columns="@BasicState.Columns" Context="column">
        <ColumnTemplate>
          <TableHeaderCell>@column</TableHeaderCell>
        </ColumnTemplate>
      </TableHeaderRow>
    </TableHeader>
    <TableBody Rows="@BasicState.Rows" Context="item">
      <RowTemplate>
        <TableRow>
          <TableCell DataLabel="@BasicState.Columns[0]">@item.Repository</TableCell>
          <TableCell DataLabel="@BasicState.Columns[1]">@item.Branch</TableCell>
          <TableCell DataLabel="@BasicState.Columns[2]">@item.PullRequest</TableCell>
          <TableCell DataLabel="@BasicState.Columns[3]">@item.Workspace</TableCell>
          <TableCell DataLabel="@BasicState.Columns[4]">@item.LastCommit</TableCell>
        </TableRow>
      </RowTemplate>
    </TableBody>
  </Table>
</section>

<section class="example-section">
  <Title Size="TitleSizes.Large">Empty state</Title>
  <Table
    AriaLabel="Simple Table"
    Variant="@_variant"
    Borders="@_borders"
  >
    <TableHeader>
      <TableHeaderRow Columns="@EmptyState.Columns" Context="column">
        <ColumnTemplate>
          <TableHeaderCell>@column</TableHeaderCell>
        </ColumnTemplate>
      </TableHeaderRow>
    </TableHeader>
    <TableBody Rows="@EmptyState.Rows" Context="item">
      <RowTemplate>
        <TableRow>
          <TableCell>@item.Repository</TableCell>
          <TableCell>@item.Branch</TableCell>
          <TableCell>@item.PullRequest</TableCell>
          <TableCell>@item.Workspace</TableCell>
          <TableCell>@item.LastCommit</TableCell>
        </TableRow>
      </RowTemplate>
      <EmptyTemplate>
        <TableRow>
          <TableCell colspan="@EmptyState.Columns.Length">
            <Bullseye>
              <EmptyState Variant="EmptyStateVariant.Small">
                <EmptyStateIcon>
                  <SearchIcon/>
                </EmptyStateIcon>
                <Title HeadingLevel="HeadingLevel.h2" Size="TitleSizes.Large">
                  No results found
                </Title>
                <EmptyStateBody>
                  No results match the filter criteria. Remove all filters or clear all filters to show results.
                </EmptyStateBody>
                <Button Variant="ButtonVariant.Link">Clear all filters</Button>
              </EmptyState>
            </Bullseye>
          </TableCell>
        </TableRow>
      </EmptyTemplate>
    </TableBody>
  </Table>
</section>

<section class="example-section">
  <Title Size="TitleSizes.Large">Sortable & wrapping headers</Title>
  <Table>
    <TableHeader>
      <TableHeaderRow Columns="@SwState.Columns" Context="column">
        <ColumnTemplate>
          <TableHeaderCell
            Sort="@column.Sort"
            Modifier="@column.WrapModifier"
            OnSort="@SwState.OnSort"
          >
            @column.Name
          </TableHeaderCell>
        </ColumnTemplate>
      </TableHeaderRow>
    </TableHeader>
    <TableBody Rows="@SwState.Range" Context="item">
      <RowTemplate>
        <TableRow>
          <TableCell DataLabel="@SwState.Columns[0].Name">@item.Value1</TableCell>
          <TableCell DataLabel="@SwState.Columns[1].Name">@item.Value2</TableCell>
          <TableCell DataLabel="@SwState.Columns[2].Name">@item.Value3</TableCell>
          <TableCell DataLabel="@SwState.Columns[3].Name">@item.Value4</TableCell>
          <TableCell DataLabel="@SwState.Columns[4].Name">@item.Value5</TableCell>
        </TableRow>
      </RowTemplate>
    </TableBody>
  </Table>
</section>

<section class="example-section">
  <Title Size="TitleSizes.Large">Selectable</Title>
  <Table AriaLabel="Selectable Table">
    <TableHeader>
      <TableHeaderRow Columns="@SelectableState.Columns" Context="column">
        <ColumnTemplate>
          <TableHeaderCell Select="@column.Select" OnSelect="@SelectableState.OnSelectAllRows">
            @column.Name
          </TableHeaderCell>          
        </ColumnTemplate>
      </TableHeaderRow>
    </TableHeader>
    <TableBody Rows="@SelectableState.Rows" Context="item">
      <RowTemplate>
        <TableRow>
          <TableCell @key="0" Select="@item.Selection" OnSelect="@SelectableState.OnSelectRow"></TableCell>
          <TableCell @key="1" DataLabel="@SelectableState.Columns[1].Name">@item.Repository</TableCell>
          <TableCell @key="2" DataLabel="@SelectableState.Columns[2].Name">@item.Branch</TableCell>
          <TableCell @key="3" DataLabel="@SelectableState.Columns[3].Name">@item.PullRequest</TableCell>
          <TableCell @key="4" DataLabel="@SelectableState.Columns[4].Name">@item.Workspace</TableCell>
          <TableCell @key="5" DataLabel="@SelectableState.Columns[5].Name">@item.LastCommit</TableCell>
        </TableRow>
      </RowTemplate>
    </TableBody>
  </Table>
</section>

@code {
  private bool _defaultTableSelected = true;
  private bool DefaultTableSelected
  {
    get => _defaultTableSelected;
    set
    {
      if (!EqualityComparer<bool>.Default.Equals(value, _defaultTableSelected))
      {
        _compactTableSelected    = false;
        _borderlessTableSelected = false;

        _defaultTableSelected = true;
        _variant              = null;
      }
    }
  }

  private bool _compactTableSelected;
  private bool CompactTableSelected
  {
    get => _compactTableSelected;
    set
    {
      if (!EqualityComparer<bool>.Default.Equals(value, _compactTableSelected))
      {
        _defaultTableSelected    = false;
        _borderlessTableSelected = false;

        _compactTableSelected = true;
        _variant              = _compactTableSelected ? TableVariant.Compact : null;
        _borders              = true;
      }
    }
  }

  private bool _borderlessTableSelected;
  private bool BorderlessTableSelected
  {
    get => _borderlessTableSelected;
    set
    {
      if (!EqualityComparer<bool>.Default.Equals(value, _borderlessTableSelected))
      {
        _defaultTableSelected    = false;
        _compactTableSelected    = false;
        _borderlessTableSelected = true;
        _variant                 = TableVariant.Compact;
        _borders                 = false;
      }
    }
  }

  private TableVariant? _variant;
  private bool          _borders = true;

  private BasicTableState BasicState { get; } = new();
  private class BasicTableState
  {
    public string[] Columns { get; } = { "Repositories",  "Branches",  "Pull requests",  "Workspaces",  "Last commit" };
    public Model[] Rows { get; } =
    {
      new("Repository one"  , "Branch one"  , "PR one"  , "Workspace one"  , "Commit one"),
      new("Repository two"  , null          , null      , "Workspace two"  , "Commit two"),
      new("Repository three", "Branch three", "PR three", "Workspace three", "Commit three")
    };
  }

  private EmptyTableState EmptyState { get; } = new();
  private class EmptyTableState
  {
    public string[] Columns { get; } = { "Repositories",  "Branches",  "Pull requests",  "Workspaces",  "Last commit" };
    public Model[] Rows { get; } = Array.Empty<Model>();
  }

  public class Model
  {
    public string Repository  { get; }
    public string Branch      { get; }
    public string PullRequest { get; }
    public string Workspace   { get; }
    public string LastCommit  { get; }
    
    public SelectType Selection { get; }

    public Model(string repository, string branch, string pullRequest, string workspace, string lastCommit, SelectType selection = null)
    {
      Repository  = repository;
      Branch      = branch;
      PullRequest = pullRequest;
      Workspace   = workspace;
      LastCommit  = lastCommit;
      Selection   = selection;
    }
  }

  public class Values
  {
    public string Value1 { get; }
    public string Value2 { get; }
    public string Value3 { get; }
    public string Value4 { get; }
    public string Value5 { get; }

    public Values(string value1, string value2, string value3, string value4, string value5)
    {
      Value1 = value1;
      Value2 = value2;
      Value3 = value3;
      Value4 = value4;
      Value5 = value5;
    }
  }
  
  public class Column
  {
    public string Name { get; set; }
    public SortType Sort { get; set; }
    public SelectType Select { get; set; }
    public WrapModifier? WrapModifier { get; set; }
  }
  
  private SortableAndWrapState SwState { get; } = new();
  private class SortableAndWrapState
  {
    public Column[] Columns { get; private set; }
    public IEnumerable<Values> Range { get; set; }

    private SortBy   SortBy { get; } = new ();
    private Values[] Rows   { get; } =
    {
      new("one", "two", "a", "four", "five"),
      new("a", "two", "k", "four", "five"),
      new("p", "two", "b", "four", "five")
    };

    public SortableAndWrapState()
    {
      InitializeColumns();
    }

    public void OnSort(SortEventArgs args)
    {
      var q = Rows.AsQueryable();

      if (args.ColumnIndex == 0)
      {
        if (args.SortByDirection == SortByDirection.Asc)
        {
          q = q.OrderBy(x => x.Value1);
        }
        else
        {
          q = q.OrderByDescending(x => x.Value1);
        }
      }
      else if (args.ColumnIndex == 2)
      {
        if (args.SortByDirection == SortByDirection.Asc)
        {
          q = q.OrderBy(x => x.Value3);
        }
        else
        {
          q = q.OrderByDescending(x => x.Value3);
        }
      }

      Range            = q.AsEnumerable();
      SortBy.Index     = args.ColumnIndex;
      SortBy.Direction = args.SortByDirection;
    }

    private void InitializeColumns()
    {
      Range   = Rows;
      Columns = new Column[]
      {
        new()
        {
          Name = "This is a really long table header that goes on for a long time 1.",
          Sort = new SortType
          {
            ColumnIndex = 0,
            SortBy      = SortBy
          }
        },
        new()
        {
          Name         = "This is a really long table header that goes on for a long time 2.",
          WrapModifier = WrapModifier.Wrap,
        },
        new()
        {
          Name         = "This is a really long table header that goes on for a long time 3.",
          WrapModifier = WrapModifier.Wrap,
          Sort         = new SortType
          {
            ColumnIndex = 2,
            SortBy      = SortBy
          }
        },
        new()
        {
          Name         = "This is a really long table header that goes on for a long time 4.",
          WrapModifier = WrapModifier.Wrap,
        },
        new()
        {
          Name         = "This is a really long table header that goes on for a long time 5.",
          WrapModifier = WrapModifier.Wrap,
        }
      };
    }
  }
  
  private Selectable SelectableState { get; } = new();
  public class Selectable
  {
    public static SelectType AllRowsSelector { get; } = new();
    
    public Column[] Columns = 
    {
      new() { Select = AllRowsSelector },
      new() { Name   = "Repositories" },
      new() { Name   = "Branches" },
      new() { Name   = "Pull requests" },
      new() { Name   = "Workspaces" },
      new() { Name   = "Last commit" },
    };    
    public Model[] Rows { get; } =
    {
      new ("one", "two", "a", "four", "five", new SelectType { RowIndex = 0, Disable = true  }),
      new ("a"  , "two", "k", "four", "five", new SelectType { RowIndex = 1, Disable = false }),
      new ("a"  , "two", "k", "four", "five", new SelectType { RowIndex = 2, Disable = false }),
      new ("a"  , "two", "k", "four", "five", new SelectType { RowIndex = 3, Disable = false }),
      new ("a"  , "two", "k", "four", "five", new SelectType { RowIndex = 4, Disable = false }),
      new ("p"  , "two", "b", "four", "five", new SelectType { RowIndex = 5, Disable = false })
    };
    
    public void OnSelectAllRows(SelectEventArgs args)
    {
      AllRowsSelector.IsSelected = args.IsSelected;
      
      foreach (var row in Rows.Where(r => !r.Selection.Disable))
      {
        row.Selection.IsSelected = args.IsSelected;
      }
    }
    
    public void OnSelectRow(SelectEventArgs args)
    {
      Rows[args.RowIndex].Selection.IsSelected = args.IsSelected;
    }
  }
}