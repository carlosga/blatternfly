@namespace Blatternfly.Components

<div @attributes="AdditionalAttributes" class="@CssClass" style="@CssStyle">
  @if (Title is not null)
  {
    <WizardHeader
      TitleId="@TitleId"
      DescriptionId="@DescriptionId"
      DescriptionComponent="@DescriptionComponent"
      OnClose="@OnClose"
      Title="@Title"
      CloseButtonAriaLabel="@CloseButtonAriaLabel"
      HideClose="@HideClose"
    >
      <Description>@Description</Description>
    </WizardHeader>
  }
  <CascadingValue Value="this" IsFixed="true">
    <WizardToggle
      MainAriaLabel="@MainAriaLabel"
      IsInPage="@IsInPage"
      MainAriaLabelledBy="@MainAriaLabelBy"
      IsNavOpen="@IsNavOpen"
      OnNavToggle="@OnNavToggle"
      Steps="@FlattenedSteps"
      ActiveStep="@ActiveStep"
      HasNoBodyPadding="@HasNoBodyPadding"
    >
      <Nav>
        <WizardNav
          IsOpen="@IsNavOpen"
          AriaLabel="@NavAriaLabel"
          AriaLabelledBy="@NavAriaLabelBy"
        >
          @ChildContent
        </WizardNav>
      </Nav>
      <ChildContent>
        @if (Footer is not null)
        {
          @Footer
        }
        else
        {
          <WizardFooterInternal
            OnNext="@OnNextHandler"
            OnBack="@OnBackHandler"
            OnClose="@OnCloseHandler"
            FirstStep="@FirstStep"
            ActiveStep="@ActiveStep"
          >
            <NextButtonText>@FooterNextButtonText</NextButtonText>
            <BackButtonText>@BackButtonText</BackButtonText>
            <CancelButtonText>@CancelButtonText</CancelButtonText>
          </WizardFooterInternal>
        }
      </ChildContent>
    </WizardToggle>
  </CascadingValue>
</div>

@code {
  /// Additional attributes that will be applied to the component.
  [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

  /// Content rendered inside the component.
  [Parameter] public RenderFragment ChildContent { get; set; }

  /// Custom width of the wizard.
  [Parameter] public int? Width { get; set; }

  /// Custom height of the wizard.
  [Parameter] public int? Height { get; set; }

  /// The wizard title to display if header is desired.
  [Parameter] public string Title { get; set; }

  /// An optional id for the title.
  [Parameter] public string TitleId { get; set; }

  /// An optional id for the description.
  [Parameter] public string DescriptionId { get; set; }

  /// The wizard description.
  [Parameter] public RenderFragment Description { get; set; }

  /// Component type of the description.
  [Parameter] public WizardDescriptionComponent DescriptionComponent { get; set; } = WizardDescriptionComponent.p;

  /// Flag indicating whether the close button should be in the header.
  [Parameter] public bool HideClose { get; set; }

  /// Callback function to close the wizard.
  [Parameter] public EventCallback<MouseEventArgs> OnClose { get; set; }

  /// Callback function when a step in the nav is clicked.
  [Parameter] public EventCallback<WizardStepChangedEventArgs> OnGoToStep { get; set; }

  /// The current step the wizard is on (1 or higher).
  [Parameter] public int StartAtStep { get; set; } = 1;

  /// Aria-label for the Nav.
  [Parameter] public string NavAriaLabel { get; set; }

  /// Sets aria-labelledby on nav element.
  [Parameter] public string NavAriaLabelledBy { get; set; }

  /// Aria-label for the main element.
  [Parameter] public string MainAriaLabel { get; set; }

  /// Sets aria-labelledby on the main element.
  [Parameter] public string MainAriaLabelledBy { get; set; }

  /// Can remove the default padding around the main body content by setting this to true.
  [Parameter] public bool HasNoBodyPadding { get; set; }

  /// (Use to control the footer) Passing in a footer component lets you control the buttons yourself.
  [Parameter] public RenderFragment Footer { get; set; }

  /// (Unused if footer is controlled) Callback function to save at the end of the wizard, if not specified uses onClose.
  [Parameter] public EventCallback OnSave { get; set; }

  /// (Unused if footer is controlled) Callback function after Next button is clicked.
  [Parameter] public EventCallback<WizardStepChangedEventArgs> OnNext { get; set; }

  /// (Unused if footer is controlled) Callback function after Back button is clicked.
  [Parameter] public EventCallback<WizardStepChangedEventArgs> OnBack { get; set; }

  /// (Unused if footer is controlled) The Next button text.
  [Parameter] public string NextButtonText { get; set; } = "Next";

  /// (Unused if footer is controlled) The Back button text.
  [Parameter] public string BackButtonText { get; set; } = "Back";

  /// (Unused if footer is controlled) The Cancel button text.
  [Parameter] public string CancelButtonText { get; set; } = "Cancel";

  /// (Unused if footer is controlled) aria-label for the close button.
  [Parameter] public string CloseButtonAriaLabel { get; set; } = "Close";

  /// Flag indicating Wizard modal is open. Wizard will be placed into a modal if this prop is provided.
  [Parameter] public bool? IsOpen { get; set; }

  /// Flag indicating nav items with sub steps are expandable.
  [Parameter] public bool IsNavExpandable { get; set; }

  [Parameter] public int  CurrentStep { get; set; }

  [Parameter] public bool IsNavOpen { get; set; }

  private string CssStyle => new StyleBuilder()
    .AddStyle("height", () => $"{Height.Value}px", Height.HasValue)
    .AddStyle("width" , () => $"{Width.Value}px" , Width.HasValue)
    .Build();

  private string CssClass => new CssBuilder("pf-c-wizard")
    .AddClass("pf-m-finished", ActiveStep is not null && ActiveStep.IsFinishedStep)
    .AddClassFromAttributes(AdditionalAttributes)
    .Build();

  internal void AddStep(WizardStep step)
  {
    FlattenedSteps.Add(step);
  }

  protected override void OnInitialized()
  {
    base.OnInitialized();

    _newId          = Interlocked.Increment(ref _currentId);
    TitleId       ??= $"pf-wizard-title-{_newId}";
    DescriptionId ??= $"pf-wizard-description-{_newId}";
    CurrentStep     = StartAtStep;
    IsNavOpen       = false;
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);

    if (firstRender)
    {
      StateHasChanged();
    }
  }

  private static int _currentId = 1;

  private int _newId;

  private List<WizardStep> FlattenedSteps { get; set; } = new(5);

  internal int  GetFlattenedStepsIndex(WizardStep step) => FlattenedSteps.IndexOf(step) + 1;
  internal bool IsCurrentStep(WizardStep step)          => HasSteps && ActiveStep.Name == step.Name;

  internal bool IsValid { get => ActiveStep is not null && ActiveStep.EnableNext.HasValue ? ActiveStep.EnableNext.Value : true; }

  private bool       IsInPage        { get => !IsOpen.HasValue; }
  private bool       HasSteps        { get => FlattenedSteps.Count > 0; }
  private int        AdjustedStep    { get => HasSteps && FlattenedSteps.Count < CurrentStep ? FlattenedSteps.Count : CurrentStep; }
  private WizardStep ActiveStep      { get => HasSteps ? FlattenedSteps[AdjustedStep - 1] : null; }
  private bool       FirstStep       { get => HasSteps && ActiveStep == FlattenedSteps[0]; }

  private string FooterNextButtonText { get => ActiveStep?.NextButtonText ?? NextButtonText; }
  private string NavAriaLabelBy
  {
    get
    {
      var cond1 = Title ?? NavAriaLabelledBy;
      var cond2 = NavAriaLabelledBy ?? TitleId;

      if (!string.IsNullOrEmpty(cond1) && !string.IsNullOrEmpty(cond2))
      {
        return cond2;
      }
      else if (!string.IsNullOrEmpty(cond1) && string.IsNullOrEmpty(cond2))
      {
        return cond1;
      }
      else if (!string.IsNullOrEmpty(cond1) && string.IsNullOrEmpty(cond2))
      {
        return cond2;
      }
      return null;
    }
  }

  private string MainAriaLabelBy
  {
    get
    {
      var cond1 = Title ?? MainAriaLabelledBy;
      var cond2 = MainAriaLabelledBy ?? TitleId;

      if (!string.IsNullOrEmpty(cond1) && !string.IsNullOrEmpty(cond2))
      {
        return cond2;
      }
      else if (!string.IsNullOrEmpty(cond1) && string.IsNullOrEmpty(cond2))
      {
        return cond1;
      }
      else if (!string.IsNullOrEmpty(cond1) && string.IsNullOrEmpty(cond2))
      {
        return cond2;
      }
      return null;
    }
  }

  internal async Task GoToStep(int step)
  {
    var maxSteps = FlattenedSteps.Count;
    if (step < 1)
    {
      step = 1;
    }
    else if (step > maxSteps)
    {
      step = maxSteps;
    }
    var args = new WizardStepChangedEventArgs
    {
      NewStepId     = FlattenedSteps[step - 1].Id,
      NewStepIndex  = FlattenedSteps[step - 1].Index,
      NewStepName   = FlattenedSteps[step - 1].Name,
      PrevStepId    = FlattenedSteps[CurrentStep - 1].Id,
      PrevStepIndex = FlattenedSteps[CurrentStep - 1].Index,
      PrevStepName  = FlattenedSteps[CurrentStep - 1].Name
    };
    CurrentStep = step;
    IsNavOpen   = false;
    await OnGoToStep.InvokeAsync(args);
  }

  private async Task OnNextHandler()
  {
    var maxSteps = FlattenedSteps.Count;
    if (CurrentStep >= maxSteps)
    {
      // Hit the save button at the end of the wizard
      await OnSave.InvokeAsync();
      await OnClose.InvokeAsync();
    }
    else
    {
      var newStep = CurrentStep;

      for (var nextStep = CurrentStep; nextStep <= maxSteps; nextStep++)
      {
        if (nextStep >= FlattenedSteps.Count)
        {
          return;
        }

        if (!FlattenedSteps[nextStep].IsDisabled)
        {
          newStep = nextStep + 1;
          break;
        }
      }
      var args = new WizardStepChangedEventArgs
      {
        NewStepId     = FlattenedSteps[newStep - 1].Id,
        NewStepIndex  = FlattenedSteps[newStep - 1].Index,
        NewStepName   = FlattenedSteps[newStep - 1].Name,
        PrevStepId    = FlattenedSteps[CurrentStep - 1].Id,
        PrevStepIndex = FlattenedSteps[CurrentStep - 1].Index,
        PrevStepName  = FlattenedSteps[CurrentStep - 1].Name
      };
      CurrentStep = newStep;
      await OnNext.InvokeAsync(args);
    }
  }

  private async Task OnBackHandler()
  {
    if (FlattenedSteps.Count < CurrentStep)
    {
      // Previous step was removed, just update the currentStep state
      CurrentStep = FlattenedSteps.Count;
    }
    else
    {
      var newStep = CurrentStep;

      for (var prevStep = CurrentStep; prevStep >= 0; prevStep--)
      {
        if ((prevStep - 2) < 0)
        {
          return;
        }

        if (!FlattenedSteps[prevStep - 2].IsDisabled)
        {
          newStep = prevStep - 1 <= 1 ? 1 : prevStep - 1;
          break;
        }
      }

      var args = new WizardStepChangedEventArgs
      {
        NewStepId     = FlattenedSteps[newStep - 1].Id,
        NewStepIndex  = FlattenedSteps[newStep - 1].Index,
        NewStepName   = FlattenedSteps[newStep - 1].Name,
        PrevStepId    = FlattenedSteps[CurrentStep - 1].Id,
        PrevStepIndex = FlattenedSteps[CurrentStep - 1].Index,
        PrevStepName  = FlattenedSteps[CurrentStep - 1].Name
      };
      CurrentStep = newStep;
      await OnBack.InvokeAsync(args);
    }
  }

  private async Task OnCloseHandler()
  {
    await OnClose.InvokeAsync();
  }

  private void OnNavToggle()
  {
    IsNavOpen = !IsNavOpen;
  }
}