@namespace Blatternfly.Components

<button
  @onclick="NavToggleHandler"
  @onclick:stopPropagation="true"
  class="@CssClass"
  aria-label="@AriaLabel"
  aria-expanded="@AriaExpanded"
>
  <span class="pf-c-wizard__toggle-list">
    <span class="pf-c-wizard__toggle-list-item">
      <span class="pf-c-wizard__toggle-num">@ActiveStepIndex</span> @ActiveStepName
      @if (!string.IsNullOrEmpty(ActiveStepSubName))
      {
        <AngleRightIcon class="pf-c-wizard__toggle-separator" aria-hidden="true" />
      }
    </span>
    @if (!string.IsNullOrEmpty(ActiveStepSubName))
    {
      <span class="pf-c-wizard__toggle-list-item">@ActiveStepSubName</span>
    }
  </span>
  <span class="pf-c-wizard__toggle-icon">
    <CaretDownIcon aria-hidden="true" />
  </span>
</button>
<div class="pf-c-wizard__outer-wrap">
  <div class="pf-c-wizard__inner-wrap">
    @Nav
    <WizardBody
      MainComponent="@MainComponent"
      AriaLabel="@MainAriaLabel"
      AriaLabelledby="@MainAriaLabelledBy"
      HasNoBodyPadding="HasNoBodyPadding"
    >
      @ActiveStep?.ChildContent
    </WizardBody>
  </div>
  @ChildContent
</div>

@code {
  /// Additional attributes that will be applied to the component.
  [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

  /// Content rendered inside the component.
  [Parameter] public RenderFragment ChildContent { get; set; }

  /// The wizard steps.
  [Parameter] public List<WizardStep> Steps { get; set; }

  /// The currently active WizardStep.
  [Parameter] public WizardStep ActiveStep { get; set; }

  /// Set to true to remove body padding.
  [Parameter] public bool HasNoBodyPadding { get; set; }

  /// If the nav is open.
  [Parameter] public bool IsNavOpen { get; set; }

  /// Callback function for when the nav is toggled.
  [Parameter] public EventCallback<bool> OnNavToggle { get; set;  }

  /// The button's aria-label.
  [Parameter] public string AriaLabel { get; set; } = "Wizard Toggle";

  /// Sets aria-labelledby on the main element.
  [Parameter] public string MainAriaLabelledBy { get; set; }

  /// The main's aria-label.
  [Parameter] public string MainAriaLabel { get; set; }

  /// If the wizard is in-page.
  [Parameter] public bool IsInPage { get; set; }

  [Parameter] public RenderFragment Nav { get; set; }

  private string CssClass => new CssBuilder("pf-c-wizard__toggle")
    .AddClass("pf-m-expanded", IsNavOpen)
    .Build();

  private string MainComponent     { get => IsInPage ? "div" : "main"; }
  private string AriaExpanded      { get => IsNavOpen ? "true" : "false"; }
  private int    ActiveStepIndex   { get; set; }
  private string ActiveStepName    { get; set; }
  private string ActiveStepSubName { get; set; }

  private async Task NavToggleHandler()
  {
    await OnNavToggle.InvokeAsync(!IsNavOpen);
  }

  protected override void OnParametersSet()
  {
    base.OnParametersSet();

    if (Steps is not null && Steps.Count > 0)
    {
      for (var i = 0; i < Steps.Count; i++)
      {
        if ((ActiveStep.Id.HasValue && Steps[i].Id == ActiveStep.Id) || Steps[i].Name == ActiveStep.Name)
        {
          ActiveStepIndex = i + 1;
          ActiveStepName  = Steps[i].Name;
          break;
        }
        // else if (Steps[i].HasSteps)
        // {
        //   foreach (var step in Steps[i].Steps)
        //   {
        //     if ((ActiveStep.Id.HasValue && step.Id == ActiveStep.Id) || step.Name == ActiveStep.Name)
        //     {
        //       ActiveStepIndex   = i + 1;
        //       ActiveStepName    = Steps[i].Name;
        //       ActiveStepSubName = step.Name;
        //       break;
        //     }
        //   }
        // }
      }
    }
  }
}