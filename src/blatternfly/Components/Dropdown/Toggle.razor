@namespace Blatternfly.Components
@using Microsoft.JSInterop
@using Blatternfly.Events
@inherits BaseComponent
@implements IDisposable
@inject IJSRuntime JS
@inject Observers.IWindowObserver _windowObserver

<button
  id="@ToggleId"
  class="@ToggleClass @ActiveClass @PlainClass @PrimaryClass @DisabledClass"
  type="@ToggleButtonType"
  aria-expanded="@AriaExpanded"
  aria-haspopup="@AriaPopup"
  disabled="@IsDisabled"
  @onclick="ToggleHandler"
  @onclick:stopPropagation="true"
  @attributes="AdditionalAttributes"
  @ref="ElementReference"
>
  @ChildContent
</button>

@code {
  [CascadingParameter] public Dropdown Parent { get; set; }
  
  /// Type to put on the button.
  [Parameter] public ButtonType? Type { get; set; }

  /// Flag to indicate if menu is opened.
  [Parameter] public bool IsOpen { get; set; }

  /// Callback called when toggle is clicked.
  [Parameter] public EventCallback<bool> OnToggle { get; set; }

  /// Callback called when the Enter key is pressed.
  [Parameter] public EventCallback OnEnter { get; set; }
  
  /// Forces active state.
  [Parameter] public bool IsActive { get; set; }

  /// Disables the dropdown toggle.
  [Parameter] public bool IsDisabled { get; set; }

  /// Display the toggle with no border or background.
  [Parameter] public bool? IsPlain { get; set; }

  /// Display the toggle with a primary button style.
  [Parameter] public bool IsPrimary { get; set; }

  /// Style the toggle as a child of a split button.
  [Parameter] public bool IsSplitButton { get; set; }
  
  /// Flag for aria popup.
  [Parameter] public AriaPopupVariant? AriaHasPopup { get; set; }
  
  /// Allows selecting toggle to select parent.
  [Parameter] public bool BubbleEvent { get; set; }  
  
  private ElementReference ElementReference { get; set; }
  
  private string _id = Utils.GetUniqueId("pf-toggle-id-");
   
  internal string ToggleId     { get => string.IsNullOrEmpty(InternalId) ? _id : InternalId; }
  
  private string ToggleClass   { get => IsSplitButton ? "pf-c-dropdown__toggle-button" : "pf-c-dropdown__toggle"; }
  private string ActiveClass   { get => IsActive ? "pf-m-active" : null; }
  private string PrimaryClass  { get => IsPrimary ? "pf-m-primary" : null; }
  private string DisabledClass { get => IsDisabled ? "pf-m-disabled" : null; }
  private string PlainClass
  {
    get
    {
      if (IsPlain.HasValue)
      {
        return IsPlain.Value ? "pf-m-plain" : null;
      }
      return Parent is not null && Parent.IsPlain ? "pf-m-plain" : null;
    } 
  }

  private string AriaExpanded { get => IsOpen ? "true" : "false"; }
  private string AriaPopup
  {
    get => AriaHasPopup switch
    {
      AriaPopupVariant.Menu    => "menu",
      AriaPopupVariant.Listbox => "listbox",
      AriaPopupVariant.Tree    => "tree",
      AriaPopupVariant.Grid    => "grid",
      AriaPopupVariant.Dialog  => "dialog",
      _                        => Parent?.AriaHasPopup ?? null
    };
  }
  private string ToggleButtonType
  {
    get => Type switch
    {
      ButtonType.Button => "button",
      ButtonType.Submit => "submit",
      ButtonType.Reset  => "reset",
      _                 => "button"
    };
  }
  
  private IDisposable _windowClickSubscription;
  public void Dispose()
  {
    _windowClickSubscription?.Dispose();
  }  

  [JSInvokable]
  public async Task KeydownOnToggle()
  {
    await ToggleHandler();
    StateHasChanged();
  }
  
  [JSInvokable]
  public async Task KeyDownOnEnter()
  {
    IsOpen = !IsOpen;
    await OnEnter.InvokeAsync();
    StateHasChanged();
  }
  
  [JSInvokable]
  public Task<ToggleState> KeydownState()
  {
    return Task.FromResult(new ToggleState(IsOpen, BubbleEvent));
  }

  internal async Task CloseAsync()
  {
    IsOpen = false;
    await OnToggle.InvokeAsync(IsOpen);
  }

  internal async Task FocusAsync()
  {
    await ElementReference.FocusAsync();
  }

  protected override void OnInitialized()
  {
    base.OnInitialized();
    
    Parent?.RegisterToggle(this);
    
    _windowClickSubscription = _windowObserver.OnClick.Subscribe(async e => await OnWindowClick(e));    
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);

    if (firstRender)
    {
      var dotNetObjRef = DotNetObjectReference.Create(this);
      await JS.InvokeVoidAsync("Blatternfly.Dropdown.onKeyDown", dotNetObjRef, ToggleId);
    }
  }
  
  private async Task OnWindowClick(MouseEvent e)
  {
    var clickedOnToggle   = e.ComposedPath?.Any(x => x == ToggleId);
    var clickedWithinMenu = e.ComposedPath?.Any(x => x == Parent?.DropdownMenu?.MenuId);
    if (IsOpen && !(clickedOnToggle.GetValueOrDefault() || clickedWithinMenu.GetValueOrDefault()))    
    {
      await CloseAsync();
      StateHasChanged();
    }
  }
  
  private async Task ToggleHandler()
  {
    IsOpen = !IsOpen;
    await OnToggle.InvokeAsync(IsOpen);
  }  
}