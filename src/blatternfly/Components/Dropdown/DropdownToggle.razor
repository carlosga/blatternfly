@namespace Blatternfly.Components
@inherits BaseComponent

<Toggle
  IsOpen="@IsOpen"
  IsActive="@IsActive"
  IsDisabled="@IsDisabled"
  IsPlain="@IsPlain"
  IsPrimary="@IsPrimary"
  AriaHasPopup="@AriaHasPopup"
  Type="@Type"
  OnToggle="@ToggleHandler"
  OnEnter="@OnEnterHandler"
  aria-label="@AriaLabel"
  @attributes="AdditionalAttributes"
>
  @if (Icon is not null)
  {
    <span class="pf-c-dropdown__toggle-icon">@Icon</span>
  }
  <span class="pf-c-dropdown__toggle-text">@ChildContent</span>
  <span class="@IconClassName">
    @if (ToggleIndicator is not null)
    {
        @ToggleIndicator
    }
    else
    {
      <CaretDownIcon />
    }
  </span>
</Toggle>

@code {
  [CascadingParameter] public Dropdown Parent { get; set; }
  
  /// Flag to indicate if menu is opened.
  [Parameter] public bool IsOpen { get; set; }

  /// Callback called when toggle is clicked.
  [Parameter] public EventCallback<bool> OnToggle { get; set; }
  
  /// Callback called when the Enter key is pressed.
  [Parameter] public EventCallback OnEnter { get; set; }
  
  /// Forces active state.
  [Parameter] public bool IsActive { get; set; }

  /// Display the toggle with no border or background.
  [Parameter] public bool? IsPlain { get; set; }

  /// Whether or not the dropdown toggle has a disabled state.
  [Parameter] public bool IsDisabled { get; set; }

  /// Whether or not the dropdown toggle button should have primary button styling.
  [Parameter] public bool IsPrimary { get; set; }

  /// An image to display within the dropdown toggle, appearing before any component children.
  [Parameter] public RenderFragment Icon { get; set; }
  
  /// The icon to display for the toggle. Defaults to CaretDownIcon. Set to null to not show an icon.
  [Parameter] public RenderFragment ToggleIndicator { get; set; }
  
  /// Accessible label for the dropdown toggle button.
  [Parameter] public string AriaLabel { get; set; }

  /// Accessibility property to indicate correct has popup.
  [Parameter] public AriaPopupVariant? AriaHasPopup { get; set; }

  /// Type to put on the button.
  [Parameter] public ButtonType? Type { get; set; }
  
  private string IconClassName { get => "pf-c-dropdown__toggle-icon"; }

  private async Task ToggleHandler(bool isOpen)
  {
    IsOpen = isOpen;
    Parent.OnToggle(isOpen);
    await OnToggle.InvokeAsync(IsOpen);
    StateHasChanged();
  }
  
  private async Task OnEnterHandler()
  {
    IsOpen = !IsOpen;
    Parent.OnEnter();
    await OnEnter.InvokeAsync();
    await OnToggle.InvokeAsync(IsOpen);
    StateHasChanged();
  }
}