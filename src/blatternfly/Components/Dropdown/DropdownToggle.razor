@namespace Blatternfly.Components

<Toggle
  IsOpen="@IsOpen"
  IsActive="@IsActive"
  IsDisabled="@IsDisabled"
  IsPlain="@IsPlainValue"
  IsText="@IsTextValue"
  ToggleVariant="@ToggleVariant"
  AriaHasPopup="@AriaHasPopup"
  Type="@Type"
  OnToggle="@ToggleHandler"
  OnEnter="@OnEnterHandler"
  aria-label="@AriaLabel"
  @attributes="AdditionalAttributes"
  ToggleClass="@ToggleClass"
>
  @if (Icon is not null)
  {
    <span class="@ToggleIconCssClass">@Icon</span>
  }
  @if (ChildContent is not null)
  {
    <span class="@ToggleTextCssClass">@ChildContent</span>
  }
  @if (ToggleIndicator is not null)
  {
  <span class="@ToggleIndicatorCssClass">
    @ToggleIndicator
  </span>
  }
</Toggle>

@code {
  /// Additional attributes that will be applied to the component.
  [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

  /// Content rendered inside the component.
  [Parameter] public RenderFragment ChildContent { get; set; }

  /// Parent Dropdown component.
  [CascadingParameter] public Dropdown Parent { get; set; }

  /// Flag to indicate if menu is opened.
  [Parameter] public bool IsOpen { get; set; }

  /// Callback called when toggle is clicked.
  [Parameter] public EventCallback<bool> OnToggle { get; set; }

  /// Callback called when the Enter key is pressed.
  [Parameter] public EventCallback OnEnter { get; set; }

  /// Forces active state.
  [Parameter] public bool IsActive { get; set; }

  /// Display the toggle with no border or background.
  [Parameter] public bool? IsPlain { get; set; }

  /// Display the toggle in text only mode.
  [Parameter] public bool? IsText { get; set; }

  /// Whether or not the dropdown toggle has a disabled state.
  [Parameter] public bool IsDisabled { get; set; }

  /// Alternate styles for the dropdown toggle button.
  [Parameter] public ToggleVariant ToggleVariant { get; set; } = ToggleVariant.Default;

  /// An image to display within the dropdown toggle, appearing before any component children.
  [Parameter] public RenderFragment Icon { get; set; }

  /// The icon to display for the toggle. Defaults to CaretDownIcon. Set to null to not show an icon.
  [Parameter] public RenderFragment ToggleIndicator { get; set; } = __builder => {
    <CaretDownIcon />
  };

  /// Accessible label for the dropdown toggle button.
  [Parameter] public string AriaLabel { get; set; }

  /// Accessibility property to indicate correct has popup.
  [Parameter] public AriaPopupVariant? AriaHasPopup { get; set; }

  /// Type to put on the button.
  [Parameter] public ButtonType? Type { get; set; }

  [Parameter] public string ToggleIndicatorClass { get; set; }
  [Parameter] public string ToggleIconClass      { get; set; }
  [Parameter] public string ToggleTextClass      { get; set; }
  [Parameter] public string ToggleClass          { get; set; }

  private bool? IsPlainValue
  {
    get => IsPlain.HasValue ? IsPlain.Value : Parent?.IsPlain;
  }

  private bool? IsTextValue
  {
    get => IsText.HasValue ? IsText.Value : Parent?.IsText;
  }

  private string ToggleIconCssClass
  {
    get => string.IsNullOrEmpty(ToggleIconClass) ? "pf-c-dropdown__toggle-icon" : ToggleIconClass;
  }
  private string ToggleTextCssClass
  {
    get => string.IsNullOrEmpty(ToggleTextClass) ? "pf-c-dropdown__toggle-text" : ToggleTextClass;
  }
  private string ToggleIndicatorCssClass
  {
    get => string.IsNullOrEmpty(ToggleIndicatorClass) ? "pf-c-dropdown__toggle-icon" : ToggleIndicatorClass;
  }

  private async Task ToggleHandler(bool isOpen)
  {
    IsOpen = isOpen;
    await OnToggle.InvokeAsync(isOpen);
    Parent.OnToggle(isOpen);
    StateHasChanged();
  }

  private async Task OnEnterHandler()
  {
    IsOpen = !IsOpen;
    Parent.OnEnter();
    await OnEnter.InvokeAsync();
    await OnToggle.InvokeAsync(IsOpen);
    StateHasChanged();
  }
}