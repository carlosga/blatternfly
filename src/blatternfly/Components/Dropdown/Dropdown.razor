@namespace Blatternfly.Components
@inherits BaseComponent
@implements IDisposable
@inject WindowObserver WindowObserver

<CascadingValue Value="this">
  <div
    class="pf-c-dropdown
    @DirectionClass
    @PositionClass
    @ExpandedClass"
    @attributes="AdditionalAttributes"
  >
    @Toggle
    @if (IsOpen)
    {
      <DropdownMenu
        IsOpen="@IsOpen"
        Position="@Position"
        IsGrouped="@IsGrouped"
        AutoFocus="@AutoFocusEnabled"
        OpenedOnEnter="@OpenedOnEnter"
        aria-labelledby="@AriaLabelledBy"
      >
        @DropdownItems
      </DropdownMenu>
    }
  </div>
</CascadingValue>

@code {
  [Parameter] public RenderFragment Toggle { get; set; }

  /// Array of DropdownItem nodes that will be rendered in the dropdown Menu list.
  [Parameter] public RenderFragment DropdownItems { get; set; }

  /// Flag to indicate if menu is opened.
  [Parameter] public bool IsOpen { get;  set; }

  /// Display the toggle with no border or background.
  [Parameter] public bool IsPlain { get; set; }

  /// Indicates where menu will be aligned horizontally.
  [Parameter] public DropdownPosition Position { get; set; } = DropdownPosition.Left;

  /// Indicates how the menu will align at screen size breakpoints. Default alignment is set via the position property.
  [Parameter] public Alignment Alignments { get; set; }

  /// Display menu above or below dropdown toggle.
  [Parameter] public DropdownDirection Direction { get; set; } = DropdownDirection.Down;

  /// Flag to indicate if dropdown has groups.
  [Parameter] public bool IsGrouped { get; set; }

  /// Flag to indicate if the first dropdown item should gain initial focus, set false when adding
  /// a specific auto-focus item (like a current selection) otherwise leave as true
  [Parameter] public bool AutoFocus { get; set; } = true;

  /// Function callback called when user selects item.
  [Parameter] public EventCallback<DropdownItem> OnSelect { get; set; }

  [Parameter] public bool OpenedOnEnter { get; set; }
  [Parameter] public string MenuClass { get; set; }
  [Parameter] public string ItemClass { get; set; }

  private string ExpandedClass  { get => IsOpen ? "pf-m-expanded" : null; }
  private string DirectionClass { get => Direction == DropdownDirection.Up ? "pf-m-top" : null; }
  private string PositionClass  { get => Position == DropdownPosition.Right ? "pf-m-align-right" : null; }

  private string AriaLabelledBy   { get => _toggle?.ToggleId; }
  private bool   AutoFocusEnabled { get => OpenedOnEnter && AutoFocus; }

  private Toggle _toggle;
  private IDisposable _subscription;

  public void Dispose()
  {
    _subscription?.Dispose();
  }

  internal void RegisterToggle(Toggle toggle)
  {
    _toggle = toggle;
  }

  internal void OnToggle(bool isOpen)
  {
    OpenedOnEnter = false;
    IsOpen        = isOpen;
    StateHasChanged();
  }

  internal void OnEnter()
  {
    OpenedOnEnter = !OpenedOnEnter;
    IsOpen        = !IsOpen;
    StateHasChanged();
  }

  internal async Task Select(DropdownItem item)
  {
    await OnSelect.InvokeAsync(item);

    if (_toggle is not null)
    {
      await _toggle.Close();
    }
  }

  protected override void OnParametersSet()
  {
    base.OnParametersSet();
    
    _subscription = WindowObserver.OnKeydown.Subscribe(async x => await OnWindowKeydown(x));
  }

  private async Task OnWindowKeydown(KeyboardEventArgs args)
  {
    if (args.Key == Keys.Escape)
    {
      await _toggle.Close();
    }
  }
}