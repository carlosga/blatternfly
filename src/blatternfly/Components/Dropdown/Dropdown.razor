@namespace Blatternfly.Components

<CascadingValue Value="this" IsFixed="true">
  <div
    class="@CssClass"
    @onkeydown="OnEscPress"
    @onkeydown:stopPropagation="true"
    @attributes="AdditionalAttributes"
  >
    @Toggle
    @if (IsOpen)
    {
      <DropdownMenu
        id="@DropdownMenuId"
        IsOpen="@IsOpen"
        Position="@Position"
        Alignments="@Alignments"
        IsGrouped="@IsGrouped"
        AutoFocus="@AutoFocusEnabled"
        OpenedOnEnter="@OpenedOnEnter"
        aria-labelledby="@AriaLabelledBy"
        style="@DropdownMenuStyle"
        @ref="DropdownMenu"
      >
        @DropdownItems
      </DropdownMenu>
    }
  </div>
</CascadingValue>

@code {
  /// Additional attributes that will be applied to the component.
  [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

  /// Array of DropdownItem nodes that will be rendered in the dropdown Menu list.
  [Parameter] public RenderFragment DropdownItems { get; set; }

  /// Flag to indicate if menu is opened.
  [Parameter] public bool IsOpen { get;  set; }

  /// Display the toggle with no border or background.
  [Parameter] public bool IsPlain { get; set; }

  /// Display the toggle in text only mode.
  [Parameter] public bool IsText { get; set; }

  /// Flag indicating that the dropdown should expand to full height.
  [Parameter] public bool IsFullHeight { get; set; }

  /// Indicates where menu will be aligned horizontally.
  [Parameter] public DropdownPosition Position { get; set; } = DropdownPosition.Left;

  /// Indicates how the menu will align at screen size breakpoints. Default alignment is set via the position property.
  [Parameter] public AlignmentModifiers Alignments { get; set; }

  /// Display menu above or below dropdown toggle.
  [Parameter] public DropdownDirection Direction { get; set; } = DropdownDirection.Down;

  /// Flag to indicate if dropdown has groups.
  [Parameter] public bool IsGrouped { get; set; }

  /// Toggle for the dropdown, examples: <DropdownToggle> or <DropdownToggleCheckbox>
  [Parameter] public RenderFragment Toggle { get; set; }

  /// Flag to indicate if the first dropdown item should gain initial focus, set false when adding
  /// a specific auto-focus item (like a current selection) otherwise leave as true
  [Parameter] public bool AutoFocus { get; set; } = true;

  /// Function callback called when user selects item.
  [Parameter] public EventCallback<DropdownItem> OnSelect { get; set; }

  /// Flag for indicating that the dropdown menu should automatically flip vertically when
  /// it reaches the boundary. This prop can only be used when the dropdown component is not
  /// appended inline.
  [Parameter] public bool IsFlipEnabled { get; set; }

  [Parameter] public bool   OpenedOnEnter { get; set; }
  [Parameter] public string BaseClass     { get; set; }
  [Parameter] public string MenuClass     { get; set; }
  [Parameter] public string ItemClass     { get; set; }

  internal string AriaHasPopup { get => DropdownItems is not null ? "true" : null; }
  internal DropdownMenu DropdownMenu { get; private set; }

  private string CssClass => new CssBuilder(DropDownClass)
    .AddClass("pf-m-expanded"   , IsOpen)
    .AddClass("pf-m-top"        , Direction is DropdownDirection.Up)
    .AddClass("pf-m-align-right", Position  is DropdownPosition.Right)
    .AddClass("pf-m-full-height", IsFullHeight)
    .AddClassFromAttributes(AdditionalAttributes)
    .Build();

  private string DropdownMenuId    { get; set; }
  private bool   AutoFocusEnabled  { get => OpenedOnEnter && AutoFocus; }
  private string DropDownClass     { get => !string.IsNullOrEmpty(BaseClass) ? BaseClass : "pf-c-dropdown"; }
  private string AriaLabelledBy    { get => _toggle?.ToggleId; }
  private string DropdownMenuStyle => new StyleBuilder()
    .AddStyle("position" , "revert"     , IsFlipEnabled)
    .AddStyle("min-width", "min-content", IsFlipEnabled)
    .Build();

  private Toggle _toggle;

  internal void RegisterToggle(Toggle toggle)
  {
    _toggle = toggle;
    DropdownMenuId = $"pf-dropdown-menu__{_toggle.ToggleId}";
    StateHasChanged();
  }

  internal void OnToggle(bool isOpen)
  {
    OpenedOnEnter = false;
    IsOpen        = isOpen;
    StateHasChanged();
  }

  internal void OnEnter()
  {
    OpenedOnEnter = !OpenedOnEnter;
    IsOpen        = !IsOpen;
    StateHasChanged();
  }

  internal async Task Select(DropdownItem item)
  {
    await OnSelect.InvokeAsync(item);
    if (_toggle is not null)
    {
      await _toggle.CloseAsync();
    }
  }

  private async Task OnEscPress(KeyboardEventArgs args)
  {
    if (IsOpen && (args.Key is Keys.Escape or Keys.Tab))
    {
      await _toggle.CloseAsync();
      await _toggle.FocusAsync();
    }
  }
}