@namespace Blatternfly.Components
@inherits BaseComponent

<Toggle
  IsOpen="@IsOpen"
  IsActive="@IsActive"
  IsDisabled="@IsDisabled"
  IsPlain="@IsPlain"
  Type="@Type"
  aria-label="@AriaLabel"
  OnToggle="@ToggleHandler"
  @attributes="AdditionalAttributes"
>
  <Badge IsRead="@IsRead">
    @ChildContent
    <span class="pf-c-dropdown__toggle-icon">
      <CaretDownIcon />
    </span>
  </Badge>
</Toggle>

@code {
  [CascadingParameter] public Dropdown Parent { get; set; }
  
  /// Flag to indicate if menu is opened.
  [Parameter] public bool IsOpen { get; set; }

  /// Label Toggle button.
  [Parameter] public string AriaLabel { get; set; } = "Actions";
  
  /// Callback called when toggle is clicked.
  [Parameter] public EventCallback<bool> OnToggle { get; set; }
  
  /// Forces active state.
  [Parameter] public bool IsActive { get; set; }

  /// Disables the dropdown toggle.
  [Parameter] public bool IsDisabled { get; set; }

  /// Display the toggle with no border or background.
  [Parameter] public bool IsPlain { get; set; }
  
  /// Type to put on the button.
  [Parameter] public ButtonType? Type { get; set; }
  
  /// Allows selecting toggle to select parent.
  [Parameter] public bool BubbleEvent { get; set; }
  
  /// Display the toggle with no border or background.
  [Parameter] public bool IsRead { get; set; } = true;
  
  private async Task ToggleHandler(bool isOpen)
  {
    IsOpen = isOpen;
    Parent?.OnToggle(isOpen);
    await OnToggle.InvokeAsync(isOpen);
    StateHasChanged();
  }
}