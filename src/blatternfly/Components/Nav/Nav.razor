@namespace Blatternfly.Components
@inherits BaseComponent

<CascadingValue Value="this" IsFixed="true">
  <nav
    @attributes="AdditionalAttributes"
    class="@CssClass"
    aria-label="@InternalAriaLabel"
  >
    @ChildContent
  </nav>
</CascadingValue>

@code {
  /// Accessibility label.
  [Parameter] public string AriaLabel { get; set; }

  /// Indicates which theme color to use.
  [Parameter] public ThemeVariant Theme { get; set; } = ThemeVariant.Dark;

  /// For horizontal navs.
  [Parameter] public NavVariant Variant { get; set; } = NavVariant.Default;

  /// Callback for updating when item selection changes.
  [Parameter] public EventCallback<NavItem> OnSelect { get; set; }

  /// Callback for when a list is expanded or collapsed.
  [Parameter] public EventCallback<NavExpandable> OnToggle { get; set; }

  private string CssClass => new CssBuilder("pf-c-nav")
    .AddClass("pf-m-light"             , Theme is ThemeVariant.Light)
    .AddClass("pf-m-scrollable"        , IsScrollable)
    .AddClass("pf-m-horizontal"        , IsHorizontal)
    .AddClass("pf-m-tertiary"          , Variant is NavVariant.Tertiary)
    .AddClass("pf-m-horizontal-subnav" , Variant is NavVariant.HorizontalSubNav)
    .AddClassFromAttributes(AdditionalAttributes)
    .Build();

  internal string ActiveGroupId { get; private set; }
  internal string ActiveItemId  { get; private set; }
  internal bool   IsHorizontal
  {
    get => Variant is NavVariant.Horizontal or NavVariant.Tertiary or NavVariant.HorizontalSubNav;
  }

  private bool   IsScrollable      { get; set; }
  private string InternalAriaLabel { get => AriaLabel ?? (Variant is NavVariant.Tertiary ? "Local" : "Global"); }

  internal async Task Select(NavItem item)
  {
    ActiveGroupId = item.GroupId;
    ActiveItemId  = item.ItemId;

    await OnSelect.InvokeAsync(item);
  }

  internal async Task Expand(NavExpandable expandable)
  {
    await OnToggle.InvokeAsync(expandable);
  }

  internal void UpdateIsScrollableState(bool isScrollable)
  {
    if (IsScrollable != isScrollable)
    {
      IsScrollable = isScrollable;
      StateHasChanged();
    }
  }
}