@namespace Blatternfly.Components
@inherits BaseComponent
@implements IDisposable
@using System.Reactive.Linq
@using Blatternfly.Interop
@inject IDomUtils DomUtils
@inject IWindowObserver WindowObserver

@if (Parent.IsHorizontal)
{
  <button 
    class="pf-c-nav__scroll-button" 
    aria-label="@AriaLeftScroll" 
    disabled="@_scrollViewAtStart"
    @onclick="ScrollLeft" 
  >
    <AngleLeftIcon />
  </button>
}
<CascadingValue Value="this" IsFixed="true">
  <ul 
    @attributes="AdditionalAttributes" 
    class="pf-c-nav__list @InternalCssClass" 
    @onscroll="HandleScrollButtons" 
    @ref="Element"
  >
    @ChildContent
  </ul>
</CascadingValue>
@if (Parent.IsHorizontal)
{
  <button 
    class="pf-c-nav__scroll-button" 
    aria-label="@AriaRightScroll" 
    disabled="@_scrollViewAtEnd"
    @onclick="ScrollRight" 
  >
    <AngleRightIcon />
  </button>
}

@code {
  public ElementReference Element { get; protected set; }
  
  /// Parent Nav control
  [CascadingParameter] public Nav Parent { get; set; }

  /// aria-label for the left scroll button.
  [Parameter] public string AriaLeftScroll { get; set; } = "Scroll left";

  /// aria-label for the right scroll button.
  [Parameter] public string AriaRightScroll { get; set; } = "Scroll right";

  private bool          _scrollViewAtStart = false;
  private bool          _scrollViewAtEnd   = false;
  private List<NavItem> _items             = new(10);
  private IDisposable   _resizeSubscription;
  
  public void Dispose()
  {
    _resizeSubscription?.Dispose();
  }  
  
  internal void RegisterItem(NavItem item)
  {
    if (!Parent.IsHorizontal)
    {
      return;
    }
    
    if (!_items.Contains(item))
    {
      _items.Add(item);
    }
  }

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    
    if (Parent.IsHorizontal)
    {
      _resizeSubscription = WindowObserver
        .OnResize
        .Throttle(TimeSpan.FromMilliseconds(250))
        .Subscribe(async r => await HandleScrollButtons());
    }
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);
    
    if (firstRender)
    {
      await HandleScrollButtons();
    }
  }

  private async Task HandleScrollButtons()
  {
    if (_items.Count > 0)
    {
      var firstChild = _items[0].Element;
      var lastChild  = _items[^1].Element;
      
      // check if it elements are in view
      _scrollViewAtStart = await IsElementInView(Element, firstChild, false);
      _scrollViewAtEnd   = await IsElementInView(Element, lastChild, false);
      Parent.UpdateIsScrollableState(!_scrollViewAtStart || !_scrollViewAtEnd);
    }
  }

  private async Task ScrollLeft()
  {
    NavItem firstElementInView   = null;
    NavItem lastElementOutOfView = null;
    for (var i = 0; i < _items.Count && firstElementInView is null; i++) 
    {
      var isInView = await IsElementInView(Element, _items[i].Element, false);
      if (isInView)
      {
        firstElementInView   = _items[i];
        lastElementOutOfView = _items[i - 1];
      }
    }
    if (lastElementOutOfView is not null) 
    {
      var scrollSize = await DomUtils.GetScrollSizeAsync(lastElementOutOfView.Element);
      await DomUtils.ScrollLeftAsync(Element, -scrollSize.Width);
    }
    await HandleScrollButtons();  
  }

  private async Task ScrollRight()
  {
    NavItem firstElementOutOfView = null;
    NavItem lastElementInView     = null;
    for (var i = _items.Count - 1; i >= 0 && lastElementInView is null; i--) 
    {
      var isInView = await IsElementInView(Element, _items[i].Element, false);
      if (isInView) 
      {
        lastElementInView     =_items[i];
        firstElementOutOfView =_items[i + 1];
      }
    }
    if (firstElementOutOfView is not null)
    {
      var scrollSize = await DomUtils.GetScrollSizeAsync(firstElementOutOfView.Element);
      await DomUtils.ScrollLeftAsync(Element, scrollSize.Width);
    }
    await HandleScrollButtons();    
  }
  
  private async Task<bool> IsElementInView(ElementReference container, ElementReference element, bool partial) 
  {
    var containerBounds      = await DomUtils.GetBoundingClientRectAsync(container);
    var elementBounds        = await DomUtils.GetBoundingClientRectAsync(element);
    var containerBoundsLeft  = Math.Floor(containerBounds.Left);
    var containerBoundsRight = Math.Floor(containerBounds.Right);
    var elementBoundsLeft    = Math.Floor(elementBounds.Left);
    var elementBoundsRight   = Math.Floor(elementBounds.Right);

    // Check if in view
    var isTotallyInView   = elementBoundsLeft >= containerBoundsLeft && elementBoundsRight <= containerBoundsRight;
    var isPartiallyInView = 
        partial 
          && ((elementBoundsLeft < containerBoundsLeft && elementBoundsRight > containerBoundsLeft) 
              || (elementBoundsRight > containerBoundsRight && elementBoundsLeft < containerBoundsRight));

    // Return outcome
    return isTotallyInView || isPartiallyInView;
  }  
}