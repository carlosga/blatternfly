@namespace Blatternfly.Components
@inherits BaseComponent

<Form Model="@Model" @attributes="AdditionalAttributes">
  @if (HelperTextIcon is null)
  {
    <FormHelperText IsError="@IsHelperTextError" IsHidden="@IsHelperTextHidden">
      @HelperText
    </FormHelperText>
  }
  else
  {
    <FormHelperText IsError="@IsHelperTextError" IsHidden="@IsHelperTextHidden">
      <Icon>@HelperTextIcon</Icon>
      <ChildContent>@HelperText</ChildContent>
    </FormHelperText>
  }
  <FormGroup Label="@UsernameLabel" IsRequired Validated="@UsernameValidation" FieldId="pf-login-username-id">
    <TextInput
      autofocus="@AutoFocus"
      id="pf-login-username-id"
      name="pf-login-username-id"
      Type="TextInputTypes.Text"
      IsRequired
      Validated="@UsernameValidation"
      Value="@Model.UsernameValue"
      ValueExpression="@(() => Model.UsernameValue)"
      ValueChanged="@OnChangeUsername"
      @ref="UsernameInput"
    />
  </FormGroup>
  <FormGroup Label="@PasswordLabel" IsRequired Validated="@PasswordValidation" FieldId="pf-login-password-id">
    @if (IsShowPasswordEnabled)
    {
      <InputGroup>
        <TextInput
          IsRequired
          Type="@PasswordInputType"
          id="pf-login-password-id"
          name="pf-login-password-id"
          Validated="@PasswordValidation"
          Value="@Model.PasswordValue"
          ValueExpression="@(() => Model.PasswordValue)"
          ValueChanged="@OnChangePassword"
        />
        <Button
          Variant="ButtonVariant.Control"
          OnClick="@SetPasswordHidden"
          AriaLabel="@ShowPasswordButtonAriaLabel"
        >
          @if (PasswordHidden)
          {
            <EyeIcon/>
          }
          else
          {
            <EyeSlashIcon/>
          }
        </Button>        
      </InputGroup>
    }
    else
    {
      <TextInput
        IsRequired="true"
        Type="@PasswordInputType"
        id="pf-login-password-id"
        name="pf-login-password-id"
        Validated="@PasswordValidation"
        Value="@Model.PasswordValue"
        ValueExpression="@(() => Model.PasswordValue)"
        ValueChanged="@OnChangePassword"
      />
    }
  </FormGroup>
  @if (!string.IsNullOrEmpty(RememberMeLabel))
  {
    <FormGroup fieldId="pf-login-remember-me-id">
      <Checkbox
        id="pf-login-remember-me-id"
        Label="@RememberMeLabel"
        Value="@Model.IsRememberMeCheckedValue"
        ValueExpression="@(() => Model.IsRememberMeCheckedValue)"
        ValueChanged="@OnChangeRememberMe"
      />
    </FormGroup>
  }
  <ActionGroup>
    <Button 
      OnClick="@OnLoginButtonClick"
      Variant="ButtonVariant.Primary"
      Type="ButtonType.Submit"
      IsDisabled="@IsLoginButtonDisabled"
      IsBlock
    >
      @LoginButtonLabel
    </Button>
  </ActionGroup>
</Form>

@code {
  /// Login form model.
  [Parameter] public ILoginFormModel Model { get; set; }

  /// Flag to indicate if the first item should not gain initial focus.
  [Parameter] public bool NoAutoFocus { get; set; } = false;
  
  /// Flag indicating the Helper Text is visible.
  [Parameter] public bool ShowHelperText { get; set; }  

  /// Content displayed in the Helper Text component.
  [Parameter] public RenderFragment HelperText { get; set; }

  /// Icon displayed to the left in the Helper Text.
  [Parameter] public RenderFragment HelperTextIcon { get; set; }

  /// Label for the Username Input Field
  [Parameter] public string UsernameLabel { get; set; } = "Username";
  
  /// Function that handles the onChange event for the Username
  [Parameter] public EventCallback<string> OnChangeUsername { get; set; }
  
  /// Username validation state.
  [Parameter] public ValidatedOptions? UsernameValidation { get; set; }
  
  /// Label for the Password Input Field
  [Parameter] public string PasswordLabel { get; set; } = "Password";
  
  /// Function that handles the onChange event for the Password.
  [Parameter] public EventCallback<string> OnChangePassword { get; set; }
  
  /// Password validation state.
  [Parameter] public ValidatedOptions? PasswordValidation { get; set; }
  
  /// Flag indicating if the user can toggle hiding the password.
  [Parameter] public bool IsShowPasswordEnabled { get; set; }
  
  /** Accessible label for the show password button */
  [Parameter] public string ShowPasswordAriaLabel { get; set; } = "Show password";
  
  /** Accessible label for the hide password button */
  [Parameter] public string HidePasswordAriaLabel { get; set; }  = "Hide password";
  
  /// Label for the Log in Button Input
  [Parameter] public string LoginButtonLabel { get; set; } = "Log In";
  
  /// Flag indicating if the Login Button is disabled.
  [Parameter] public bool IsLoginButtonDisabled { get; set; }

  /// Function that is called when the Login button is clicked.
  [Parameter] public EventCallback<MouseEventArgs> OnLoginButtonClick { get; set; }
  
  /// Label for the Remember Me Checkbox that indicates the user should be kept logged in.  If the label is not provided, the checkbox will not show.
  [Parameter] public string RememberMeLabel { get; set; }

  /// Function that handles the onChange event for the Remember Me Checkbox.
  [Parameter] public EventCallback<bool> OnChangeRememberMe { get; set; }
  
  private TextInput UsernameInput { get; set; }
  private bool PasswordHidden     { get; set; }  = true;
  private bool IsHelperTextError  { get => !IsValidUsername || !IsValidPassword; }
  private bool IsHelperTextHidden { get => !ShowHelperText; }
  private bool AutoFocus          { get => !NoAutoFocus; }

  private string ShowPasswordButtonAriaLabel
  {
    get => PasswordHidden ? ShowPasswordAriaLabel : HidePasswordAriaLabel;
  }
  
  private bool IsValidUsername
  {
    get => UsernameValidation is null or ValidatedOptions.Success;
  }

  private bool IsValidPassword
  {
    get => PasswordValidation is null or ValidatedOptions.Success;
  }

  private TextInputTypes PasswordInputType
  {
    get => PasswordHidden ? TextInputTypes.Password: TextInputTypes.Text;
  }
  
  private void SetPasswordHidden(MouseEventArgs _)
  {
    PasswordHidden = !PasswordHidden;
  }
  
  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);
    
    if (firstRender)
    {
      if (AutoFocus)
      {
        await UsernameInput.Element.FocusAsync(); 
      }
    }
  }
}