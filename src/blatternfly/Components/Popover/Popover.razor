@namespace Blatternfly.Components
@inherits BaseComponent

@*
<FocusTrap
  active={focusTrapActive}
  focusTrapOptions={{
    returnFocusOnDeactivate: true,
    clickOutsideDeactivates: true,
    fallbackFocus: () => {
      // If the popover's trigger is focused but scrolled out of view,
      // FocusTrap will throw an error when the Enter button is used on the trigger.
      // That is because the Popover is hidden when its trigger is out of view.
      // Provide a fallback in that case.
      let node = null;
      if (document && document.activeElement) {
        node = document.activeElement as HTMLElement;
      }
      return node;
    }
  }}
  preventScrollOnDeactivate
  className={css(
    styles.popover,
    alertSeverityVariant && alertStyle[alertSeverityVariant],
    hasNoPadding && styles.modifiers.noPadding,
    hasAutoWidth && styles.modifiers.widthAuto,
    className
  )}
  role="dialog"
  aria-modal="true"
  aria-label={headerContent ? undefined : ariaLabel}
  aria-labelledby={headerContent ? `popover-${uniqueId}-header` : undefined}
  aria-describedby={`popover-${uniqueId}-body`}
  onMouseDown={onContentMouseDown}
  style={{
    minWidth: hasCustomMinWidth ? minWidth : null,
    maxWidth: hasCustomMaxWidth ? maxWidth : null,
    opacity,
    transition: getOpacityTransition(animationDuration)
  }}
  {...rest}
>
  <PopoverArrow />
  <PopoverContent>
    {showClose && <PopoverCloseButton onClose={closePopover} aria-label={closeBtnAriaLabel} />}
    {headerContent && (
      <PopoverHeader
        id={`popover-${uniqueId}-header`}
        icon={headerIcon}
        alertSeverityVariant={alertSeverityVariant}
        alertSeverityScreenReaderText={alertSeverityScreenReaderText || `${alertSeverityVariant} alert:`}
        titleHeadingLevel={headerComponent}
      >
        {typeof headerContent === 'function' ? headerContent(hide) : headerContent}
      </PopoverHeader>
    )}
    <PopoverBody id={`popover-${uniqueId}-body`}>
      {typeof bodyContent === 'function' ? bodyContent(hide) : bodyContent}
    </PopoverBody>
    {footerContent && (
      <PopoverFooter id={`popover-${uniqueId}-footer`}>
        {typeof footerContent === 'function' ? footerContent(hide) : footerContent}
      </PopoverFooter>
    )}
  </PopoverContent>
</FocusTrap>
*@

@code {
  /// Accessible label, required when header is not present.
  [Parameter] public string AriaLabel { get; set; }

  /// Body content
  /// If you want to close the popover after an action within the bodyContent, you can use the isVisible prop for manual control,
  /// or you can provide a function which will receive a callback as an argument to hide the popover
  /// i.e. bodyContent={hide => <Button onClick={() => hide()}>Close</Button>}
  [Parameter] public RenderFragment BodyContent { get; set; }

  /// The reference element to which the Popover is relatively placed to.
  /// If you can wrap the reference with the Popover, you can use the children prop instead.
  /// Usage: <Popover reference={() => document.getElementById('reference-element')} />
  [Parameter] public string Reference { get; set; }

  /// Aria label for the Close button.
  [Parameter] public string CloseBtnAriaLabel { get; set; }

  /// Whether to show the close button.
  [Parameter] public bool ShowClose { get; set; }

  /// Distance of the popover to its target, defaults to 25.
  [Parameter] public int Distance { get; set; } = 25;

  /// If true, tries to keep the popover in view by flipping it if necessary
  /// If the position is set to 'auto', this prop is ignored
  [Parameter] public bool EnableFlip { get; set; }

  /// The desired position to flip the tooltip to if the initial position is not possible.
  /// By setting this prop to 'flip' it attempts to flip the tooltip to the opposite side if there is no space.
  /// You can also pass an array of positions that determines the flip order. It should contain the initial position
  /// followed by alternative positions if that position is unavailable.
  /// Example: Initial position is 'top'. Button with tooltip is in the top right corner. 'flipBehavior' is set to
  /// ['top', 'right', 'left']. Since there is no space to the top, it checks if right is available. There's also no
  /// space to the right, so it finally shows the tooltip on the left.
  [Parameter] public PopoverPosition[] FlipBehavior { get; set; } =
  {
    PopoverPosition.Top,
    PopoverPosition.Right,
    PopoverPosition.Bottom,
    PopoverPosition.Left,
    PopoverPosition.Top,
    PopoverPosition.Right,
    PopoverPosition.Bottom
  };

  /// Footer content
  /// If you want to close the popover after an action within the bodyContent, you can use the isVisible prop for manual control,
  /// or you can provide a function which will receive a callback as an argument to hide the popover
  /// i.e. footerContent={hide => <Button onClick={() => hide()}>Close</Button>}
  [Parameter] public RenderFragment FooterContent { get; set; }

  /// Simple header content to be placed within a title.
  /// If you want to close the popover after an action within the bodyContent, you can use the isVisible prop for manual control,
  /// or you can provide a function which will receive a callback as an argument to hide the popover
  /// i.e. headerContent={hide => <Button onClick={() => hide()}>Close</Button>}
  [Parameter] public RenderFragment HeaderContent { get; set; }

  /// Sets the heading level to use for the popover header. Default is h6..
  [Parameter] public HeadingLevel? HeaderComponent { get; set; }

  /// @beta Icon to be displayed in the popover header **/
  [Parameter] public RenderFragment HeaderIcon { get; set; }

  /// @beta Severity variants for an alert popover. This modifies the color of the header to match the severity..
  [Parameter] public AlertVariant? AlertSeverityVariant { get; set; }

  /// @beta Text announced by screen reader when alert severity variant is set to indicate severity level.
  [Parameter] public string AlertSeverityScreenReaderText { get; set; }

  /// Hides the popover when a click occurs outside (only works if isVisible is not controlled by the user).
  [Parameter] public bool HideOnOutsideClick { get; set; }

  /// True to show the popover programmatically. Used in conjunction with the shouldClose prop.
  /// By default, the popover child element handles click events automatically. If you want to control this programmatically,
  /// the popover will not auto-close if the Close button is clicked, ESC key is used, or if a click occurs outside the popover.
  /// Instead, the consumer is responsible for closing the popover themselves by adding a callback listener for the shouldClose prop.
  [Parameter] public bool IsVisible { get; set; }

  /// Minimum width of the popover (default 6.25rem).
  [Parameter] public string MinWidth { get; set; }

  /// Maximum width of the popover (default 18.75rem).
  [Parameter] public string MaxWidth { get; set; }

  /// Lifecycle function invoked when the popover has fully transitioned out.
  [Parameter] public EventCallback OnHidden { get; set; }

  /// Lifecycle function invoked when the popover begins to transition out.
  [Parameter] public EventCallback OnHide { get; set; }

  /// Lifecycle function invoked when the popover has been mounted to the DOM.
  [Parameter] public EventCallback OnMount { get; set; }

  /// Lifecycle function invoked when the popover begins to transition in.
  [Parameter] public EventCallback OnShow { get; set; }

  /// Lifecycle function invoked when the popover has fully transitioned in.
  [Parameter] public EventCallback OnShown { get; set; }

  /// Popover position. Note: With 'enableFlip' set to true,
  /// it will change the position if there is not enough space for the starting position.
  /// The behavior of where it flips to can be controlled through the flipBehavior prop.
  [Parameter] public PopoverPosition Position { get; set; }

  /// Callback function that is only invoked when isVisible is also controlled. Called when the popover Close button is
  /// clicked, Enter key was used on it, or the ESC key is used.
  [Parameter] public EventCallback ShouldClose { get; set; }

  /// Callback function that is only invoked when isVisible is also controlled. Called when the Enter key is
  /// used on the focused trigger
  [Parameter] public EventCallback ShouldOpen { get; set; }

  /// z-index of the popover.
  [Parameter] public int ZIndex { get; set; }

  /// CSS fade transition animation duration.
  [Parameter] public int AnimationDuration { get; set; }

  /// id used as part of the various popover elements (popover-${id}-header/body/footer).
  [Parameter] public string Id { get; set; }

  /// Whether to trap focus in the popover.
  [Parameter] public bool WithFocusTrap { get; set; }

  /// Removes fixed-width and allows width to be defined by contents.
  [Parameter] public bool HasAutoWidth { get; set; }

  /// Allows content to touch edges of popover container.
  [Parameter] public bool HasNoPadding { get; set; }
}