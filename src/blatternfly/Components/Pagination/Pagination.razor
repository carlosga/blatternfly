@namespace Blatternfly.Components
@inherits BaseComponent

<div
  class="pf-c-pagination @VariantClass @CompactClass @StaticClass @StickyClass"
  id="@ComponentId"
  @attributes="AdditionalAttributes"
  style="@InputStyle"
>
  @if (Variant == PaginationVariant.Top)
  {
    <div class="pf-c-pagination__total-items">
      <ToggleTemplate
        FirstIndex="@FirstIndex"
        LastIndex="@LastIndex"
        ItemCount="@ItemCount"
        ItemsTitle="@Titles?.Items"
        OfWord="@Titles?.OfWord"
      />
    </div>
  }
  <PaginationOptionsMenu
    ItemsPerPageTitle="@Titles?.ItemsPerPage"
    PerPageSuffix="@Titles?.PerPageSuffix"
    ItemsTitle="@(IsCompact ? null : Titles?.Items)"
    OptionsToggle="@Titles?.OptionsToggle"
    PerPageOptions="@PerPageOptions"
    FirstIndex="@(ItemsStart > 0 ? ItemsStart : FirstIndex)"
    LastIndex="@(ItemsEnd > 0 ? ItemsEnd : LastIndex)"
    DefaultToFullPage="@DefaultToFullPage"
    ItemCount="@ItemCount"
    Page="@Page"
    PerPage="@PerPage"
    LastPage="@LastPage"
    OnPerPageSelect="@OnPerPageSelect"
    DropDirection="@OptionsMenuDirection"
    WidgetId="@WidgetId"
    IsDisabled="@IsDisabled"
  />
  <Navigation
    PagesTitle="@Titles?.Page"
    ToLastPage="@Titles?.ToLastPage"
    ToPreviousPage="@Titles?.ToPreviousPage"
    ToNextPage="@Titles?.ToNextPage"
    ToFirstPage="@Titles?.ToFirstPage"
    CurrPage="@Titles?.CurrPage"
    PaginationTitle="@Titles?.PaginationTitle"
    OfWord="@Titles?.OfWord"
    Page="@(ItemCount <= 0 ? 0 : Page)"
    PerPage="@PerPage"
    FirstPage="@(ItemsStart > 0 ? ItemsStart : 1)"
    LastPage="@LastPage"
    OnSetPage="@OnSetPage"
    OnFirstClick="@OnFirstClick"
    OnPreviousClick="@OnPreviousClick"
    OnNextClick="@OnNextClick"
    OnLastClick="@OnLastClick"
    OnPageInput="@OnPageInput"
    isDisabled="@IsDisabled"
    IsCompact="@IsCompact"
  />
  @ChildContent
</div>

@code {
  /// Total number of items.
  [Parameter] public int ItemCount { get; set; }

  /// Position where pagination is rendered.
  [Parameter] public PaginationVariant Variant { get; set; } = PaginationVariant.Top;

  /// Flag indicating if pagination is disabled
  [Parameter] public bool IsDisabled { get; set; }

  /// Flag indicating if pagination is compact
  [Parameter] public bool IsCompact { get; set; }

  /// Flag indicating if pagination should not be sticky on mobile
  [Parameter] public bool IsStatic { get; set; }

  /// Flag indicating if pagination should stick to its position (based on variant)
  [Parameter] public bool IsSticky { get; set; }

  /// Number of items per page.
  [Parameter] public int PerPage { get; set; } = DefaultPerPageOptions[0].Value;

  /// Select from options to number of items per page.
  [Parameter] public PerPageOptions[] PerPageOptions { get; set; } = DefaultPerPageOptions;

  /// Indicate whether to show last full page of results when user selects perPage value greater than remaining rows
  [Parameter] public bool DefaultToFullPage { get; set; }

  /// Page we start at.
  [Parameter] public int FirstPage { get; set; } = 1;

  /// Current page number.
  [Parameter] public int Page { get; set; }

  /// Start index of rows to display, used in place of providing page
  [Parameter] public int Offset { get; set; }

  /// First index of items on current page.
  [Parameter] public int ItemsStart { get; set; }

  /// Last index of items on current page.
  [Parameter] public int ItemsEnd { get; set; }

  /// ID to identify widget on page.
  [Parameter] public string WidgetId { get; set; } = "pagination-options-menu";

  /// Direction of dropdown context menu.
  [Parameter] public DropdownDirection? DropDirection { get; set; }

  /// Object with titles to display in pagination.
  [Parameter] public PaginationTitles Titles { get;  set; } = DefaultTitles;

  /// Function called when user sets page.
  [Parameter] public EventCallback<SetPageEventArgs> OnSetPage { get; set; }

  /// Function called when user clicks on navigate to first page.
  [Parameter] public EventCallback<int> OnFirstClick { get; set; }

  /// Function called when user clicks on navigate to previous page.
  [Parameter] public EventCallback<int> OnPreviousClick { get; set; }

  /// Function called when user clicks on navigate to next page.
  [Parameter] public EventCallback<int> OnNextClick { get; set; }

  /// Function called when user clicks on navigate to last page.
  [Parameter] public EventCallback<int> OnLastClick { get; set; }

  /// Function called when user inputs page number.
  [Parameter] public EventCallback<int> OnPageInput { get; set; }

  /// Function called when user selects number of items per page.
  [Parameter] public EventCallback<PerPageSelectEventArgs> OnPerPageSelect { get; set; }

  private static readonly PerPageOptions[] DefaultPerPageOptions = 
  {
    new() { Title =  "10", Value =  10 },
    new() { Title =  "20", Value =  20 },
    new() { Title =  "50", Value =  50 },
    new() { Title = "100", Value = 100 }
  };

  private static readonly PaginationTitles DefaultTitles = new()
  {
    Items           = "",
    Page            = "",
    ItemsPerPage    = "Items per page",
    PerPageSuffix   = "per page",
    ToFirstPage     = "Go to first page",
    ToPreviousPage  = "Go to previous page",
    ToLastPage      = "Go to last page",
    ToNextPage      = "Go to next page",
    OptionsToggle   = "Items per page",
    CurrPage        = "Current page",
    PaginationTitle = "Pagination",
    OfWord          = "of"
  };

  private string ComponentId  { get => Utils.GetUniqueId(WidgetId); }
  private string VariantClass { get => Variant == PaginationVariant.Bottom ? "pf-m-bottom" : null; }
  private string CompactClass { get => IsCompact ? "pf-m-compact" : null; }
  private string StaticClass  { get => IsStatic ? "pf-m-static" : null; }
  private string StickyClass  { get => IsSticky ? "pf-m-sticky" : null; }
  private string InputStyle   { get; set; }
  
  private DropdownDirection OptionsMenuDirection
  {
    get => DropDirection ?? (Variant == PaginationVariant.Bottom && !IsStatic
      ? DropdownDirection.Up
        : DropdownDirection.Down);
  }

  private int FirstIndex { get; set; }
  private int LastIndex  { get; set; }
  private int LastPage   { get; set; }

  private int GetLastPage()
  {
    return PerPage == 0  ? 0 : (int)Math.Ceiling(ItemCount / (double)PerPage);
  }

  protected override void OnInitialized()
  {
    base.OnInitialized();
    HandleInputWidth(GetLastPage());
  }

  protected override void OnParametersSet()
  {
    base.OnParametersSet();
    
    var page = Page;
    if (page == 0 && Offset > 0)
    {
      page = (int)Math.Ceiling(Offset / (double)PerPage);
    }

    LastPage = GetLastPage();
    if (page < FirstPage && ItemCount > 0)
    {
      page = FirstPage;
    }
    else if (page > LastPage)
    {
      page = LastPage;
    }

    FirstIndex = ItemCount <= 0 ? 0 : (page - 1) * PerPage + 1;
    if (ItemCount <= 0)
    {
      LastIndex = 0;
    }
    else
    {
      LastIndex = page == LastPage ? ItemCount : page * PerPage;
    }
    Page = page;
  }

  private void HandleInputWidth(int lastPage)
  {
    var len = lastPage.ToString().Length;
    var widthChars = len >= 3 ? len : 2;
    InputStyle = $"--pf-c-pagination__nav-page-select--c-form-control--width-chars:{widthChars}";
  }

      @* componentDidUpdate(prevProps: PaginationProps & OUIAProps) {
    const node = this.paginationRef.current;
    if (prevProps.perPage !== this.props.perPage || prevProps.itemCount !== this.props.itemCount) {
      handleInputWidth(this.getLastPage(), node);
    }
  } *@
}
