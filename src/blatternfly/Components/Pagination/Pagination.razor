@namespace Blatternfly.Components
@inject ISequentialIdGenerator SequentialIdGenerator

<div
  @attributes="AdditionalAttributes"
  class="@CssClass"
  id="@ComponentId"
  style="@InputStyle"
>
  @if (Variant is PaginationVariant.Top)
  {
    <div class="pf-c-pagination__total-items">
      @if (ToggleTemplate is not null)
      {
        @ToggleTemplate(CustomToggleTemplateProps)
      }
      else
      {
        <ToggleTemplate
          FirstIndex="@FirstIndex"
          LastIndex="@LastIndex"
          ItemCount="@ItemCount"
          ItemsTitle="@Titles?.Items"
          OfWord="@Titles?.OfWord"
        />
      }
    </div>
  }
  <PaginationOptionsMenu
    ItemsPerPageTitle="@Titles?.ItemsPerPage"
    PerPageSuffix="@Titles?.PerPageSuffix"
    ItemsTitle="@(IsCompact ? null : Titles?.Items)"
    OptionsToggle="@Titles?.OptionsToggle"
    PerPageOptions="@PerPageOptions"
    FirstIndex="@(ItemsStart > 0 ? ItemsStart : FirstIndex)"
    LastIndex="@(ItemsEnd > 0 ? ItemsEnd : LastIndex)"
    OfWord="@Titles?.OfWord"
    DefaultToFullPage="@DefaultToFullPage"
    ItemCount="@ItemCount"
    Page="@Page"
    PerPage="@PerPage"
    LastPage="@LastPage"
    OnPerPageSelect="@OnPerPageSelect"
    DropDirection="@OptionsMenuDirection"
    WidgetId="@WidgetId"
    OptionsToggleId="@OptionsToggleId"
    IsDisabled="@IsDisabled"
    ToggleTemplate="@ToggleTemplate"
  />
  <Navigation
    PagesTitle="@Titles?.Page"
    PagesTitlePlural="@Titles?.Pages"
    ToLastPage="@Titles?.ToLastPage"
    ToPreviousPage="@Titles?.ToPreviousPage"
    ToNextPage="@Titles?.ToNextPage"
    ToFirstPage="@Titles?.ToFirstPage"
    CurrPage="@Titles?.CurrPage"
    PaginationTitle="@Titles?.PaginationTitle"
    OfWord="@Titles?.OfWord"
    Page="@(ItemCount.HasValue && ItemCount.Value <= 0 ? 0 : Page)"
    PerPage="@PerPage"
    ItemCount="@ItemCount"
    FirstPage="@(ItemsStart > 0 ? ItemsStart : 1)"
    LastPage="@LastPage"
    OnSetPage="@OnSetPage"
    OnFirstClick="@OnFirstClick"
    OnPreviousClick="@OnPreviousClick"
    OnNextClick="@OnNextClick"
    OnLastClick="@OnLastClick"
    OnPageInput="@OnPageInput"
    isDisabled="@IsDisabled"
    IsCompact="@IsCompact"
  />
  @ChildContent
</div>

@code {
  /// Additional attributes that will be applied to the component.
  [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

  /// Content rendered inside the component.
  [Parameter] public RenderFragment ChildContent { get; set; }

  /// Total number of items.
  [Parameter] public int? ItemCount { get; set; }

  /// Position where pagination is rendered.
  [Parameter] public PaginationVariant Variant { get; set; } = PaginationVariant.Top;

  /// Flag indicating if pagination is disabled
  [Parameter] public bool IsDisabled { get; set; }

  /// Flag indicating if pagination is compact
  [Parameter] public bool IsCompact { get; set; }

  /// Flag indicating if pagination should not be sticky on mobile
  [Parameter] public bool IsStatic { get; set; }

  /// Flag indicating if pagination should stick to its position (based on variant)
  [Parameter] public bool IsSticky { get; set; }

  /// Number of items per page.
  [Parameter] public int PerPage { get; set; } = DefaultPerPageOptions[0].Value;

  /// Select from options to number of items per page.
  [Parameter] public PerPageOptions[] PerPageOptions { get; set; } = DefaultPerPageOptions;

  /// Indicate whether to show last full page of results when user selects perPage value greater than remaining rows
  [Parameter] public bool DefaultToFullPage { get; set; }

  /// Page we start at.
  [Parameter] public int FirstPage { get; set; } = 1;

  /// Current page number.
  [Parameter] public int Page { get; set; }

  /// Start index of rows to display, used in place of providing page
  [Parameter] public int Offset { get; set; }

  /// First index of items on current page.
  [Parameter] public int ItemsStart { get; set; }

  /// Last index of items on current page.
  [Parameter] public int ItemsEnd { get; set; }

  /// ID to identify widget on page.
  [Parameter] public string WidgetId { get; set; } = "pagination-options-menu";

  /// Id added to the options toggle.
  [Parameter] public string OptionsToggleId { get; set; }

  /// Direction of dropdown context menu.
  [Parameter] public DropdownDirection? DropDirection { get; set; }

  /// Object with titles to display in pagination.
  [Parameter] public PaginationTitles Titles { get;  set; } = new();

  /// This will be shown in pagination toggle span. You can use firstIndex, lastIndex, itemCount, itemsTitle, ofWord props.
  [Parameter] public RenderFragment<ToggleTemplateProps> ToggleTemplate { get; set; }

  /// Function called when user sets page.
  [Parameter] public EventCallback<SetPageEventArgs> OnSetPage { get; set; }

  /// Function called when user clicks on navigate to first page.
  [Parameter] public EventCallback<int> OnFirstClick { get; set; }

  /// Function called when user clicks on navigate to previous page.
  [Parameter] public EventCallback<int> OnPreviousClick { get; set; }

  /// Function called when user clicks on navigate to next page.
  [Parameter] public EventCallback<int> OnNextClick { get; set; }

  /// Function called when user clicks on navigate to last page.
  [Parameter] public EventCallback<int> OnLastClick { get; set; }

  /// Function called when user inputs page number.
  [Parameter] public EventCallback<int> OnPageInput { get; set; }

  /// Function called when user selects number of items per page.
  [Parameter] public EventCallback<PerPageSelectEventArgs> OnPerPageSelect { get; set; }

  private ToggleTemplateProps CustomToggleTemplateProps
    => new (FirstIndex, LastIndex, ItemCount, Titles?.Items, Titles?.OfWord);

  private string CssClass => new CssBuilder("pf-c-pagination")
    .AddClass("pf-m-bottom" , Variant is PaginationVariant.Bottom)
    .AddClass("pf-m-compact", IsCompact)
    .AddClass("pf-m-static" , IsStatic)
    .AddClass("pf-m-sticky" , IsSticky)
    .AddClassFromAttributes(AdditionalAttributes)
    .Build();

  private static readonly PerPageOptions[] DefaultPerPageOptions =
  {
    new() { Title =  "10", Value =  10 },
    new() { Title =  "20", Value =  20 },
    new() { Title =  "50", Value =  50 },
    new() { Title = "100", Value = 100 }
  };

  private string InternalId  { get => AdditionalAttributes.GetPropertyValue(HtmlAttributes.Id); }
  private string ComponentId { get => !string.IsNullOrEmpty(InternalId) ? InternalId : SequentialIdGenerator.GenerateId(WidgetId); }
  private string InputStyle  { get; set; }
  private int    FirstIndex  { get; set; }
  private int    LastIndex   { get; set; }
  private int    LastPage    { get; set; }

  private DropdownDirection OptionsMenuDirection
  {
    get => DropDirection ?? (Variant == PaginationVariant.Bottom && !IsStatic
      ? DropdownDirection.Up
        : DropdownDirection.Down);
  }

  private int GetLastPage()
  {
    // when itemCount is not known let's set lastPage as page+1 as we don't know the total count
    return ItemCount.HasValue
      ? (PerPage == 0) ? 0 : (int)Math.Ceiling(ItemCount.GetValueOrDefault() / (double)PerPage)
        : Page + 1;
  }

  protected override void OnParametersSet()
  {
    base.OnParametersSet();

    var page = Page;

    if (page == 0 && Offset > 0)
    {
      page = (PerPage == 0) ? 0 : (int)Math.Ceiling(Offset / (double)PerPage);
    }
    if (page == 0 && !ItemCount.HasValue)
    {
      page = 1;
    }

    LastPage   = GetLastPage();
    FirstIndex = (page - 1) * PerPage + 1;
    LastIndex  = page * PerPage;

    if (ItemCount.HasValue)
    {
      FirstIndex = ItemCount.Value <= 0 ? 0 : (page - 1) * PerPage + 1;
      if (FirstIndex < 0)
      {
        FirstIndex += PerPage;
      }

      if (page < FirstPage && ItemCount.Value > 0)
      {
        page = FirstPage;
      }
      else if (page > LastPage)
      {
        page = LastPage;
      }

      if (ItemCount.Value >= 0)
      {
        LastIndex = page == LastPage || ItemCount.Value == 0 ? ItemCount.Value : page * PerPage;
      }
    }

    Page = page;
  }

  protected override void OnAfterRender(bool firstRender)
  {
    base.OnAfterRender(firstRender);

    HandleInputWidth(GetLastPage());
  }

  private void HandleInputWidth(int lastPage)
  {
    var len        = lastPage.ToString().Length;
    var widthChars = len >= 3 ? len : 2;
    var inputStyle = $"--pf-c-pagination__nav-page-select--c-form-control--width-chars:{widthChars}";

    if (inputStyle != InputStyle)
    {
      InputStyle = inputStyle;
      StateHasChanged();
    }
  }
}
