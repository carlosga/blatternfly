@namespace Blatternfly.Components

<Dropdown
  Direction="@DropDirection"
  IsOpen="@IsOpen"
  IsPlain="true"
  OnSelect="@HandleNewPerPage"
  BaseClass="pf-c-options-menu"
  MenuClass="pf-c-options-menu__menu"
  ItemClass="pf-c-options-menu__menu-item"
>
  <Toggle>
    <OptionsToggle
      OptionsToggleText="@OptionsToggle"
      ItemsPerPageTitle="@ItemsPerPageTitle"
      ShowToggle="@ShowToggle"
      OnToggle="@OnToggle"
      OnEnter="@OnEnter"
      IsOpen="@IsOpen"
      WidgetId="@WidgetId"
      OptionsToggleId="@OptionsToggleId"
      FirstIndex="@FirstIndex"
      LastIndex="@LastIndex"
      ItemCount="@ItemCount"
      ItemsTitle="@ItemsTitle"
      OfWord="@OfWord"
      ToggleTemplate="@ToggleTemplate"
      IsDisabled="@IsDisabled"
      PerPageComponent="@PerPageComponent"
      ToggleTextClass="pf-c-options-menu__toggle-text"
      ToggleIndicatorClass="@ToggleIndicatorClass"
    />
  </Toggle>

  <DropdownItems>
    @if (PerPageOptions is not null && PerPageOptions.Any())
    {
      foreach (var pageOptions in PerPageOptions)
      {
        <DropdownItem
          @key="pageOptions.Value"
          value="@pageOptions.Value.ToString()"
          Component="button"
          data-action="@pageOptions.Action"
          class="@(PerPage == pageOptions.Value ? "pf-m-selected" : null)"
        >
          @pageOptions.Title
          @PerPageSuffix
          @if (PerPage == pageOptions.Value)
          {
            <div class="pf-c-options-menu__menu-item-icon">
              <CheckIcon />
            </div>
          }
        </DropdownItem>
      }
    }
  </DropdownItems>
</Dropdown>

@code {
  /// Additional attributes that will be applied to the component.
  [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

  /// Content rendered inside the component.
  [Parameter] public RenderFragment ChildContent { get; set; }

  /// Id added to the title of the pagination options menu.
  [Parameter] public string WidgetId { get; set; }

  /// Id added to the options toggle.
  [Parameter] public string OptionsToggleId { get; set; }

  /// Flag indicating if pagination options menu is disabled.
  [Parameter] public bool IsDisabled { get; set; }

  /// Menu will open up or open down from the Options menu toggle.
  [Parameter] public DropdownDirection DropDirection { get; set; } = DropdownDirection.Down;

  /// Array of titles and values which will be the options on the Options Menu dropdown.
  [Parameter] public PerPageOptions[] PerPageOptions { get; set; }

  /// The title of the pagination options menu.
  [Parameter] public string ItemsPerPageTitle { get; set; } = "Items per page";

  /// Current page number.
  [Parameter] public int Page { get; set; }

  /// The suffix to be displayed after each option on the options menu dropdown.
  [Parameter] public string PerPageSuffix { get; set; } = "per page";

  /// The type or title of the items being paginated.
  [Parameter] public string ItemsTitle { get; set; } = "items";

  /// The text to be displayed on the options toggle.
  [Parameter] public string OptionsToggle { get; set; }

  /// The total number of items being paginated.
  [Parameter] public int? ItemCount { get; set; }

  /// The first index of the items being paginated.
  [Parameter] public int FirstIndex { get; set; }

  /// The last index of the items being paginated.
  [Parameter] public int LastIndex { get; set; }

  /// Flag to show last full page of results if perPage selected > remaining rows.
  [Parameter] public bool DefaultToFullPage { get; set; }

  /// The number of items to be displayed per page.
  [Parameter] public int PerPage { get; set; }

  /// The number of the last page.
  [Parameter] public int LastPage { get; set; }

  /// This will be shown in pagination toggle span. You can use firstIndex, lastIndex, itemCount, itemsTitle props.
  [Parameter] public RenderFragment<ToggleTemplateProps> ToggleTemplate { get; set; }

  /// Function called when user selects number of items per page.
  [Parameter] public EventCallback<PerPageSelectEventArgs> OnPerPageSelect { get; set; }

  /// Label for the English word "of".
  [Parameter] public string OfWord { get; set; } = "of";

  /// Component to be used for wrapping the toggle contents.
  /// Use 'button' when you want all of the toggle text to be clickable.
  [Parameter] public PerPageComponents PerPageComponent { get; set; }

  private bool IsOpen { get; set; }
  private bool ShowToggle { get => PerPageOptions is not null && PerPageOptions.Length > 0; }

  private string ToggleIndicatorClass
  {
    get => PerPageComponent is PerPageComponents.div ? "pf-c-options-menu__toggle-button-icon" : "pf-c-options-menu__toggle-icon";
  }

  private void OnToggle(bool isOpen)
  {
    IsOpen = isOpen;
  }

  private void OnEnter()
  {
    IsOpen = !IsOpen;
  }

  private void OnSelect()
  {
    IsOpen = !IsOpen;
  }

  private async Task HandleNewPerPage(DropdownItem item)
  {
    OnSelect();

    var newPerPage = int.Parse((string)item.AdditionalAttributes["value"]);
    var newPage    = Page;
    var itemCount  = ItemCount.GetValueOrDefault();

    while (Math.Ceiling(itemCount / (double)newPerPage) < newPage)
    {
      newPage--;
    }

    if (DefaultToFullPage)
    {
      if (itemCount / newPerPage != newPage)
      {
        while (newPage > 1 && itemCount - newPerPage * newPage < 0)
        {
          newPage--;
        }
      }
    }
    var startIdx = (newPage - 1) * newPerPage;
    var endIdx   = newPage * newPerPage;

    await OnPerPageSelect.InvokeAsync(new PerPageSelectEventArgs(newPerPage, newPage, startIdx, endIdx));
  }
}