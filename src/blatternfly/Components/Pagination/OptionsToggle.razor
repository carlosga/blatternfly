@namespace Blatternfly.Components
@using System.Diagnostics.CodeAnalysis
@inject IComponentIdGenerator ComponentIdGenerator

@if (IsDiv)
{
  <div class="@CssClass">
    @if (ShowToggle)
    {
      <span class="pf-c-options-menu__toggle-text">
        @if (ToggleTemplate is not null)
        {
          @ToggleTemplate(CustomToggleTemplateProps)
        }
        else
        {
          <ToggleTemplate
            FirstIndex="@FirstIndex"
            LastIndex="@LastIndex"
            OfWord="@OfWord"
            ItemCount="@ItemCount"
            ItemsTitle="@ItemsTitle"
          />
        }
      </span>
      <DropdownToggle
        OnEnter="@OnEnter"
        AriaLabel="@DropdownAriaLabel"
        OnToggle="@OnToggle"
        IsDisabled="@(IsDisabled || ItemCount is <= 0)"
        IsOpen="IsOpen"
        id="@DropdownToggleId"
        ToggleClass="@DropdownToggleCssClass"
        ToggleTextClass="@ToggleTextClass"
        ToggleIndicatorClass="@ToggleIndicatorClass"
        AriaHasPopup="AriaPopupVariant.Listbox"
      />
    }
  </div>
}
else
{
  @if (ShowToggle)
  {
    <DropdownToggle
      OnEnter="@OnEnter"
      AriaLabel="@DropdownAriaLabel"
      OnToggle="@OnToggle"
      IsDisabled="@(IsDisabled || ItemCount is <= 0)"
      IsOpen="IsOpen"
      id="@DropdownToggleId"
      ToggleClass="@DropdownToggleCssClass"
      ToggleTextClass="@ToggleTextClass"
      ToggleIndicatorClass="@ToggleIndicatorClass"
      AriaHasPopup="AriaPopupVariant.Listbox"
    >
      @if (ToggleTemplate is not null)
      {
        @ToggleTemplate(CustomToggleTemplateProps)
      }
      else
      {
        <ToggleTemplate
          FirstIndex="@FirstIndex"
          LastIndex="@LastIndex"
          OfWord="@OfWord"
          ItemCount="@ItemCount"
          ItemsTitle="@ItemsTitle"
        />
      }
    </DropdownToggle>
  }
}

@code {
  /// Additional attributes that will be applied to the component.
  [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

  /// The type or title of the items being paginated.
  [Parameter] public string ItemsTitle { get; set; } = "items";

  /// Id added to the options toggle.
  [Parameter] public string OptionsToggleId { get; set; }

  /// The text to be displayed on the options toggle.
  [Parameter] public string OptionsToggleText { get; set; }

  /// The title of the pagination options menu.
  [Parameter] public string ItemsPerPageTitle { get; set; } = "Items per page";

  /// The first index of the items being paginated.
  [Parameter] public int FirstIndex { get; set; }

  /// The last index of the items being paginated.
  [Parameter] public int LastIndex { get; set; }

  /// The total number of items being paginated.
  [Parameter] public int? ItemCount { get; set; }

  /// Id added to the title of the pagination options menu.
  [Parameter] public string WidgetId { get; set; }

  /// showToggle.
  [Parameter] public bool ShowToggle { get; set; } = true;

  /// Event function that fires when user clicks the options menu toggle */
  [Parameter] public EventCallback<bool> OnToggle { get; set; }

  /// Flag indicating if the options menu dropdown is open or not.
  [Parameter] public bool IsOpen { get; set; }

  /// Flag indicating if the options menu is disabled.
  [Parameter] public bool IsDisabled { get; set; }

  /// This will be shown in pagination toggle span. You can use firstIndex, lastIndex, itemCount, itemsTitle props.
  [Parameter] public RenderFragment<ToggleTemplateProps> ToggleTemplate { get; set; }

  /// Callback for toggle open on keyboard entry.
  [Parameter] public EventCallback OnEnter { get; set; }

  /// Label for the English word "of"
  [Parameter] public string OfWord { get; set; } = "of";

  [Parameter] public string ToggleTextClass      { get; set; }
  [Parameter] public string ToggleIndicatorClass { get; set; }

  /// Component to be used for wrapping the toggle contents.
  /// Use 'button' when you want all of the toggle text to be clickable.
  [Parameter] public PerPageComponents PerPageComponent { get; set; } = PerPageComponents.div;

  private ToggleTemplateProps CustomToggleTemplateProps => new(FirstIndex, LastIndex, ItemCount, ItemsTitle, OfWord);

  private string CssClass => new CssBuilder()
    .AddClass("pf-c-options-menu__toggle")
    .AddClass("pf-m-disabled", IsDisabled)
    .AddClass("pf-m-plain")
    .AddClass("pf-m-text")
    .Build();

  private string DropdownToggleCssClass { get => IsDiv ? "pf-c-options-menu__toggle-button" : CssClass; }

  private bool IsDiv { get => PerPageComponent is PerPageComponents.div; }
  private string ComponentId { get; set; }
  private string DropdownToggleId
  {
    get => !string.IsNullOrEmpty(OptionsToggleId) ? OptionsToggleId : ComponentId;
  }

  private string DropdownAriaLabel { get => IsDiv ? OptionsToggleText ?? "Items per page" : OptionsToggleText; }

  protected override void OnParametersSet()
  {
    base.OnParametersSet();

    ComponentId = ComponentIdGenerator.Generate($"{WidgetId}-toggle");
  }
}
