@namespace Blatternfly.Components
@using System.Diagnostics.CodeAnalysis
@inject ISequentialIdGenerator SequentialIdGenerator

<div class="@CssClass">
  @if (ShowToggle)
  {
    <span class="pf-c-options-menu__toggle-text">
      @if (ToggleTemplate is not null)
      {
        @ToggleTemplate(CustomToggleTemplateProps)
      }
      else
      {
        <ToggleTemplate
          FirstIndex="@FirstIndex"
          LastIndex="@LastIndex"
          OfWord="@OfWord"
          ItemCount="@ItemCount"
          ItemsTitle="@ItemsTitle"
        />
      }
    </span>
    <DropdownToggle
      OnEnter="@OnEnter"
      AriaLabel="@OptionsToggleText"
      OnToggle="@OnToggle"
      IsDisabled="@(IsDisabled || ItemCount is <= 0)"
      IsOpen="IsOpen"
      id="@InternalOptionsToggleId"
      ToggleClass="pf-c-options-menu__toggle-button"
      ToggleIconClass="pf-c-options-menu__toggle-button-icon"
      ToggleTextClass="pf-c-options-menu__toggle-button-text"
      ToggleIndicatorClass="pf-c-options-menu__toggle-button-icon"
    />
  }
</div>

@code {
  /// Additional attributes that will be applied to the component.
  [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

  /// The type or title of the items being paginated.
  [Parameter] public string ItemsTitle { get; set; } = "items";

  /// Id added to the Options Toggle.
  [Parameter] public string OptionsToggleId { get; set; }

  /// The text to be displayed on the Options Toggle.
  [Parameter] public string OptionsToggleText { get; set; } = "Items per page";

  /// The Title of the Pagination Options Menu.
  [Parameter] public string ItemsPerPageTitle { get; set; } = "Items per page";

  /// The first index of the items being paginated.
  [Parameter] public int FirstIndex { get; set; }

  /// The last index of the items being paginated.
  [Parameter] public int LastIndex { get; set; }

  /// The total number of items being paginated.
  [Parameter] public int? ItemCount { get; set; }

  /// Id added to the title of the Pagination Options Menu.
  [Parameter] public string WidgetId { get; set; }

  /// showToggle.
  [Parameter] public bool ShowToggle { get; set; } = true;

  /// Event function that fires when user clicks the Options Menu toggle.
  [Parameter] public EventCallback<bool> OnToggle { get; set; }

  /// Flag indicating if the Options Menu dropdown is open or not.
  [Parameter] public bool IsOpen { get; set; }

  /// Flag indicating if the Options Menu is disabled.
  [Parameter] public bool IsDisabled { get; set; }

  /// This will be shown in pagination toggle span. You can use firstIndex, lastIndex, itemCount, itemsTitle props.
  [Parameter] public RenderFragment<ToggleTemplateProps> ToggleTemplate { get; set; }

  /// Callback for toggle open on keyboard entry.
  [Parameter] public EventCallback OnEnter { get; set; }

  /// Label for the English word "of"
  [Parameter] public string OfWord { get; set; } = "of";

  private ToggleTemplateProps CustomToggleTemplateProps => new(FirstIndex, LastIndex, ItemCount, ItemsTitle, OfWord);

  private string CssClass => new CssBuilder("pf-c-options-menu__toggle")
    .AddClass("pf-m-disabled", IsDisabled)
    .AddClass("pf-m-plain")
    .AddClass("pf-m-text")
    .Build();

  private string ComponentId { get; set; }

  private string InternalOptionsToggleId
  {
    get => !string.IsNullOrEmpty(OptionsToggleId) ? OptionsToggleId : ComponentId;
  }

  protected override void OnParametersSet()
  {
    base.OnParametersSet();

    ComponentId = SequentialIdGenerator.GenerateId($"{WidgetId}-toggle");
  }
}
