@namespace Blatternfly.Components

<div @attributes="AdditionalAttributes" class="@CssClass">
  @ChildContent
  <span className="pf-u-screen-reader">@ReaderText</span>
</div>

@code {
  /// Additional attributes that will be applied to the component.
  [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

  /// Content rendered inside the component.
  [Parameter] public RenderFragment ChildContent { get; set; }

  /// Variant styles for the banner.
  [Parameter] public BannerVariant Variant { get; set; } = BannerVariant.Default;

  /// If set to true, the banner sticks to the top of its container.
  [Parameter] public bool IsSticky { get; set; }

  /// Text announced by screen readers to indicate the type of banner.
  /// Defaults to "${variant} banner" if this prop is not passed in.
  [Parameter] public string ScreenReaderText { get; set; }

  private string CssClass => new CssBuilder("pf-c-banner")
    .AddClass("pf-m-sticky"  ,  IsSticky)
    .AddClass("pf-m-danger"  ,  Variant is BannerVariant.Danger)
    .AddClass("pf-m-info"    ,  Variant is BannerVariant.Info)
    .AddClass("pf-m-success" ,  Variant is BannerVariant.Success)
    .AddClass("pf-m-warning" ,  Variant is BannerVariant.Warning)
    .AddClassFromAttributes(AdditionalAttributes)
    .Build();

  private string ReaderText { get => !string.IsNullOrEmpty(ScreenReaderText) ? ScreenReaderText : $"{Variant} banner"; }
}