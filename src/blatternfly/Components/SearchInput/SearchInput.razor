@namespace Blatternfly.Components
@inject IComponentIdGenerator ComponentIdGenerator

@if (OnSearch.HasDelegate || Attributes is { Length: > 0 } || OnToggleAdvancedSearch.HasDelegate)
{
  @if (Attributes is { Length: > 0 })
  {
    <div @attributes="AdditionalAttributes" class="@CssClass" id="@Id" @ref="Element">
      <InputGroup>
        <TextInputGroup IsDisabled="@IsDisabled">
          <TextInputGroupMain
            Hint="@Hint"
            Value="@Value"
            Placeholder="@Placeholder"
            AriaLabel="@AriaLabel"
            OnKeyDown="@OnEnter"
            OnChange="@OnChangeHandler"
            @ref="TextInputGroupMainRef"
          >
            <Icon>
              <SearchIcon />
            </Icon>
          </TextInputGroupMain>
          @if (!string.IsNullOrEmpty(Value))
          {
            <TextInputGroupUtilities>
              @if (!string.IsNullOrEmpty(ResultsCount))
              {
                <Badge IsRead>@ResultsCount</Badge>
              }
              @if (OnNextClick.HasDelegate || OnPreviousClick.HasDelegate)
              {
                <div class="pf-c-text-input-group__group">
                  <Button
                    Variant="ButtonVariant.Plain"
                    AriaLabel="@PreviousNavigationButtonAriaLabel"
                    IsDisabled="@IsPreviousButtonDisabled"
                    OnClick="@OnPreviousClick"
                  >
                    <AngleUpIcon />
                  </Button>
                  <Button
                    Variant="ButtonVariant.Plain"
                    Arialabel="@NextNavigationButtonAriaLabel"
                    IsDisabled="@IsNextButtonDisabled"
                    OnClick="@OnNextClick"
                  >
                    <AngleDownIcon />
                  </Button>
                </div>
              }
              @if (OnClear.HasDelegate)
              {
                <Button
                  Variant="ButtonVariant.Plain"
                  IsDisabled="@IsDisabled"
                  AriaLabel="@ResetButtonLabel"
                  OnClick="@OnClearInput"
                >
                  <TimesIcon />
                </Button>
              }
            </TextInputGroupUtilities>
          }
        </TextInputGroup>

        @if (Attributes is { Length: > 0 } || OnToggleAdvancedSearch.HasDelegate)
        {
          <Button
            class="@ToggleAdvancedSearchCssClass"
            Variant="ButtonVariant.Control"
            AriaLabel="@OpenMenuButtonAriaLabel"
            OnClick="@OnToggle"
            IsDisabled="@IsDisabled"
            aria-expanded="@IsSearchMenuOpen"
          >
            <CaretDownIcon />
          </Button>
        }
        @if (OnSearch.HasDelegate)
        {
          <Button
            Type="ButtonType.Submit"
            Variant="ButtonVariant.Control"
            AriaLabel="@SubmitSearchButtonLabel"
            OnClick="@OnSearchHandler"
            IsDisabled="@IsSubmitButtonDisabled"
          >
            <ArrowRightIcon />
          </Button>
        }
      </InputGroup>
      @if (Attributes is { Length: > 0 })
      {
        <CascadingValue Value="this" IsFixed="true">
          <AdvancedSearchMenu
            Value="@Value"
            OnSearch="@OnSearch"
            OnClear="@OnClear"
            OnChange="OnChange"
            OnToggleAdvancedMenu="@OnToggle"
            ResetButtonLabel="@ResetButtonLabel"
            SubmitSearchButtonLabel="@SubmitSearchButtonLabel"
            Attributes="@Attributes"
            FormAdditionalItems="@FormAdditionalItems"
            HasWordsAttrLabel="@HasWordsAttrLabel"
            AdvancedSearchDelimiter="@AdvancedSearchDelimiter"
            GetAttrValueMap="@GetAttrValueMap"
            IsSearchMenuOpen="@IsSearchMenuOpen"
          />
        </CascadingValue>
      }
    </div>
  }
  else
  {
    <InputGroup @attributes="AdditionalAttributes">
      <TextInputGroup IsDisabled="@IsDisabled">
        <TextInputGroupMain
          Hint="@Hint"
          Value="@Value"
          Placeholder="@Placeholder"
          AriaLabel="@AriaLabel"
          OnKeyDown="@OnEnter"
          OnChange="@OnChangeHandler"
          @ref="TextInputGroupMainRef"
        >
          <Icon>
            <SearchIcon />
          </Icon>
        </TextInputGroupMain>
        @if (!string.IsNullOrEmpty(Value))
        {
          <TextInputGroupUtilities>
            @if (!string.IsNullOrEmpty(ResultsCount))
            {
              <Badge IsRead>@ResultsCount</Badge>
            }
            @if (OnNextClick.HasDelegate || OnPreviousClick.HasDelegate)
            {
              <div class="pf-c-text-input-group__group">
                <Button
                  Variant="ButtonVariant.Plain"
                  AriaLabel="@PreviousNavigationButtonAriaLabel"
                  IsDisabled="@IsPreviousButtonDisabled"
                  OnClick="@OnPreviousClick"
                >
                  <AngleUpIcon />
                </Button>
                <Button
                  Variant="ButtonVariant.Plain"
                  AriaLabel="@NextNavigationButtonAriaLabel"
                  IsDisabled="@IsNextButtonDisabled"
                  OnClick="@OnNextClick"
                >
                  <AngleDownIcon />
                </Button>
              </div>
            }
            @if (OnClear.HasDelegate)
            {
              <Button
                Variant="ButtonVariant.Plain"
                IsDisabled="@IsDisabled"
                AriaLabel="@ResetButtonLabel"
                OnClick="@OnClearInput"
              >
                <TimesIcon />
              </Button>
            }
          </TextInputGroupUtilities>
        }
      </TextInputGroup>

      @if (Attributes is { Length: > 0 } || OnToggleAdvancedSearch.HasDelegate)
      {
        <Button
          class="@ToggleAdvancedSearchCssClass"
          Variant="ButtonVariant.Control"
          AriaLabel="@OpenMenuButtonAriaLabel"
          OnClick="@OnToggle"
          IsDisabled="@IsDisabled"
          aria-expanded="@IsSearchMenuOpen"
        >
          <CaretDownIcon />
        </Button>
      }
      @if (OnSearch.HasDelegate)
      {
        <Button
          Type="ButtonType.Submit"
          Variant="ButtonVariant.Control"
          AriaLabel="@SubmitSearchButtonLabel"
          OnClick="@OnSearchHandler"
          IsDisabled="@IsSubmitButtonDisabled"
        >
          <ArrowRightIcon />
        </Button>
      }
    </InputGroup>
  }
}
else
{
  <TextInputGroup IsDisabled="@IsDisabled">
    <TextInputGroupMain
      Hint="@Hint"
      Value="@Value"
      Placeholder="@Placeholder"
      AriaLabel="@AriaLabel"
      OnKeyDown="@OnEnter"
      OnChange="@OnChangeHandler"
      @ref="TextInputGroupMainRef"
    >
      <Icon>
        <SearchIcon />
      </Icon>
    </TextInputGroupMain>
    @if (!string.IsNullOrEmpty(Value))
    {
      <TextInputGroupUtilities>
        @if (!string.IsNullOrEmpty(ResultsCount))
        {
          <Badge IsRead>@ResultsCount</Badge>
        }
        @if (OnNextClick.HasDelegate || OnPreviousClick.HasDelegate)
        {
          <div class="pf-c-text-input-group__group">
            <Button
              Variant="ButtonVariant.Plain"
              AriaLabel="@PreviousNavigationButtonAriaLabel"
              IsDisabled="@IsPreviousButtonDisabled"
              OnClick="@OnPreviousClick"
            >
              <AngleUpIcon />
            </Button>
            <Button
              Variant="ButtonVariant.Plain"
              AriaLabel="@NextNavigationButtonAriaLabel"
              IsDisabled="@IsNextButtonDisabled"
              OnClick="@OnNextClick"
            >
              <AngleDownIcon />
            </Button>
          </div>
        }
        @if (OnClear.HasDelegate)
        {
          <Button
            Variant="ButtonVariant.Plain"
            IsDisabled="@IsDisabled"
            AriaLabel="@ResetButtonLabel"
            OnClick="@OnClearInput"
          >
            <TimesIcon />
          </Button>
        }
      </TextInputGroupUtilities>
    }
  </TextInputGroup>
}