@namespace Blatternfly.Components
@inject IComponentIdGenerator ComponentIdGenerator

@if (ExpandableInput && !IsExpanded)
{
  <InputGroup @attributes="AdditionalAttributes">@ExpandableToggle</InputGroup>;
}
else
{
  @if (OnSearch.HasDelegate || Attributes is { Length: > 0 } || OnToggleAdvancedSearch.HasDelegate)
  {
    @if (Attributes is { Length: > 0 })
    {
      @AdvancedSearchInline
    }
    else
    {
      @SearchTextInputGroupWithExtraButtons
    }
  }
  else
  {
    @if (ExpandableInput) { @ExpandableSearchInput } else { @TextInputGroup }
  }
}

@code {
  private RenderFragment ExpandableToggle =>
    @<Button
      Variant="ButtonVariant.Plain"
      AriaLabel="@ToggleAriaLabel"
      aria-expanded="@IsExpanded"
      OnClick="@OnExpandHandler"
      @ref="SearchInputExpandableToggleRef"
    >
      <Icon>
        @if (IsExpanded) { <TimesIcon /> } else {<SearchIcon /> }
      </Icon>
    </Button>;

  private RenderFragment AdvancedSearch =>
    @<span>
      <CascadingValue Value="this" IsFixed="true">
        <AdvancedSearchMenu
          Value="@Value"
          OnSearch="@OnSearch"
          OnClear="@OnClear"
          OnChange="OnChange"
          OnToggleAdvancedMenu="@OnToggle"
          ResetButtonLabel="@ResetButtonLabel"
          SubmitSearchButtonLabel="@SubmitSearchButtonLabel"
          Attributes="@Attributes"
          FormAdditionalItems="@FormAdditionalItems"
          HasWordsAttrLabel="@HasWordsAttrLabel"
          AdvancedSearchDelimiter="@AdvancedSearchDelimiter"
          GetAttrValueMap="@GetAttrValueMap"
          IsSearchMenuOpen="@IsSearchMenuOpen"
        />
      </CascadingValue>
    </span>;

  private RenderFragment AdvancedSearchInline =>
    @<div @attributes="AdditionalAttributes" class="@CssClass" id="@Id" @ref="Element">
      @SearchTextInputGroupWithExtraButtons
      @AdvancedSearch
    </div>;

  private RenderFragment TextInputGroup =>
    @<TextInputGroup IsDisabled="@IsDisabled">
      <TextInputGroupMain
        Hint="@Hint"
        Value="@Value"
        Placeholder="@Placeholder"
        AriaLabel="@AriaLabel"
        OnKeyDown="@OnEnter"
        OnChange="@OnChangeHandler"
        @ref="TextInputGroupMainRef"
      >
        <Icon><SearchIcon /></Icon>
      </TextInputGroupMain>

      @if (RenderUtilities)
      {
        <TextInputGroupUtilities>
          @if (!string.IsNullOrEmpty(ResultsCount))
          {
            <Badge IsRead>@ResultsCount</Badge>
          }
          @if (OnNextClick.HasDelegate || OnPreviousClick.HasDelegate)
          {
            <div class="pf-c-text-input-group__group">
              <Button
                Variant="ButtonVariant.Plain"
                AriaLabel="@PreviousNavigationButtonAriaLabel"
                IsDisabled="@IsPreviousButtonDisabled"
                OnClick="@OnPreviousClick"
              >
                <AngleUpIcon />
              </Button>
              <Button
                Variant="ButtonVariant.Plain"
                Arialabel="@NextNavigationButtonAriaLabel"
                IsDisabled="@IsNextButtonDisabled"
                OnClick="@OnNextClick"
              >
                <AngleDownIcon />
              </Button>
            </div>
          }
          @if (OnClear.HasDelegate && !ExpandableInput)
          {
            <Button
              Variant="ButtonVariant.Plain"
              IsDisabled="@IsDisabled"
              AriaLabel="@ResetButtonLabel"
              OnClick="@OnClearInput"
            >
              <TimesIcon />
            </Button>
          }
        </TextInputGroupUtilities>
      }
    </TextInputGroup>;

  private RenderFragment SearchTextInputGroupWithExtraButtons =>
    @<InputGroup @attributes="AdditionalAttributes">
      @TextInputGroup
      @if (Attributes is { Length: > 0 } || OnToggleAdvancedSearch.HasDelegate)
      {
        <Button
          class="@ToggleAdvancedSearchCssClass"
          Variant="ButtonVariant.Control"
          AriaLabel="@OpenMenuButtonAriaLabel"
          OnClick="@OnToggle"
          IsDisabled="@IsDisabled"
          aria-expanded="@IsSearchMenuOpen"
        >
          <CaretDownIcon />
        </Button>
      }
      @if (OnSearch.HasDelegate)
      {
        <Button
          Type="ButtonType.Submit"
          Variant="ButtonVariant.Control"
          AriaLabel="@SubmitSearchButtonLabel"
          OnClick="@OnSearchHandler"
          IsDisabled="@IsSubmitButtonDisabled"
        >
          <ArrowRightIcon />
        </Button>
      }
      @if (ExpandableInput)
      {
        @ExpandableToggle
      }
    </InputGroup>;

  private RenderFragment ExpandableSearchInput =>
    @<InputGroup @attributes="AdditionalAttributes">
      @TextInputGroup
      @ExpandableToggle
    </InputGroup>;
}