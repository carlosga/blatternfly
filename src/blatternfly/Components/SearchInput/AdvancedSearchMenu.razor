@namespace Blatternfly.Components
@implements IDisposable
@inject IComponentIdGenerator ComponentIdGenerator
@inject IWindowObserver WindowObserver

@if (IsSearchMenuOpen)
{
  <div class="pf-c-search-input__menu">
    <div class="pf-c-search-input__menu-body">
      <Form Model="@Attributes">
        @foreach (var attr in InternalAttributes)
        {
          @if (Array.IndexOf(Attributes, attr) == 0)
          {
            <FormGroup
              Label="@attr.Display"
              FieldId="@FormatFieldId(attr)"
              @key="attr"
            >
              <TextInput
                Type="TextInputTypes.Text"
                id="@FormatFieldId(attr)"
                Value="@GetValue(attr)"
                ValueExpression="@(() => attr.Attribute)"
                ValueChanged="@((string newValue) => HandleValueChange(attr, newValue))"
                @ref="FirstAttrRef"
              />
            </FormGroup>
          }
          else
          {
            <FormGroup
              Label="@attr.Display"
              FieldId="@FormatFieldId(attr)"
              @key="attr"
            >
              <TextInput
                Type="TextInputTypes.Text"
                id="@FormatFieldId(attr)"
                Value="@GetValue(attr)"
                ValueExpression="@(() => attr.Attribute)"
                ValueChanged="@((string newValue) => HandleValueChange(attr, newValue))"
              />
            </FormGroup>
          }
        }

        @FormAdditionalItems
        <ActionGroup>
          <Button Variant="ButtonVariant.Primary" Type="ButtonType.Submit" OnClick="@OnSearchHandler">
            @SubmitSearchButtonLabel
          </Button>
          @if (OnClear.HasDelegate)
          {
            <Button Variant="ButtonVariant.Link" Type="ButtonType.Reset" OnClick="@OnClear">
              @ResetButtonLabel
            </Button>
          }
        </ActionGroup>
      </Form>
    </div>
  </div>
}

@code {
  [CascadingParameter] public SearchInput Parent { get; set; }

  private TextInput FirstAttrRef { get; set; }

  /// Value of the search input.
  [Parameter] public string Value { get; set; }

  /// Function which builds an attribute-value map by parsing the value in the search input.
  [Parameter] public Func<IDictionary<string, string>> GetAttrValueMap { get; set; }

  /// A callback for when the search button clicked changes.
  [Parameter] public EventCallback<(string, IDictionary<string, string>)> OnSearch { get; set; }

  /// A callback for when the user clicks the clear button.
  [Parameter] public EventCallback<MouseEventArgs> OnClear { get; set; }

  /// A callback for when the input value changes.
  [Parameter] public EventCallback<ChangeEventArgs> OnChange { get; set; }

  /// Function called to toggle the advanced search menu.
  [Parameter] public EventCallback<MouseEventArgs> OnToggleAdvancedMenu { get; set; }

  /// Flag for toggling the open/close state of the advanced search menu.
  [Parameter] public bool IsSearchMenuOpen { get; set; }

  /// Label for the buttons which reset the advanced search form and clear the search input.
  [Parameter] public string ResetButtonLabel { get; set; } = "Reset";

  /// Label for the buttons which called the onSearch event handler.
  [Parameter] public string SubmitSearchButtonLabel { get; set; } = "Search";

  /// Array of attribute values used for dynamically generated advanced search.
  [Parameter] public SearchAttribute[] Attributes { get; set; } = Array.Empty<SearchAttribute>();

  /// Additional elements added after the attributes in the form.
  /// The new form elements can be wrapped in a FormGroup component for automatic formatting.
  [Parameter] public RenderFragment FormAdditionalItems { get; set; }

  /// Attribute label for strings unassociated with one of the provided listed attributes.
  [Parameter] public string HasWordsAttrLabel { get; set; } = "Has words";

  /// Delimiter in the query string for pairing attributes with search values.
  /// Required whenever attributes are passed as props.
  [Parameter] public string AdvancedSearchDelimiter { get; set; }

  private IDisposable _windowClickSubscription;
  private IDisposable _windowKeydownSubscription;

  public void Dispose()
  {
    _windowClickSubscription?.Dispose();
    _windowKeydownSubscription?.Dispose();
  }

  private string RandomId { get; set; }
  private bool PutFocusBackOnInput { get; set; }

  private IEnumerable<SearchAttribute> InternalAttributes
  {
    get
    {
      foreach (var attribute in Attributes)
      {
        yield return attribute;
      }

      yield return new SearchAttribute
      {
        Attribute = "haswords",
        Display   = HasWordsAttrLabel
      };
    }
  }

  protected override void OnInitialized()
  {
      base.OnInitialized();

      RandomId                   = ComponentIdGenerator.Generate();
      _windowClickSubscription   = WindowObserver.OnClick.Subscribe(async e => await OnDocClick(e));
      _windowKeydownSubscription = WindowObserver.OnKeydown.Subscribe(async e => await OnEscPress(e));
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);

    if (IsSearchMenuOpen && !PutFocusBackOnInput)
    {
      await FirstAttrRef.Element.FocusAsync();
      PutFocusBackOnInput = true;
    }
    else if (!IsSearchMenuOpen && PutFocusBackOnInput)
    {
      PutFocusBackOnInput = false;
      if (Parent is not null)
      {
        await Parent.SearchInputInputRef.FocusAsync();
      }
    }
  }

  private async Task OnDocClick(MouseEvent e)
  {
    var clickedWithinSearchInput = e.ComposedPath?.Any(x => x == Parent?.Id);
    if (IsSearchMenuOpen && !clickedWithinSearchInput.GetValueOrDefault())
    {
      await OnToggleAdvancedMenu.InvokeAsync(null);

      if (Parent is not null)
      {
        await Parent.SearchInputInputRef.FocusAsync();
      }
    }
  }

  private async Task OnEscPress(KeyboardEvent e)
  {
    var keyCode = e.Key;
    if (IsSearchMenuOpen && keyCode == Keys.Escape)
    {
      await OnToggleAdvancedMenu.InvokeAsync(null);

      if (Parent is not null)
      {
        await Parent.SearchInputInputRef.FocusAsync();
      }
    }
  }

  private string FormatFieldId(SearchAttribute attribute)
    => $"{attribute.Attribute}_{Array.IndexOf(Attributes, attribute)}";

  private string GetValue(SearchAttribute attribute) => GetValue(attribute.Attribute);

  private string GetValue(string attribute)
  {
    var map = GetAttrValueMap();
    return map.ContainsKey(attribute) ? map[attribute] : string.Empty;
  }

  private async Task HandleValueChange(SearchAttribute attribute, string newValue)
    => await HandleValueChange(attribute.Attribute, newValue);

  private async Task HandleValueChange(string attribute, string newValue)
  {
    var newMap = GetAttrValueMap();
    newMap[attribute] = newValue;
    var updatedValue = string.Empty;

    foreach (var (key, value) in newMap)
    {
      if (!string.IsNullOrEmpty(value?.Trim()))
      {
        updatedValue = (key != "haswords")
          ? $"{updatedValue} {key}{AdvancedSearchDelimiter}{value}"
            : $"{updatedValue} {value}";
      }
    }

    updatedValue = System.Text.RegularExpressions.Regex.Replace(updatedValue, "\\s+", string.Empty);

    if (OnChange.HasDelegate)
    {
      await OnChange.InvokeAsync(new ChangeEventArgs { Value = updatedValue });
    }
  }

  private async Task OnSearchHandler(MouseEventArgs args)
  {
    // event.preventDefault();

    if (OnSearch.HasDelegate)
    {
      await OnSearch.InvokeAsync((Value, GetAttrValueMap()));
    }
    if (IsSearchMenuOpen)
    {
      await OnToggleAdvancedMenu.InvokeAsync(args);
    }
  }
}