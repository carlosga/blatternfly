@namespace Blatternfly.Components
@inherits BaseComponent
@implements IDisposable
@using System.Reactive.Linq
@using Blatternfly.Interop
@inject IWindowObserver WindowObserver

<CascadingValue Value="this">
  <div @attributes="AdditionalAttributes" class="pf-c-page @InternalCssClass">
    @SkipToContent
    @Header
    @Sidebar
    @if (NotificationDrawer is not null)
    {
      <div class="pf-c-page__drawer">
        <Drawer IsExpanded="@IsNotificationDrawerExpanded" OnExpand="@OnNotificationDrawerExpand">
          <DrawerContent>
            <DrawerPanelContent>@NotificationDrawer</DrawerPanelContent>
            <DrawerContentBody>
              <main
                role="@Role"
                id="@MainContainerId"
                class="pf-c-page__main"
                tabindex="@MainTabIndex"
                aria-label="@MainAriaLabel"
                @onclick="HandleMainClick"
              >
                @if (IsGrouped)
                {
                  <PageGroup
                    Sticky="@PageGroupStickyPosition"
                    HasShadowTop="@PageGroupHasShadowTop"
                    HasShadowBottom="@PageGroupHasShadowBottom"
                    HasOverflowScroll="@PageGroupHasOverflowScroll"
                  >
                    @if (IsTertiaryNavGrouped && TertiaryNav is not null)
                    {
                      if (IsTertiaryNavWidthLimited)
                      {
                        <div class="pf-c-page__main-nav pf-m-limit-width">
                          <div class="pf-c-page__main-body">@TertiaryNav</div>
                        </div>
                      }
                      else
                      {
                        <div class="pf-c-page__main-nav">@TertiaryNav</div>;
                      }
                    }
                    @if (IsBreadcrumbGrouped && Breadcrumb is not null)
                    {
                      if (IsBreadcrumbWidthLimited)
                      {
                        <section class="pf-c-page__main-breadcrumb pf-m-limit-width">
                          <div class="pf-c-page__main-body">@Breadcrumb</div>
                        </section>
                      }
                      else
                      {
                        <section class="pf-c-page__main-breadcrumb">
                          @Breadcrumb
                        </section>
                      }
                    }
                    @AdditionalGroupedContent
                  </PageGroup>
                }
                @if (!IsTertiaryNavGrouped && TertiaryNav is not null)
                {
                  if (IsTertiaryNavWidthLimited)
                  {
                    <div class="pf-c-page__main-nav pf-m-limit-width">
                      <div class="pf-c-page__main-body">@TertiaryNav</div>
                    </div>
                  }
                  else
                  {
                    <div class="pf-c-page__main-nav">@TertiaryNav</div>;
                  }
                }
                @if (!IsBreadcrumbGrouped && Breadcrumb is not null)
                {
                  if (IsBreadcrumbWidthLimited)
                  {
                    <section class="pf-c-page__main-breadcrumb pf-m-limit-width">
                      <div class="pf-c-page__main-body">@Breadcrumb</div>
                    </section>
                  }
                  else
                  {
                    <section class="pf-c-page__main-breadcrumb">
                      @Breadcrumb
                    </section>
                  }
                }
                @Content
              </main>
            </DrawerContentBody>
          </DrawerContent>
        </Drawer>
      </div>
    }
    else
    {
      <main
        role="@Role"
        id="@MainContainerId"
        class="pf-c-page__main"
        tabindex="@MainTabIndex"
        aria-label="@MainAriaLabel"
        @onclick="HandleMainClick"
      >
        @if (IsGrouped)
        {
          <PageGroup
            Sticky="@PageGroupStickyPosition"
            HasShadowTop="@PageGroupHasShadowTop"
            HasShadowBottom="@PageGroupHasShadowBottom"
            HasOverflowScroll="@PageGroupHasOverflowScroll"
          >
            @if (IsTertiaryNavGrouped && TertiaryNav is not null)
            {
              if (IsTertiaryNavWidthLimited)
              {
                <div class="pf-c-page__main-nav pf-m-limit-width">
                  <div class="pf-c-page__main-body">@TertiaryNav</div>
                </div>
              }
              else
              {
                <div class="pf-c-page__main-nav">@TertiaryNav</div>;
              }
            }
            @if (IsBreadcrumbGrouped && Breadcrumb is not null)
            {
              if (IsBreadcrumbWidthLimited)
              {
                <section class="pf-c-page__main-breadcrumb pf-m-limit-width">
                  <div class="pf-c-page__main-body">@Breadcrumb</div>
                </section>
              }
              else {
                <section class="pf-c-page__main-breadcrumb">
                  @Breadcrumb
                </section>
              }
            }
            @AdditionalGroupedContent
          </PageGroup>
        }
        @if (!IsTertiaryNavGrouped && TertiaryNav is not null)
        {
          if (IsTertiaryNavWidthLimited)
          {
            <div class="pf-c-page__main-nav pf-m-limit-width">
              <div class="pf-c-page__main-body">@TertiaryNav</div>
            </div>
          }
          else
          {
            <div class="pf-c-page__main-nav">@TertiaryNav</div>;
          }
        }
        @if (!IsBreadcrumbGrouped && Breadcrumb is not null)
        {
          if (IsBreadcrumbWidthLimited)
          {
            <section class="pf-c-page__main-breadcrumb pf-m-limit-width">
              <div class="pf-c-page__main-body">@Breadcrumb</div>
            </section>
          }
          else
          {
            <section class="pf-c-page__main-breadcrumb">
              @Breadcrumb
            </section>
          }
        }
        @Content
      </main>
    }
  </div>
</CascadingValue>

@code {
  /// Page content
  [Parameter] public RenderFragment Content { get; set; }

  /// Header component (e.g. <PageHeader />).
  [Parameter] public RenderFragment Header { get; set; } // PageHeaderComponent

  /// Sidebar component for a side nav (e.g. <PageSidebar />).
  [Parameter] public RenderFragment Sidebar { get; set; } // PageSidebarComponent

  /// Notification drawer component for an optional notification drawer (e.g. <NotificationDrawer />)
  [Parameter] public RenderFragment NotificationDrawer { get; set; }

  /// Flag indicating Notification drawer in expanded.
  [Parameter] public bool IsNotificationDrawerExpanded { get; set; }

  /// Flag indicating if breadcrumb width should be limited.
  [Parameter] public bool IsBreadcrumbWidthLimited { get; set; }

  /// Skip to content component for the page.
  [Parameter] public RenderFragment SkipToContent { get; set; }  // SkipToContent

  /// Sets the value for role on the <main /> element.
  [Parameter] public string Role { get; set; }

  /// an id to use for the [role="main"] element.
  [Parameter] public string MainContainerId { get; set; }

  /// tabIndex to use for the [role="main"] element, null to unset it.
  [Parameter] public int MainTabIndex { get; set; } = -1;

  /// If true, manages the sidebar open/close state and there is no need to pass the isNavOpen boolean into
  /// the sidebar component or add a callback onNavToggle function into the PageHeader component
  [Parameter] public bool IsManagedSidebar { get; set; }

  /// Flag indicating if tertiary nav width should be limited.
  [Parameter] public bool IsTertiaryNavWidthLimited { get; set; }

  /// If true, the managed sidebar is initially open for desktop view.
  [Parameter] public bool DefaultManagedSidebarIsOpen { get; set; } = true;

  /// Can add callback to be notified when resize occurs, for example to set the sidebar isNav prop to false for a width < 768px
  [Parameter] public EventCallback<PageResizeEventArgs> OnPageResize { get; set; }

  /// Breadcrumb component for the page.
  [Parameter] public RenderFragment Breadcrumb { get; set; }

  /// Tertiary nav component for the page.
  [Parameter] public RenderFragment TertiaryNav { get; set; }

  /// Accessible label, can be used to name main section.
  [Parameter] public string MainAriaLabel { get; set; }

  /// Flag indicating if the tertiaryNav should be in a group.
  [Parameter] public bool IsTertiaryNavGrouped { get; set; }

  /// Flag indicating if the breadcrumb should be in a group.
  [Parameter] public bool IsBreadcrumbGrouped { get; set; }

  /// Additional content of the group.
  [Parameter] public RenderFragment AdditionalGroupedContent { get; set; }

  /// Additional props of the group.
  [Parameter] public StickyPosition? PageGroupStickyPosition { get; set; }

  /// Modifier indicating if PageGroup should have a shadow at the top.
  [Parameter] public bool PageGroupHasShadowTop { get; set; }

  /// Modifier indicating if PageGroup should have a shadow at the bottom.
  [Parameter] public bool PageGroupHasShadowBottom { get; set; }

  /// Flag indicating if the PageGroup has a scrolling overflow.
  [Parameter] public bool PageGroupHasOverflowScroll { get; set; }

  /// Callback when notification drawer panel is finished expanding.
  [Parameter] public EventCallback OnNotificationDrawerExpand { get; set; }

  [Parameter] public bool DesktopIsNavOpen { get; set; }
  [Parameter] public bool MobileIsNavOpen  { get; set; }

  [Parameter] public EventCallback<bool> DesktopIsNavOpenChanged { get; set; }
  [Parameter] public EventCallback<bool> MobileIsNavOpenChanged { get; set; }

  private bool IsGrouped
  {
    get => IsTertiaryNavGrouped || IsBreadcrumbGrouped || AdditionalGroupedContent is not null;
  }

  private IDisposable _resizeSubscription;

  public void Dispose()
  {
    _resizeSubscription?.Dispose();
  }

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();

    _resizeSubscription = WindowObserver
      .OnResize
      .Throttle(TimeSpan.FromMilliseconds(250))
      .Subscribe(async r => await OnWindowResize(r));
  }

  protected override void OnInitialized()
  {
    base.OnInitialized();

    DesktopIsNavOpen = !IsManagedSidebar || DefaultManagedSidebarIsOpen;
    MobileIsNavOpen  = false;
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);
    if (firstRender)
    {
      var windowSize = await WindowObserver.GetWindowSizeAsync();
      var isMobile   = await IsMobile();
      await OnPageResize.InvokeAsync(new PageResizeEventArgs(isMobile, windowSize));
    }
  }

  private async Task<bool> IsMobile()
  {
    var windowSize  = await WindowObserver.GetWindowSizeAsync();
    var windowWidth = WindowObserver.CanUseDom ? windowSize.Width : 1200;

    return windowWidth < GlobalBreakpoints.ExtraLarge;
  }

  private async Task HandleMainClick(MouseEventArgs args)
  {
    var isMobile = await IsMobile();
    if (isMobile && MobileIsNavOpen)
    {
      MobileIsNavOpen = false;
      await MobileIsNavOpenChanged.InvokeAsync(MobileIsNavOpen);
    }
  }

  private async Task OnWindowResize(ResizeEvent e)
  {
    var mobileView = await IsMobile();
    await OnPageResize.InvokeAsync(new PageResizeEventArgs(mobileView, e.InnerSize));
    StateHasChanged();
  }
}