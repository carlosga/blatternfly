@namespace Blatternfly.Components
@inherits BaseComponent

<header @attributes="AdditionalAttributes" class="@CssClass" role="@Role">
  @if (ShowNavToggle || Logo is not null)
  {
  <div class="pf-c-page__header-brand">
    @if (ShowNavToggle)
    {
    <div class="pf-c-page__header-brand-toggle">
      <Button
        id="nav-toggle"
        OnClick="@NavToggle"
        AriaLabel="@AriaLabel"
        aria-controls="page-sidebar"
        aria-expanded="@AriaExpanded"
        Variant="ButtonVariant.Plain"
      >
        <BarsIcon />
      </Button>
    </div>
    }
    @if (Logo is not null)
    {
      @if (LogoComponent == LogoComponent.a)
      {
        <a class="pf-c-page__header-brand-link">@Logo</a>
      }
      else
      {
        <div class="pf-c-page__header-brand-link">@Logo</div>
      }
    }
  </div>
  }
  @if (TopNav is not null)
  {
  <div class="pf-c-page__header-nav">@TopNav</div>
  }
  @HeaderTools
</header>

@code {
  /// Component to render the logo/brand (e.g. <Brand />).
  [Parameter] public RenderFragment Logo { get; set; }

  /// Component to use to wrap the passed <logo />.
  [Parameter] public LogoComponent LogoComponent { get; set; } = LogoComponent.a;

  /// Component to render the toolbar (e.g. <Toolbar />).
  [Parameter] public RenderFragment HeaderTools { get; set; }

  /// Component to render the avatar (e.g. <Avatar />.
  [Parameter] public RenderFragment TopNav { get; set; }

  /// True to show the nav toggle button (toggles side nav).
  [Parameter] public bool ShowNavToggle { get; set; }

  /// True if the side nav is shown.
  [Parameter] public bool IsNavOpen { get; set; } = true;

  /// Sets the value for role on the <main /> element.
  [Parameter] public string Role { get; set; }

  /// Callback function to handle the side nav toggle button, managed by the Page component if the Page isManagedSidebar prop is set to true.
  [Parameter] public EventCallback<bool> OnNavToggle { get; set; }

  /// Aria Label for the nav toggle button.
  [Parameter] public string AriaLabel { get; set; } = "Global navigation";

  private string CssClass => new CssBuilder("pf-c-page__header")
    .AddClassFromAttributes(AdditionalAttributes)
    .Build();

  private string AriaExpanded { get => IsNavOpen ? "true" : "false"; }

  private async Task NavToggle(MouseEventArgs args)
  {
    IsNavOpen = !IsNavOpen;
    await OnNavToggle.InvokeAsync(IsNavOpen);
  }
}