@namespace Blatternfly.Components

<section @attributes="AdditionalAttributes" class="@CssClass" tabindex="@TabIndex">
  @if (IsWidthLimited)
  {
    <div class="pf-c-page__main-body">@ChildContent</div>
  }
  else
  {
    @ChildContent
  }
</section>

@code {
  /// Parent Nav control
  [CascadingParameter] public Page ParentPage { get; set; }

  /// Additional attributes that will be applied to the component.
  [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

  /// Content rendered inside the component.
  [Parameter] public RenderFragment ChildContent { get; set; }

  /// Section background color variant.
  [Parameter] public PageSectionVariants Variant { get; set; } = PageSectionVariants.Default;

  /// Section type variant.
  [Parameter] public PageSectionType Type { get; set; } = PageSectionType.Default;

  /// Enables the page section to fill the available vertical space.
  [Parameter] public bool? IsFilled { get; set; }

  /// Limits the width of the breadcrumb.
  [Parameter] public bool IsWidthLimited { get; set; }

  /// Flag indicating if the section content is center aligned. isWidthLimited must be set for this to work.
  [Parameter] public bool IsCenterAligned { get; set; }

  /** Modifier indicating if the PageBreadcrumb is sticky to the top or bottom at various breakpoints */
  [Parameter] public StickyPositionModifiers StickyOnBreakpoint { get; set ;}

  /// Flag indicating if PageBreadcrumb should have a shadow at the top.
  [Parameter] public bool HasShadowTop { get; set; }

  /// Flag indicating if PageBreadcrumb should have a shadow at the bottom.
  [Parameter] public bool HasShadowBottom { get; set; }

  /// Flag indicating if the PageBreadcrumb has a scrolling overflow.
  [Parameter] public bool HasOverflowScroll { get; set; }

  /// Padding at various breakpoints.
  [Parameter] public PaddingModifiers Padding { get; set; }

  private string CssClass => new CssBuilder()
    .AddClass("pf-c-page__main-section"   , Type is PageSectionType.Default)
    .AddClass("pf-c-page__main-nav"       , Type is PageSectionType.Nav)
    .AddClass("pf-c-page__main-subnav"    , Type is PageSectionType.SubNav)
    .AddClass("pf-c-page__main-breadcrumb", Type is PageSectionType.Breadcrumb)
    .AddClass("pf-c-page__main-tabs"      , Type is PageSectionType.Tabs)
    .AddClass("pf-c-page__main-wizard"    , Type is PageSectionType.Wizard)
    .AddClass(Padding?.CssClass())
    .AddClass(StickyOnBreakpoint?.CssClass(ParentPage?.VerticalBreakpoint))
    .AddClass("pf-m-light"                , Variant is PageSectionVariants.Light)
    .AddClass("pf-m-dark-200"             , Variant is PageSectionVariants.Dark)
    .AddClass("pf-m-dark-100"             , Variant is PageSectionVariants.Darker)
    .AddClass("pf-m-fill"                 , IsFilled.HasValue && IsFilled.Value)
    .AddClass("pf-m-no-fill"              , IsFilled.HasValue && !IsFilled.Value)
    .AddClass("pf-m-limit-width"          , IsWidthLimited)
    .AddClass("pf-m-align-center"         , IsCenterAligned && Type is not PageSectionType.SubNav)
    .AddClass("pf-m-shadow-top"           , HasShadowTop)
    .AddClass("pf-m-shadow-bottom"        , HasShadowBottom)
    .AddClass("pf-m-overflow-scroll"      , HasOverflowScroll)
    .AddClassFromAttributes(AdditionalAttributes)
    .Build();

  private string TabIndex { get => HasOverflowScroll ? "0" : null; }
}