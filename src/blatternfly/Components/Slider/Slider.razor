@namespace Blatternfly.Components
@using System.Globalization
@using Microsoft.JSInterop
@inherits BaseComponent

@inject IJSRuntime JS

<div 
  class="pf-c-slider @DisabledClass" 
  style="@Style" 
  @attributes="AdditionalAttributes"
  @onmousemove="@HandleMouseMove"
  @onmouseup="@HandleMouseUp"  
>
  @if (@LeftActions is not null) { <div class="pf-c-slider__actions">@LeftActions</div> }
  <div class="pf-c-slider__main">
    <div class="pf-c-slider__rail" @ref="SliderRailRef" @onclick="OnSliderRailClick">
      <div class="pf-c-slider__rail-track" />
    </div>
    @if (HasCustomSteps)
    {
      <div class="pf-c-slider__steps" aria-hidden="true">
        @foreach (var stepObj in CustomSteps)
        {
        <SliderStep
          Key="@stepObj.Value"
          Value="@stepObj.Value"
          Label="@stepObj.Label"
          IsLabelHidden="@stepObj.IsLabelHidden"
          IsActive="@(stepObj.Value <= Value)"
        />
        }
      </div>
    }
    @if (!HasCustomSteps && (ShowTicks || ShowBoundaries))
    {
      <div class="pf-c-slider__steps" aria-hidden="true">
        @for (decimal i = Min, stepValue = 0.0M; i <= Max; i += Step, stepValue = ((i - Min) * 100) / (Max - Min)) 
        {
          // If we boundaries but not ticks just generate the needed steps
          // so that we don't pullute them DOM with empty divs
          @if (!ShowTicks && ShowBoundaries && i == Min && i != Max) 
          {
            continue;
          }
          
          <SliderStep
            Key="i"
            Value="@stepValue"
            Label="@i.ToString(CultureInfo.InvariantCulture)"
            IsTickHidden="@(!ShowTicks)"
            IsLabelHidden="@((i == Min || i == Max) && ShowBoundaries ? false : true)"
            IsActive="@(i <= Value)"
          />
        }
      </div>
    }
    <div
      class="pf-c-slider__thumb"
      @ref="ThumbRef"
      tabIndex="@TabIndex"
      role="slider"
      aria-valuemin="@ValueMin"
      aria-valuemax="@ValueMax"
      aria-valuenow="@Value"
      aria-valuetext="@AriaTextValue"
      aria-label="@ThumbAriaLabel"
      aria-disabled="@AriaDisabled"
      style="@ThumbStyle"
      @onmousedown="@HandleMouseDown"
      @onmousedown:stopPropagation="true"
      @onmousedown:preventDefault="true"
      @onmouseup="@HandleMouseUp"
      @onkeydown="@HandleThumbKeys"
      @onkeydown:preventDefault="true"
      @onclick="@OnThumbClick"
    />
    @if (IsInputVisible && InputPosition == SliderInputPosition.AboveThumb)
    {
      <div class="pf-c-slider__value pf-m-floating">
        @if (!string.IsNullOrEmpty(InputLabel))
        {
          <InputGroup>
            <NumberInput
              class="pf-c-form-control"
              IsDisabled="@IsDisabled"
              type="number"
              @bind-Value="@InputValue"
              aria-label="@InputAriaLabel"
              @onkeydown="@HandleKeyPressOnInput"
              @onblur="OnBlur"
            />
            <InputGroupText Variant="InputGroupTextVariant.Plain">@InputLabel</InputGroupText>
          </InputGroup>
        } 
        else 
        {
          <NumberInput
            class="pf-c-form-control"
            IsDisabled="@IsDisabled"
            type="number"
            @bind-Value="@InputValue"
            aria-label="@InputAriaLabel"
            @onkeydown="@HandleKeyPressOnInput"
            @onblur="OnBlur"
          />
        }        
      </div>
    }
  </div>
  @if (IsInputVisible && InputPosition == SliderInputPosition.Right)
  {
    <div class="pf-c-slider__value">
      @if (!string.IsNullOrEmpty(InputLabel))
      {
        <InputGroup>
          <NumberInput
            class="pf-c-form-control"
            IsDisabled="@IsDisabled"
            type="number"
            @bind-Value="@InputValue"
            aria-label="@InputAriaLabel"
            @onkeydown="@HandleKeyPressOnInput"
            @onblur="OnBlur"
          />
          <InputGroupText Variant="InputGroupTextVariant.Plain">@InputLabel</InputGroupText>
        </InputGroup>
      } 
      else 
      {
        <NumberInput
          class="pf-c-form-control"
          IsDisabled="@IsDisabled"
          type="number"
          @bind-Value="@InputValue"
          aria-label="@InputAriaLabel"
          @onkeydown="@HandleKeyPressOnInput"
          @onblur="OnBlur"
        />
      }
    </div>
  }
  
  @if (RightActions is not null) { <div class="pf-c-slider__actions">@RightActions</div> }
</div>

@code {
  private ElementReference SliderRailRef { get; set; }
  private ElementReference ThumbRef { get; set; }
  
  /// Current value .
  [Parameter] public decimal Value { get; set; } = 0.0M;
  
  /// Flag indicating if the slider is is discrete for custom steps.  This will cause the slider to snap to the closest value.
  [Parameter] public bool AreCustomStepsContinuous { get; set; }
  
  /// Adds disabled styling and disables the slider and the input component is present.
  [Parameter] public bool IsDisabled { get; set; }
  
  /// The step interval*/
  [Parameter] public decimal Step { get; set; } = 1.0M;
  
  /// Minimum permitted value.
  [Parameter] public decimal Min { get; set; } = 0.0M;
  
  /// The maximum permitted value.
  [Parameter] public decimal Max { get; set; } = 100.0M;
  
  /// Flag to indicate if boundaries should be shown for slider that does not have custom steps.
  [Parameter] public bool ShowBoundaries { get; set; } = true;
  
  /// Flag to indicate if ticks should be shown for slider that does not have custom steps .
  [Parameter] public bool ShowTicks { get; set; }
  
  /// Array of custom slider step objects (value and label of each step) for the slider..
  [Parameter] public SliderStepObject[] CustomSteps { get; set; }
  
  /// Flag to show value input field.
  [Parameter] public bool IsInputVisible { get; set; }
  
  /// Value displayed in the input field.
  [Parameter] public decimal InputValue { get; set; } = 0.0M;
  
  /// Aria label for the input field.
  [Parameter] public string InputAriaLabel { get; set; } = "Slider value input";
  
  /// Aria label for the thumb.
  [Parameter] public string ThumbAriaLabel { get; set; } = "Value";
  
  /// Label that is place after the input field.
  [Parameter] public string InputLabel { get; set; }
  
  /// Position of the input.
  [Parameter] public SliderInputPosition InputPosition { get; set; } = SliderInputPosition.Right;
  
  /// Value change callback. This is called when the slider value changes.
  [Parameter] public EventCallback<SliderChangedEventArgs> OnChange { get; set; }
  
  /// Actions placed to the left of the slider.
  [Parameter] public RenderFragment LeftActions { get; set; }
  
  /// Actions placed to the right of the slider.
  [Parameter] public RenderFragment RightActions { get; set; }

  private decimal GetPercentage(decimal current, decimal max) => (100.0M * current) / max;

  private bool    HasCustomSteps { get => CustomSteps != null && CustomSteps.Length > 0; }
  private decimal StylePercent   { get => ((Value - Min) * 100.0M) / (Max - Min); }
  private string  Style          { get => $"--pf-c-slider--value: {StylePercent}%;"; }
  private string  ThumbStyle     { get; set; }
  private string   DisabledClass { get => IsDisabled ? "pf-m-disabled" : null; }
  
  private bool     IsDragging { get; set; }
  private int      TabIndex     { get => IsDisabled ? -1 : 0; }
  private decimal? SnapValue    { get; set; }
  private decimal  Diff         { get; set; }
  private decimal  ValueMin     { get => HasCustomSteps ? CustomSteps[0].Value : Min; }
  private decimal  ValueMax     { get => HasCustomSteps ? CustomSteps[^1].Value : Max; }
  private string   AriaDisabled { get => IsDisabled ? "true" : null; }
  private string   AriaTextValue
  {
    get
    {
      if (!AreCustomStepsContinuous && HasCustomSteps) 
      {
        var matchingStep = CustomSteps.SingleOrDefault(stepObj => stepObj.Value == Value);
        if (matchingStep is not null) 
        {
          return matchingStep.Label;
        }
      }
      return Value.ToString(CultureInfo.InvariantCulture);      
    }
  }
      
  private async Task OnSliderRailClick(MouseEventArgs args)
  {
    if (IsDisabled)
    {
      return;
    }
    
    await HandleThumbMove(args);
    if (SnapValue.HasValue && !AreCustomStepsContinuous) 
    {
      ThumbStyle = $"--pf-c-slider--value: {SnapValue}%";
      Value      = SnapValue.Value;
      if (OnChange.HasDelegate)
      {
        await OnChange.InvokeAsync(new SliderChangedEventArgs { Value = SnapValue.Value });
      }
    }
  }
  
  private async Task OnThumbClick(MouseEventArgs args)
  {
    if (IsDisabled)
    {
      return;
    }
    await ThumbRef.FocusAsync();
  }
  
  private async Task HandleMouseDown(MouseEventArgs args)
  {
    if (IsDisabled)
    {
      return;
    }

    var boudingClientRect = await JS.InvokeAsync<BoundingClientRect>("getBoundingClientRect", ThumbRef);
    
    Diff       = (decimal)args.ClientX - (decimal)boudingClientRect.Left;
    IsDragging = true;
  }
  
  private async Task HandleMouseMove(MouseEventArgs args)
  {
    if (!IsDragging)
    {
      return;
    }
    
    await HandleThumbMove(args);
  }
  
  private Task HandleMouseOut(MouseEventArgs args)
  {
    IsDragging = false;
    Diff       = 0;
    
    Console.WriteLine("HandleMouseOut");
    
    return Task.CompletedTask;
  }

  private Task HandleMouseUp(MouseEventArgs args)
  {
    IsDragging = false;
    Diff       = 0;
    
    return Task.CompletedTask;
  }
  
  private async Task HandleThumbKeys(KeyboardEventArgs args)
  {
    if (IsDisabled)
    {
      return;
    }
    
    var key = args.Key;
    if (key != "ArrowLeft" && key != "ArrowRight")
    {
      return;
    }

    var newValue = Value;
    if (!AreCustomStepsContinuous && HasCustomSteps) 
    {
      var currentStep = CustomSteps.SingleOrDefault(stepObj => stepObj.Value == Value);
      var stepIndex = Array.IndexOf(CustomSteps, currentStep);
      if (key == "ArrowRight") 
      {
        if (stepIndex + 1 < CustomSteps.Length) 
        {
            newValue = CustomSteps[stepIndex + 1].Value;
        }
      } 
      else if (key == "ArrowLeft")
      {
        if (stepIndex - 1 >= 0) 
        {
          newValue = CustomSteps[stepIndex - 1].Value;
        }
      }
    } 
    else 
    {
      if (key == "ArrowRight") 
      {
        newValue = Value + Step <= Max ? Value + Step : Max;
      } 
      else if (key == "ArrowLeft") 
      {
        newValue = Value - Step >= Min ? Value - Step : Min;
      }
    }

    if (newValue != Value) 
    {
      ThumbStyle = $"--pf-c-slider--value:{newValue}%;";
      Value = newValue;
      if (OnChange.HasDelegate) 
      {
        await OnChange.InvokeAsync(new SliderChangedEventArgs { Value = Value });
      }
    }
  }
  
  private async Task HandleKeyPressOnInput(KeyboardEventArgs args)
  {
    if (args.Key == "Enter")
    {
      // event.preventDefault();
      if (OnChange.HasDelegate) 
      {
        await OnChange.InvokeAsync(new SliderChangedEventArgs { Value = Value, InputValue = InputValue });
      }
    }
  }  
  
  private async Task OnBlur()
  {
    if (OnChange.HasDelegate) 
    {
      await OnChange.InvokeAsync(new SliderChangedEventArgs { Value = Value, InputValue = InputValue });
    }
  }
  
  private async Task HandleThumbMove<T>(T e) where T: EventArgs
  {
    var clientPosition = e switch
    {
      TouchEventArgs te => te.Touches.Length > 0 ? (decimal)te.Touches[0].ClientX : 0.0M,
      MouseEventArgs me => (decimal)me.ClientX,
      _                 => throw new InvalidOperationException()
    };
    
    var boudingClientRect = await JS.InvokeAsync<BoundingClientRect>("getBoundingClientRect", SliderRailRef);
    var soffsetWidth      = await JS.InvokeAsync<double>("offsetWidth", SliderRailRef);
    var toffsetWidth      = await JS.InvokeAsync<double>("offsetWidth", ThumbRef);
    
    var newPosition = clientPosition - Diff - (decimal)boudingClientRect.Left;
    var end         = (decimal)soffsetWidth - (decimal)toffsetWidth;
    var start       = 0.0M;

    if (newPosition < start) 
    {
      newPosition = 0;
    }

    if (newPosition > end) 
    {
      newPosition = end;
    }

    var newPercentage = GetPercentage(newPosition, end);
    
    ThumbStyle = $"--pf-c-slider--value:{newPercentage}%";
    
    // convert percentage to value
    var newValue = (newPercentage * (Max - Min)) / 100 + Min;
    
    Value = newValue;

    if (!HasCustomSteps) 
    {
      // snap to new value if not custom steps
      SnapValue  = Math.Round((newValue - Min) / Step) * Step + Min;
      ThumbStyle = $"--pf-c-slider--value:{SnapValue}%";
      Value      = SnapValue.Value;
    }

    // If custom steps are discrete, snap to closest step value.
    if (!AreCustomStepsContinuous && HasCustomSteps) 
    {
      var currentStep = CustomSteps.FirstOrDefault(stepObj => stepObj.Value >= newPercentage);
      var stepIndex = Array.IndexOf(CustomSteps, currentStep);
      if (CustomSteps[stepIndex].Value == newPercentage) 
      {
        SnapValue = CustomSteps[stepIndex].Value;
      } 
      else
      {
        var midpoint = (CustomSteps[stepIndex].Value + CustomSteps[stepIndex - 1].Value) / 2;
        if (midpoint > newPercentage) 
        {
          SnapValue = CustomSteps[stepIndex - 1].Value;
        } 
        else 
        {
          SnapValue = CustomSteps[stepIndex].Value;
        }
      }
      Value = SnapValue.Value;
    }

    // Call onchange callback
    if (OnChange.HasDelegate) 
    {
      if (SnapValue.HasValue)
      {
        await OnChange.InvokeAsync(new SliderChangedEventArgs{ Value = SnapValue.Value});
      } else {
        await OnChange.InvokeAsync(new SliderChangedEventArgs{ Value = newValue});
      }
    }
  }
}
