@namespace Blatternfly.Components
@using System.Globalization
@inject IDomUtils DomUtils

<div
  @attributes="AdditionalAttributes"
  class="@CssClass"
  style="@CssStyle"
  @onmousemove="@HandleMouseMove"
  @onmouseup="@HandleMouseUp"
  @onmouseleave="@HandleMouseLeave"
>
  @if (@LeftActions is not null) { <div class="pf-c-slider__actions">@LeftActions</div> }
  <div class="pf-c-slider__main">
    <div class="pf-c-slider__rail" @ref="SliderRailRef" @onclick="OnSliderRailClick">
      <div class="pf-c-slider__rail-track" />
    </div>
    @if (HasCustomSteps)
    {
      <div class="pf-c-slider__steps" aria-hidden="true">
        @foreach (var stepObj in CustomSteps)
        {
          <SliderStep
            @key="@stepObj.Value"
            Value="@(GetStepValue(stepObj.Value, CustomSteps[0].Value, CustomSteps[^1].Value))"
            Label="@stepObj.Label"
            IsLabelHidden="@stepObj.IsLabelHidden"
            IsActive="@(stepObj.Value <= Value)"
          />
        }
      </div>
    }
    @if (!HasCustomSteps && (ShowTicks || ShowBoundaries))
    {
      <div class="pf-c-slider__steps" aria-hidden="true">
        @for (decimal i = Min, stepValue = 0.0M; i <= Max; i += Step, stepValue = ((i - Min) * 100) / (Max - Min))
        {
          @if (!ShowTicks && ShowBoundaries && i == Min && i != Max)
          {
            continue;
          }

          <SliderStep
            @key="i"
            Value="@stepValue"
            Label="@i.ToString(CultureInfo.InvariantCulture)"
            IsTickHidden="@(!ShowTicks)"
            IsLabelHidden="@((i == Min || i == Max) && ShowBoundaries ? false : true)"
            IsActive="@(i <= Value)"
          />
        }
      </div>
    }
    <div
      class="pf-c-slider__thumb"
      @ref="ThumbRef"
      tabindex="@TabIndex"
      role="slider"
      aria-valuemin="@AriaValueMin"
      aria-valuemax="@AriaValueMax"
      aria-valuenow="@AriaValueNow"
      aria-valuetext="@AriaValueText"
      aria-label="@ThumbAriaLabel"
      aria-disabled="@AriaDisabled"
      style="@ThumbStyle"
      @onmousedown="@HandleMouseDown"
      @onmousedown:stopPropagation="true"
      @onmousedown:preventDefault="true"
      @onmouseup="@HandleMouseUp"
      @onkeydown="@HandleThumbKeys"
      @onkeydown:preventDefault="true"
      @onclick="@OnThumbClick"
    />
    @if (IsInputVisible && InputPosition == SliderInputPosition.AboveThumb)
    {
      <div class="pf-c-slider__value pf-m-floating">
        @if (!string.IsNullOrEmpty(InputLabel))
        {
          <InputGroup>
            <NumberInput
              Variant="NumberInputVariant.NoStepButtons"
              class="pf-c-form-control"
              IsDisabled="@IsDisabled"
              type="number"
              @bind-Value="@InputValue"
              InputAriaLabel="@InputAriaLabel"
              @onkeydown="@HandleKeyPressOnInput"
              @onblur="OnBlur"
            />
            <InputGroupText Variant="InputGroupTextVariant.Plain">@InputLabel</InputGroupText>
          </InputGroup>
        }
        else
        {
          <NumberInput
            Variant="NumberInputVariant.NoStepButtons"
            class="pf-c-form-control"
            IsDisabled="@IsDisabled"
            type="number"
            @bind-Value="@InputValue"
            InputAriaLabel="@InputAriaLabel"
            @onkeydown="@HandleKeyPressOnInput"
            @onblur="OnBlur"
          />
        }
      </div>
    }
  </div>
  @if (IsInputVisible && InputPosition is SliderInputPosition.Right)
  {
    <div class="pf-c-slider__value">
      @if (!string.IsNullOrEmpty(InputLabel))
      {
        <InputGroup>
          <NumberInput
            Variant="NumberInputVariant.NoStepButtons"
            class="pf-c-form-control"
            IsDisabled="@IsDisabled"
            type="number"
            @bind-Value="@InputValue"
            InputAriaLabel="@InputAriaLabel"
            @onkeydown="@HandleKeyPressOnInput"
            @onblur="OnBlur"
          >
            @InputLabel
          </NumberInput>
          <InputGroupText Variant="InputGroupTextVariant.Plain">@InputLabel</InputGroupText>
        </InputGroup>
      }
      else
      {
        <NumberInput
          Variant="NumberInputVariant.NoStepButtons"
          class="pf-c-form-control"
          IsDisabled="@IsDisabled"
          type="number"
          @bind-Value="@InputValue"
          InputAriaLabel="@InputAriaLabel"
          @onkeydown="@HandleKeyPressOnInput"
          @onblur="OnBlur"
        >
          @InputLabel
        </NumberInput>
      }
    </div>
  }

  @if (RightActions is not null) { <div class="pf-c-slider__actions">@RightActions</div> }
</div>

@code {
  /// Additional attributes that will be applied to the component.
  [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

  /// Content rendered inside the component.
  [Parameter] public RenderFragment ChildContent { get; set; }

  private ElementReference SliderRailRef { get; set; }
  private ElementReference ThumbRef      { get; set; }

  /// Current value.
  [Parameter] public decimal Value { get; set; }

  /// Form control value changed event callback.
  [Parameter] public EventCallback<decimal> ValueChanged { get; set; }

  /// Value displayed in the input field.
  [Parameter] public decimal InputValue { get; set; }

  /// Value change callback. This is called when the slider input value changes.
  [Parameter] public EventCallback<SliderInputValueChangedEventArgs> InputValueChanged { get; set; }

  /// Flag indicating if the slider is discrete for custom steps.  This will cause the slider to snap to the closest value.
  [Parameter] public bool AreCustomStepsContinuous { get; set; }

  /// Adds disabled styling and disables the slider and the input component is present.
  [Parameter] public bool IsDisabled { get; set; }

  /// The step interval*/
  [Parameter] public decimal Step { get; set; } = 1.0M;

  /// Minimum permitted value.
  [Parameter] public decimal Min { get; set; }

  /// The maximum permitted value.
  [Parameter] public decimal Max { get; set; } = 100.0M;

  /// Flag to indicate if boundaries should be shown for slider that does not have custom steps.
  [Parameter] public bool ShowBoundaries { get; set; } = true;

  /// Flag to indicate if ticks should be shown for slider that does not have custom steps .
  [Parameter] public bool ShowTicks { get; set; }

  /// Array of custom slider step objects (value and label of each step) for the slider..
  [Parameter] public SliderStepObject[] CustomSteps { get; set; }

  /// Flag to show value input field.
  [Parameter] public bool IsInputVisible { get; set; }

  /// Aria label for the input field.
  [Parameter] public string InputAriaLabel { get; set; } = "Slider value input";

  /// Aria label for the thumb.
  [Parameter] public string ThumbAriaLabel { get; set; } = "Value";

  /// Label that is place after the input field.
  [Parameter] public string InputLabel { get; set; }

  /// Position of the input.
  [Parameter] public SliderInputPosition InputPosition { get; set; } = SliderInputPosition.Right;

  /// Actions placed to the left of the slider.
  [Parameter] public RenderFragment LeftActions { get; set; }

  /// Actions placed to the right of the slider.
  [Parameter] public RenderFragment RightActions { get; set; }

  private string CssStyle => new StyleBuilder()
    .AddStyle("--pf-c-slider--value"                             , StylePercent.ToString(CultureInfo.InvariantCulture) + '%')
    .AddStyle("--pf-c-slider__value--c-form-control--width-chars", InputValue.ToString(CultureInfo.InvariantCulture).Length)
    .AddStyleFromAttributes(AdditionalAttributes)
    .Build();

  private string CssClass => new CssBuilder("pf-c-slider")
    .AddClass("pf-m-disabled", IsDisabled)
    .AddClassFromAttributes(AdditionalAttributes)
    .Build();

  private decimal CurrentValue
  {
    get => Value;
    set
    {
      if (!EqualityComparer<decimal>.Default.Equals(value, Value))
      {
        Value = value;
        _ = ValueChanged.InvokeAsync(Value);
        StateHasChanged();
      }
    }
  }

  private decimal GetStepValue(decimal val, decimal min, decimal max) => ((val - min) * 100) / (max - min);
  private decimal GetPercentage(decimal current, decimal max) => (100.0M * current) / max;

  private bool     HasCustomSteps { get => CustomSteps is { Length: > 0 }; }
  private decimal  StylePercent   { get => ((CurrentValue - Min) * 100.0M) / (Max - Min); }
  private string   ThumbStyle     { get; set; }
  private bool     IsDragging     { get; set; }
  private int      TabIndex       { get => IsDisabled ? -1 : 0; }
  private decimal? SnapValue      { get; set; }
  private decimal  Diff           { get; set; }
  private decimal  ValueMin       { get => HasCustomSteps ? CustomSteps[0].Value : Min; }
  private decimal  ValueMax       { get => HasCustomSteps ? CustomSteps[^1].Value : Max; }
  private string   AriaDisabled   { get => IsDisabled ? "true" : "false"; }
  private string   AriaValueMin   { get => Min.ToString(CultureInfo.InvariantCulture); }
  private string   AriaValueMax   { get => Max.ToString(CultureInfo.InvariantCulture); }
  private string   AriaValueNow   { get => Value.ToString(CultureInfo.InvariantCulture); }
  private string   AriaValueText
  {
    get
    {
      if (!AreCustomStepsContinuous && HasCustomSteps)
      {
        var matchingStep = CustomSteps.SingleOrDefault(stepObj => stepObj.Value == CurrentValue);
        if (matchingStep is not null)
        {
          return matchingStep.Label;
        }
      }
      return CurrentValue.ToString(CultureInfo.InvariantCulture);
    }
  }

  private async Task OnSliderRailClick(MouseEventArgs args)
  {
    if (IsDisabled)
    {
      return;
    }

    await HandleThumbMove(args);

    if (SnapValue.HasValue && !AreCustomStepsContinuous)
    {
      ThumbStyle   = $"--pf-c-slider--value: {SnapValue?.ToString(CultureInfo.InvariantCulture)}%";
      CurrentValue = SnapValue.Value;
    }
  }

  private async Task OnThumbClick(MouseEventArgs args)
  {
    if (IsDisabled)
    {
      return;
    }
    await ThumbRef.FocusAsync();
  }

  private async Task HandleMouseDown(MouseEventArgs args)
  {
    if (IsDisabled)
    {
      return;
    }

    var boudingClientRect = await DomUtils.GetBoundingClientRectAsync(ThumbRef);

    Diff       = (decimal)args.ClientX - (decimal)boudingClientRect.Left;
    IsDragging = true;
  }

  private async Task HandleMouseMove(MouseEventArgs args)
  {
    if (!IsDragging)
    {
      return;
    }

    await HandleThumbMove(args);
  }

  private Task HandleMouseUp(MouseEventArgs args)
  {
    IsDragging = false;
    Diff       = 0;

    return Task.CompletedTask;
  }

  private Task HandleMouseLeave()
  {
    if (IsDragging)
    {
      IsDragging = false;
      Diff       = 0;
    }

    return Task.CompletedTask;
  }

  private void HandleThumbKeys(KeyboardEventArgs args)
  {
    if (IsDisabled)
    {
      return;
    }

    var key = args.Key;
    if (key != Keys.ArrowLeft && key != Keys.ArrowRight)
    {
      return;
    }

    var newValue = CurrentValue;
    if (!AreCustomStepsContinuous && HasCustomSteps)
    {
      var currentStep = CustomSteps.SingleOrDefault(stepObj => stepObj.Value == CurrentValue);
      var stepIndex = Array.IndexOf(CustomSteps, currentStep);
      if (key == Keys.ArrowRight)
      {
        if (stepIndex + 1 < CustomSteps.Length)
        {
            newValue = CustomSteps[stepIndex + 1].Value;
        }
      }
      else if (key == Keys.ArrowLeft)
      {
        if (stepIndex - 1 >= 0)
        {
          newValue = CustomSteps[stepIndex - 1].Value;
        }
      }
    }
    else
    {
      if (key == Keys.ArrowRight)
      {
        newValue = CurrentValue + Step <= Max ? CurrentValue + Step : Max;
      }
      else if (key == Keys.ArrowLeft)
      {
        newValue = CurrentValue - Step >= Min ? CurrentValue - Step : Min;
      }
    }

    if (newValue != CurrentValue)
    {
      ThumbStyle   = $"--pf-c-slider--value:{newValue.ToString(CultureInfo.InvariantCulture)}%;";
      CurrentValue = newValue;
    }
  }

  private async Task HandleKeyPressOnInput(KeyboardEventArgs args)
  {
    if (args.Key == Keys.Enter)
    {
      if (InputValueChanged.HasDelegate)
      {
        await InputValueChanged.InvokeAsync(new SliderInputValueChangedEventArgs { Value = CurrentValue, InputValue = InputValue });
      }
    }
  }

  private async Task OnBlur()
  {
    if (InputValueChanged.HasDelegate)
    {
      await InputValueChanged.InvokeAsync(new SliderInputValueChangedEventArgs { Value = CurrentValue, InputValue = InputValue });
    }
  }

  private async Task HandleThumbMove<T>(T e) where T: EventArgs
  {
    var clientPosition = e switch
    {
      TouchEventArgs te => te.Touches.Length > 0 ? (decimal)te.Touches[0].ClientX : 0.0M,
      MouseEventArgs me => (decimal)me.ClientX,
      _                 => throw new InvalidOperationException()
    };

    var sliderClientRect = await DomUtils.GetBoundingClientRectAsync(SliderRailRef);
    var sliderOffset     = await DomUtils.GetOffsetSizeAsync(SliderRailRef);
    var thumbOffset      = await DomUtils.GetOffsetSizeAsync(ThumbRef);

    var newPosition = clientPosition - Diff - (decimal)sliderClientRect.Left;
    var end         = (decimal)sliderOffset.Width - (decimal)thumbOffset.Width;
    var start       = 0.0M;

    if (newPosition < start)
    {
      newPosition = 0.0M;
    }

    if (newPosition > end)
    {
      newPosition = end;
    }

    var newPercentage = GetPercentage(newPosition, end);

    ThumbStyle = $"--pf-c-slider--value:{newPercentage.ToString(CultureInfo.InvariantCulture)}%";

    // convert percentage to value
    var newValue = Math.Round(((newPercentage * (Max - Min)) / 100 + Min) * 100) / 100;

    CurrentValue = newValue;

    if (!HasCustomSteps)
    {
      // snap to new value if not custom steps
      SnapValue    = Math.Round((Math.Round((newValue - Min) / Step) * Step + Min) * 100) / 100;
      ThumbStyle   = $"--pf-c-slider--value:{SnapValue?.ToString(CultureInfo.InvariantCulture)}%";
      CurrentValue = SnapValue.Value;
    }

    // If custom steps are discrete, snap to closest step value.
    if (!AreCustomStepsContinuous && HasCustomSteps)
    {
      var percentage = newPercentage;
      if (CustomSteps[^1].Value != 100.0M)
      {
        var numSteps          = CustomSteps.Length - 1;
        var percentagePerStep = 100.0M / numSteps;
        percentage = newPercentage / percentagePerStep;
      }
      var currentStep  = CustomSteps.FirstOrDefault(stepObj => stepObj.Value >= percentage);
      var stepIndex    = Array.IndexOf(CustomSteps, currentStep);
      if (CustomSteps[stepIndex].Value == percentage)
      {
        SnapValue = CustomSteps[stepIndex].Value;
      }
      else
      {
        var midpoint = (CustomSteps[stepIndex].Value + CustomSteps[stepIndex - 1].Value) / 2;
        SnapValue = midpoint > percentage ? CustomSteps[stepIndex - 1].Value : CustomSteps[stepIndex].Value;
      }
      CurrentValue = SnapValue.Value;
    }
  }
}
