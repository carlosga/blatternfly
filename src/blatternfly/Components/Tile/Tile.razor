@namespace Blatternfly.Components

<div
  @attributes="AdditionalAttributes"
  role="option"
  aria-selected="@AriaSelected"
  class="@CssClass"
  tabindex="0"
>
  <div class="@HeaderCssClass">
    @if (Icon is not null)
    {
      <div class="pf-c-tile__icon">@Icon</div>
    }
    <div class="pf-c-tile__title">@Title</div>
  </div>
  @if (ChildContent is not null)
  {
    <div class="pf-c-tile__body">@ChildContent</div>
  }
</div>

@code {
  /// Additional attributes that will be applied to the component.
  [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

  /// Content rendered inside the component.
  [Parameter] public RenderFragment ChildContent { get; set; }

  /// Title of the tile.
  [Parameter] public string Title { get; set; }

  /// Icon in the tile title.
  [Parameter] public RenderFragment Icon { get; set; }

  /// Flag indicating if the tile is selected.
  [Parameter] public bool IsSelected { get; set; }

  /// Flag indicating if the tile is disabled.
  [Parameter] public bool IsDisabled { get; set; }

  /// Flag indicating if the tile header is stacked.
  [Parameter] public bool IsStacked { get; set; }

  /// Flag indicating if the stacked tile icon is large.
  [Parameter] public bool IsDisplayLarge { get; set; }

  private string CssClass => new CssBuilder("pf-c-tile")
    .AddClass("pf-m-selected"  , IsSelected)
    .AddClass("pf-m-disabled"  , IsDisabled)
    .AddClass("pf-m-display-lg", IsDisplayLarge)
    .AddClassFromAttributes(AdditionalAttributes)
    .Build();

  private string HeaderCssClass => new CssBuilder("pf-c-tile__header")
    .AddClass("pf-m-stacked", IsStacked)
    .Build();

  private string AriaSelected { get => IsSelected ? "true" : null; }
}