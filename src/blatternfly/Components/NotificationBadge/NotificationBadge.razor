@namespace Blatternfly.Components

<Button Variant="ButtonVariant.Plain" OnClick="@OnClick" AriaLabel="@AriaLabel" @attributes="AdditionalAttributes">
  <span class="@CssClass">
    @if (ChildContent is not null)
    {
      @ChildContent
    }
    else if (Variant is NotificationBadgeVariant.Attention)
    {
      @if (AttentionIcon is not null)
      {
        @AttentionIcon
      }
      else
      {
        <AttentionBellIcon />
      }
    }
    else
    {
      @if (Icon is not null)
      {
        @Icon
      }
      else
      {
        <BellIcon />
      }
    }
    @if (Count.GetValueOrDefault() > 0)
    {
      <span class="pf-c-notification-badge__count">@Count</span>
    }
  </span>
</Button>

@code {
  /// Additional attributes that will be applied to the component.
  [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

  /// Content rendered inside the component.
  [Parameter] public RenderFragment ChildContent { get; set; }

  /// Determines the variant of the notification badge.
  [Parameter] public NotificationBadgeVariant Variant { get; set; }

  /// A number displayed in the badge alongside the icon.
  [Parameter] public int? Count { get; set; }

  /// Adds accessible text to the Notification Badge.
  [Parameter] public string AriaLabel { get; set; }

  /// Icon to display for attention variant.
  [Parameter] public RenderFragment AttentionIcon { get; set; }

  /// Icon do display in notification badge.
  [Parameter] public RenderFragment Icon { get; set; }

  [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }

  private string CssClass => new CssBuilder("pf-c-notification-badge")
    .AddClass("pf-m-attention", Variant is NotificationBadgeVariant.Attention)
    .AddClass("pf-m-read"     , Variant is NotificationBadgeVariant.Read)
    .AddClass("pf-m-unread"   , Variant is NotificationBadgeVariant.Unread)
    .Build();
}