@namespace Blatternfly.Components
@inherits BaseComponent
@inject IRandomIdGenerator RandomIdGenerator
@inject IDomUtils DomUtils

@typeparam TItem

@if (Items is not null && Items.Count > 0)
{
  <div
    class="@CssClass"
    role="group"
    aria-labelledby="@AriaLabelledByValue"
    aria-label="@AriaLabelValue"
  >
    <div class="pf-c-chip-group__main">
      @if (!string.IsNullOrEmpty(CategoryName))
      {
        @if (ShouldRenderTooltip)
        {
          <Tooltip id="@TooltipId" Reference="@ChipGroupId" Position="@TooltipPosition" IsVisible="@IsTooltipVisible">
            <Content>
              @CategoryName
            </Content>
            <ChildContent>
              <span
                tabIndex="0"
                class="pf-c-chip-group__label"
                aria-label="@CategoryName"
                @onmouseover="HandleMouseOver"
                @onmouseout="HandleMouseOut"
                @ref="HeadingRef"
              >
                <span id="@ChipGroupId">@CategoryName</span>
              </span>
            </ChildContent>
          </Tooltip>
        }
        else
        {
          <span
            class="pf-c-chip-group__label"
            aria-hidden="true"
            id="@ChipGroupId"
            @ref="HeadingRef"
          >
            @CategoryName
          </span>
        }
      }
      <ul
        class="pf-c-chip-group__list"
        aria-labelledby="@AriaLabelledByValue"
        aria-label="@AriaLabelValue"
        role="list"
      >
        @foreach (var item in Slice)
        {
          <li class="pf-c-chip-group__list-item" @key="item">
            @ItemTemplate(item)
          </li>
        }
        @if (Items.Count > NumChips)
        {
          <li class="pf-c-chip-group__list-item">
            <Chip
              IsOverflowChip
              OnClick="@OnOverflowChipClicked"
              Component="button"
            >
              @if (IsOpen)
              {
                @ExpandedText
              }
              else
              {
                @CollapsedTextResult
              }
            </Chip>
          </li>
        }
      </ul>
    </div>
    @if (IsClosable)
    {
      <div class="pf-c-chip-group__close">
        <Button
          Variant="ButtonVariant.Plain"
          AriaLabel="@CloseBtnAriaLabel"
          OnClick="@OnClick"
          id="@CloseButtonId"
          aria-labelledby="@CloseButtonAriaLabelledBy"
        >
          <TimesCircleIcon aria-hidden="true" />
        </Button>
      </div>
    }
  </div>
}

@code {
  /// Flag for having the chip group default to expanded.
  [Parameter] public bool DefaultIsOpen { get; set; }

  /// Customizable "Show Less" text string.
  [Parameter] public string ExpandedText { get; set; } = "Show Less";

  /// Customizable template string. Use placeholder "${0}" for the overflow chip count.
  [Parameter] public string CollapsedText { get; set; } = "{0} more";

  /// Category name text for the chip group category.  If this prop is supplied the chip group with have a label and category styling applied.
  [Parameter] public string CategoryName { get; set; }

  /// Aria label for chip group that does not have a category name.
  [Parameter] public string AriaLabel { get; set; } = "Chip group category";

  /// Set number of chips to show before overflow.
  [Parameter] public int NumChips { get; set; } = 3;

  /// Flag if chip group can be closed.
  [Parameter] public bool IsClosable { get; set; }

  /// Aria label for close button.
  [Parameter] public string CloseBtnAriaLabel { get; set; } = "Close chip group";

  /// Function that is called when clicking on the chip group close button.
  [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }

  /// Function that is called when clicking on the overflow (expand/collapse) chip button.
  [Parameter] public EventCallback<MouseEventArgs> OnOverflowChipClick { get; set; }

  /// Item template
  [Parameter] public RenderFragment<TItem> ItemTemplate { get; set; }

  /// Chip Group items.
  [Parameter] public IReadOnlyList<TItem> Items { get; set; }

  /// Position of the tooltip which is displayed if text is truncated.
  [Parameter] public TooltipPosition TooltipPosition { get; set; } = TooltipPosition.Top;

  private string CssClass => new CssBuilder("pf-c-chip-group")
      .AddClass("pf-m-category", !string.IsNullOrEmpty(CategoryName))
      .AddClassFromAttributes(AdditionalAttributes)
      .Build();

  private string _id;
  private string ChipGroupId               { get => !string.IsNullOrEmpty(InternalId) ? InternalId : _id; }
  private string CloseButtonId             { get => $"remove_group_{ChipGroupId}"; }
  private string CloseButtonAriaLabelledBy { get => $"remove_group_{ChipGroupId} {ChipGroupId}"; }
  private string AriaLabelledByValue       { get => !string.IsNullOrEmpty(CategoryName) ? ChipGroupId : null; }
  private string AriaLabelValue            { get => string.IsNullOrEmpty(CategoryName) ? AriaLabel : null; }
  private string CollapsedTextResult       { get => string.Format(CollapsedText, Items.Count - NumChips); }
  private bool   IsOpen                    { get; set; }

  private string TooltipId           { get => $"{ChipGroupId}-tooltip"; }
  private bool   IsTooltipVisible    { get; set; }
  private bool   ShouldRenderTooltip { get; set; }

  private ElementReference HeadingRef { get; set; }

  private IEnumerable<TItem> Slice { get => !IsOpen ? Items.Take(NumChips) : Items; }

  protected override void OnInitialized()
  {
    base.OnInitialized();

    _id = RandomIdGenerator.GenerateId("pf-c-chip__group");
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);

    if (firstRender)
    {
      ShouldRenderTooltip = await DomUtils.HasTruncatedWidth(HeadingRef);
      if (ShouldRenderTooltip)
      {
        StateHasChanged();
      }
    }
  }

  private async Task ToggleCollapse()
  {
    IsOpen              = !IsOpen;
    ShouldRenderTooltip = await DomUtils.HasTruncatedWidth(HeadingRef);
  }

  private async Task OnOverflowChipClicked(MouseEventArgs args)
  {
    await ToggleCollapse();
    await OnOverflowChipClick.InvokeAsync(args);
  }

  private void HandleMouseOver(MouseEventArgs _)
  {
    IsTooltipVisible = true;
  }

  private void HandleMouseOut(MouseEventArgs _)
  {
    IsTooltipVisible = false;
  }
}