@namespace Blatternfly.Components
@inherits BaseComponent
@using System.Reactive.Linq
@using Blatternfly.Interop
@implements IDisposable
@inject IWindowObserver WindowObserver

<div @attributes="AdditionalAttributes" class="pf-c-overflow-menu">
  <CascadingValue Value="@IsBelowBreakpoint" Name="IsBelowBreakpoint">
    @ChildContent
  </CascadingValue>
</div>

@code {
  /// Indicates breakpoint at which to switch between horizontal menu and vertical dropdown.
  [Parameter] public Breakpoints Breakpoint { get; set; }

  private bool IsBelowBreakpoint { get; set; }

  private IDisposable _resizeSubscription;

  public void Dispose()
  {
    _resizeSubscription?.Dispose();
  }

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();

    _resizeSubscription = WindowObserver
      .OnResize
      .Throttle(TimeSpan.FromMilliseconds(250))
      .Subscribe(OnWindowResize);
  }

  protected override async Task OnParametersSetAsync()
  {
    await base.OnParametersSetAsync();

    var windowSize = await WindowObserver.GetWindowSizeAsync();
    HandleResize(windowSize);
  }

  private void OnWindowResize(ResizeEvent e)
  {
    HandleResize(e.InnerSize);
  }

  private void HandleResize(Size<int> size)
  {
    var breakpointWidth = Breakpoint switch
    {
      Breakpoints.Medium      => GlobalBreakpoints.Medium,
      Breakpoints.Large       => GlobalBreakpoints.Large,
      Breakpoints.ExtraLarge  => GlobalBreakpoints.ExtraLarge,
      Breakpoints.ExtraLarge2 => GlobalBreakpoints.ExtraLarge2,
      _                       => throw new InvalidOperationException("OverflowMenu will not be visible without a valid breakpoint.")
    };
    IsBelowBreakpoint = size.Width < breakpointWidth;
    StateHasChanged();
  }
}

