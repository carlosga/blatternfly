@namespace Blatternfly.Components
@implements IDisposable
@using System.Reactive.Linq
@inject IDomUtils DomUtils
@inject IWindowObserver WindowObserver

<div @attributes="AdditionalAttributes" class="@CssClass">
  <CascadingValue Value="@IsBelowBreakpoint" Name="IsBelowBreakpoint" IsFixed="true">
    @ChildContent
  </CascadingValue>
</div>

@code {
  /// Additional attributes that will be applied to the component.
  [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

  /// Content rendered inside the component.
  [Parameter] public RenderFragment ChildContent { get; set; }

  /// Indicates breakpoint at which to switch between horizontal menu and vertical dropdown.
  [Parameter] public Breakpoint Breakpoint { get; set; }

  private string CssClass => new CssBuilder("pf-c-overflow-menu")
    .AddClassFromAttributes(AdditionalAttributes)
    .Build();

  private bool IsBelowBreakpoint { get; set; }
  private IDisposable _resizeSubscription;

  public void Dispose()
  {
    _resizeSubscription?.Dispose();
  }

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();

    _resizeSubscription = WindowObserver
      .OnResize
      .Throttle(TimeSpan.FromMilliseconds(250))
      .Subscribe(OnWindowResize);
  }

  protected override async Task OnParametersSetAsync()
  {
    await base.OnParametersSetAsync();

    var windowSize = await DomUtils.GetWindowSizeAsync();
    HandleResize(windowSize);
  }

  private void OnWindowResize(ResizeEvent e)
  {
    HandleResize(e.InnerSize);
  }

  private void HandleResize(Size<int> size)
  {
    var breakpointWidth = Breakpoint switch
    {
      Breakpoint.Medium      => GlobalBreakpoints.Medium,
      Breakpoint.Large       => GlobalBreakpoints.Large,
      Breakpoint.ExtraLarge  => GlobalBreakpoints.ExtraLarge,
      Breakpoint.ExtraLarge2 => GlobalBreakpoints.ExtraLarge2,
      _                      => throw new InvalidOperationException("OverflowMenu will not be visible without a valid breakpoint.")
    };
    IsBelowBreakpoint = size.Width < breakpointWidth;
    StateHasChanged();
  }
}
