@namespace Blatternfly.Components
@inherits BaseComponent

<td @attributes="AdditionalAttributes" data-label="@DataLabelValue" class="@CssClass" style="@CssStyle">
  @if (Select is not null)
  {
    <Selectable
      OnSelect="@OnSelect"
      SelectVariant="@Select.Variant"
      IsHeaderSelectDisabled="@Select.Disable"
      IsSelected="@Select.IsSelected"
      RowIndex="@Select.RowIndex"
    >
      @ChildContent
    </Selectable>
  }
  else if (Expand is not null)
  {
    <Collapsible
      OnCollapse="@OnToggle"
      RowIndex="@Expand.RowIndex"
      ColumnIndex="@Expand.ColumnIndex"
      IsOpen="@Expand.IsExpanded"
    >
      @ChildContent
    </Collapsible>
  }
  else
  {
    @ChildContent
  }
</td>

@code {
  /// The column header the cell corresponds to.
  /// This attribute replaces table header in mobile viewport. It is rendered by ::before pseudo element.
  [Parameter] public string DataLabel { get; set; }

  /// Modifies cell to center its contents.
  [Parameter] public bool TextCenter { get; set; }

  /// Style modifier to apply.
  [Parameter] public WrapModifier? Modifier { get; set; }

  /// Width percentage modifier.
  [Parameter] public TableCellWidth? Width { get; set; }

  /// Visibility breakpoint modifiers.
  [Parameter] public Visibility Visibility { get; set; }

  /// True to remove padding.
  [Parameter] public bool NoPadding { get; set; }

  /// Renders a checkbox select.
  [Parameter] public SelectType Select { get; set; }

  /// Callback on select.
  [Parameter] public EventCallback<SelectEventArgs> OnSelect { get; set; }

  /// Indicates the header column should be sticky.
  [Parameter] public bool IsStickyColumn { get; set; }

  /// Adds a border to the right side of the cell.
  [Parameter] public bool HasRightBorder { get; set; }

  /// Minimum width for a sticky column.
  [Parameter] public string StickyMinWidth { get; set; } = "120px";

  /// Left offset of a sticky column. This will typically be equal to the combined value set by stickyMinWidth of any sticky columns that precede the current sticky column.
  [Parameter] public string StickyLeftOffset { get; set; }

  /// Turns the cell into an expansion toggle and determines if the corresponding expansion row is open.
  [Parameter] public ExpandType Expand { get; set; }

  /// On toggling the expansion.
  [Parameter] public EventCallback<CollapseEventArgs> OnToggle { get; set; }

  private string CssStyle => new StyleBuilder()
    .AddStyle("--pf-c-table__sticky-column--MinWidth", StickyMinWidth  , IsStickyColumn && !string.IsNullOrEmpty(StickyMinWidth))
    .AddStyle("--pf-c-table__sticky-column--Left"    , StickyLeftOffset, IsStickyColumn && !string.IsNullOrEmpty(StickyLeftOffset))
    .Build();

  private string CssClass => new CssBuilder()
    .AddClass("pf-c-table__toggle"       , Expand is not null)
    .AddClass("pf-m-center"              , TextCenter)
    .AddClass("pf-m-no-padding"          , NoPadding)
    .AddClass("pf-c-table__sticky-column", IsStickyColumn)
    .AddClass("pf-m-border-right"        , HasRightBorder)
    .AddClass(Visibility?.CssClass())
    .AddClass("pf-m-break-word"          , Modifier == WrapModifier.BreakWord)
    .AddClass("pf-m-fit-content"         , Modifier == WrapModifier.FitContent)
    .AddClass("pf-m-nowrap"              , Modifier == WrapModifier.Nowrap)
    .AddClass("pf-m-truncate"            , Modifier == WrapModifier.Truncate)
    .AddClass("pf-m-wrap"                , Modifier == WrapModifier.Wrap)
    .AddClass("pf-m-width-10"            , Width == TableCellWidth.W10)
    .AddClass("pf-m-width-15"            , Width == TableCellWidth.W15)
    .AddClass("pf-m-width-20"            , Width == TableCellWidth.W20)
    .AddClass("pf-m-width-25"            , Width == TableCellWidth.W25)
    .AddClass("pf-m-width-30"            , Width == TableCellWidth.W30)
    .AddClass("pf-m-width-35"            , Width == TableCellWidth.W35)
    .AddClass("pf-m-width-40"            , Width == TableCellWidth.W40)
    .AddClass("pf-m-width-45"            , Width == TableCellWidth.W45)
    .AddClass("pf-m-width-50"            , Width == TableCellWidth.W50)
    .AddClass("pf-m-width-60"            , Width == TableCellWidth.W60)
    .AddClass("pf-m-width-70"            , Width == TableCellWidth.W70)
    .AddClass("pf-m-width-80"            , Width == TableCellWidth.W80)
    .AddClass("pf-m-width-90"            , Width == TableCellWidth.W90)
    .AddClass("pf-m-width-100"           , Width == TableCellWidth.W100)
    .AddClassFromAttributes(AdditionalAttributes)
    .Build();

  private string DataLabelValue
  {
    get
    {
      var cssClass = GetPropertyValue("class");
      if (string.IsNullOrEmpty(cssClass) || !cssClass.Contains("pf-c-table__tree-view-title-cell"))
      {
        return DataLabel;
      }
      return null;
    }
  }
}
