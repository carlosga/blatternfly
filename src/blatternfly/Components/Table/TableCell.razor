@namespace Blatternfly.Components
@inherits BaseComponent

<td
  data-label="@DataLabelValue"
  class="@ExpandClass @TextCenterClass @NoPaddingClass @VisibilityClass @WrapModifierClass @WidthClass"
  @attributes="AdditionalAttributes">
  @if (Select is not null)
  {
    <Selectable
      OnSelect="@OnSelect"
      SelectVariant="@Select.Variant"
      DisableSelection="@Select.Disable"
      IsSelected="@Select.IsSelected"
      RowIndex="@Select.RowIndex"
    >
      @ChildContent
    </Selectable>
  }
  else if (Expand is not null)
  {
    <Collapsible
      OnCollapse="@OnToggle"
      RowIndex="@Expand.RowIndex" 
      ColumnIndex="@Expand.ColumnIndex"
      IsOpen="@Expand.IsExpanded"
    >
      @ChildContent
    </Collapsible>
  }
  else
  {
    @ChildContent 
  }
</td>

@code {
  /// The column header the cell corresponds to.
  /// This attribute replaces table header in mobile viewport. It is rendered by ::before pseudo element.
  [Parameter] public string DataLabel { get; set; }
  
  /// Modifies cell to center its contents.
  [Parameter] public bool TextCenter { get; set; }
  
  /// Style modifier to apply.
  [Parameter] public WrapModifier? Modifier { get; set; }
  
  /// Width percentage modifier.
  [Parameter] public TableCellWidth? Width { get; set; }
  
  /// Visibility breakpoint modifiers.
  [Parameter] public Visibility Visibility { get; set; }
  
  /// True to remove padding.
  [Parameter] public bool NoPadding { get; set; }  
  
  /// Renders a checkbox select.
  [Parameter] public SelectType Select { get; set; }  
  
  /// Callback on select.
  [Parameter] public EventCallback<SelectEventArgs> OnSelect { get; set; }  
  
  /// Turns the cell into an expansion toggle and determines if the corresponding expansion row is open.
  [Parameter] public ExpandType Expand { get; set; }  
  
  /// On toggling the expansion.
  [Parameter] public EventCallback<CollapseEventArgs> OnToggle { get; set; }

  private string DataLabelValue
  {
    get
    {
      if (string.IsNullOrEmpty(InternalCssClass) || !InternalCssClass.Contains("pf-c-table__tree-view-title-cell"))
      {
        return DataLabel;
      }
      return null;
    }
  }
  private string TextCenterClass { get => TextCenter ? "pf-m-center" : null; }
  private string NoPaddingClass  { get => NoPadding ? "pf-m-no-padding" : null; }
  private string VisibilityClass { get => Visibility?.CssClass; }
  private string WrapModifierClass
  {
    get => Modifier switch
    {
      WrapModifier.BreakWord  => "pf-m-break-word",
      WrapModifier.FitContent => "pf-m-fit-content",
      WrapModifier.Nowrap     => "pf-m-nowrap",
      WrapModifier.Truncate   => "pf-m-truncate",
      WrapModifier.Wrap       => "pf-m-wrap",
      _                            => null
    };
  }
  private string WidthClass
  {
    get => Width switch
    {
      TableCellWidth.W10  => "pf-m-width-10",
      TableCellWidth.W15  => "pf-m-width-15",
      TableCellWidth.W20  => "pf-m-width-20",
      TableCellWidth.W25  => "pf-m-width-25",
      TableCellWidth.W30  => "pf-m-width-30",
      TableCellWidth.W35  => "pf-m-width-35",
      TableCellWidth.W40  => "pf-m-width-40",
      TableCellWidth.W45  => "pf-m-width-45",
      TableCellWidth.W50  => "pf-m-width-50",
      TableCellWidth.W60  => "pf-m-width-60",
      TableCellWidth.W70  => "pf-m-width-70",
      TableCellWidth.W80  => "pf-m-width-80",
      TableCellWidth.W90  => "pf-m-width-90",
      TableCellWidth.W100 => "pf-m-width-100",
      _                   => null
    };
  }  
  private string ExpandClass { get => Expand is not null ? "pf-c-table__toggle" : null; }
}
