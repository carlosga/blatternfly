@namespace Blatternfly.Components

@typeparam TRow

@if (Rows is null || !Rows.Any())
{
  <tbody @attributes="AdditionalAttributes" role="rowgroup">
    @EmptyTemplate
  </tbody>
}
else if (ExpandableRowTemplate is not null)
{
  @foreach (var item in Rows)
  {
    @ExpandableRowTemplate(item)
  }
}
else
{
  <tbody @attributes="AdditionalAttributes" class="@CssClass" role="rowgroup">
    @foreach (var item in Rows)
    {
      @RowTemplate(item)
    }
  </tbody>
}

@code {
  /// Additional attributes that will be applied to the component.
  [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

  /// Content rendered inside the component.
  [Parameter] public RenderFragment ChildContent { get; set; }

  /// Empty Template.
  [Parameter] public RenderFragment EmptyTemplate { get; set; }

  /// Row template.
  [Parameter] public RenderFragment<TRow> RowTemplate { get; set; }

  /// Expandable Row template.
  [Parameter] public RenderFragment<TRow> ExpandableRowTemplate { get; set; }

  /// Row data.
  [Parameter] public IEnumerable<TRow> Rows { get; set; }

  /// Modifies the body to allow for expandable rows.
  [Parameter] public bool IsExpanded { get; set; }

  /// Flag indicating the <tbody> contains oddly striped rows.
  [Parameter] public bool IsOddStriped { get; set; }

  /// Flag indicating the <tbody> contains evenly striped rows.
  [Parameter] public bool IsEvenStriped { get; set; }

  private string CssClass => new CssBuilder()
    .AddClass(""                 , IsExpanded)
    .AddClass("pf-m-striped"     , IsOddStriped)
    .AddClass("pf-m-striped-even", IsEvenStriped)
    .AddClassFromAttributes(AdditionalAttributes)
    .Build();
}