@namespace Blatternfly.Components

<CascadingValue Value="this" IsFixed="true">
  <table
    @attributes="AdditionalAttributes"
    aria-label="@AriaLabel"
    role="@TableRole"
    class="@CssClass"
    @ref="Element"
  >
    @if (NestedHeaderColumnSpans is { Length: > 0 })
    {
      @for (int i = 0; i < NestedHeaderColumnSpans.Length; ++i)
      {
        if (NestedHeaderColumnSpans[i] == 1)
        {
          <col @key="i" />
        }
        else
        {
          <colgroup @key="i" span="@NestedHeaderColumnSpans[i]" />
        }
      }
    }
    @if (HasSelectableRowCaption && HasSelectableRows)
    {
      <caption>
        <div class="pf-screen-reader">
          @SelectableRowsScreenReaderText
        </div>
      </caption>
    }
    @ChildContent
  </table>
</CascadingValue>

@code {
  /// Additional attributes that will be applied to the component.
  [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

  /// Content rendered inside the component.
  [Parameter] public RenderFragment ChildContent { get; set; }

  public ElementReference Element { get; protected  set; }

  /// Adds an accessible name for the Table.
  [Parameter] public string AriaLabel { get; set; }

  /// Style variant for the Table .
  [Parameter] public TableVariant? Variant { get; set; }

  /// Render borders. Borders can only currently be disabled if the variant is set to 'compact'.
  /// https://github.com/patternfly/patternfly/issues/3650
  [Parameter] public bool Borders { get; set; } = true;

  /// Specifies the grid breakpoints .
  [Parameter] public TableGridBreakPoint GridBreakPoint { get; set; } = TableGridBreakPoint.Medium;

  /// A valid WAI-ARIA role to be applied to the table element.
  [Parameter] public string Role { get; set; } = "grid";

  /// If set to true, the table header sticks to the top of its container.
  [Parameter] public bool IsStickyHeader { get; set; }

  /// Flag indicating table is a tree table.
  [Parameter] public bool IsTreeTable { get; set; }

  /// Flag indicating this table is nested within another table.
  [Parameter] public bool IsNested { get; set; }

  /// Flag indicating this table should be striped. This property works best for a single <tbody> table.
  /// Striping may also be done manually by applying this property to Tbody and Tr components.
  [Parameter] public bool IsStriped { get; set; }

  /// Flag indicating this table contains expandable rows to maintain proper striping.
  [Parameter] public bool IsExpandable { get; set; }

  /// Modifies the body to allow for expandable rows.
  [Parameter] public bool IsExpanded { get; set; }

  // Collection of column spans for nested headers.
  [Parameter] public int[] NestedHeaderColumnSpans { get; set; }

  /// Flag to apply a caption element with visually hidden instructions that improves a11y for tables with selectable rows.
  /// If this prop is set to true other caption elements should not be passed as children of this table,
  /// and you should instead use the selectableRowCaptionText prop.
  [Parameter] public bool HasSelectableRowCaption { get; set; }

  /// Visible text to add alongside the hidden a11y caption for tables with selectable rows.
  /// This prop must be used to add custom caption content to the table when the hasSelectableRowCaption prop is set to true.
  [Parameter] public string SelectableRowCaptionText { get; set; }

  /// Text announced by screen readers to indicate the table has selectable rows.
  [Parameter] public string SelectableRowsScreenReaderText { get; set; } = "This table has selectable rows. It can be navigated by row using tab, and each row can be selected using space or enter.";

  private string TableRole { get => IsTreeTable ? "treegrid" : Role; }

  private string CssClass => new CssBuilder("pf-c-table")
    .AddClass("pf-m-compact"        , Variant is TableVariant.Compact)
    .AddClass("pf-m-no-border-rows" , !Borders)
    .AddClass("pf-m-sticky-header"  , IsStickyHeader)
    .AddClass("pf-m-tree-view"      , IsTreeTable)
    .AddClass("pf-m-nested"         , IsNested)
    .AddClass("pf-m-striped"        , IsStriped)
    .AddClass("pf-m-expandable"     , IsExpandable)
    .AddClass(GridClass)
    .AddClassFromAttributes(AdditionalAttributes)
    .Build();

  private string GridClass
  {
    get
    {
      return GridBreakPoint switch
      {
        TableGridBreakPoint.Medium      => IsTreeTable ? "pf-m-tree-view-grid-md"  : "pf-m-grid-md",
        TableGridBreakPoint.Large       => IsTreeTable ? "pf-m-tree-view-grid-lg"  : "pf-m-grid-lg",
        TableGridBreakPoint.ExtraLarge  => IsTreeTable ? "pf-m-tree-view-grid-xl"  : "pf-m-grid-xl",
        TableGridBreakPoint.ExtraLarge2 => IsTreeTable ? "pf-m-tree-view-grid-2xl" : "pf-m-grid-2xl",
        _                               => null
      };
    }
  }

  private bool HasSelectableRows { get; set; }

  internal void RegisterSelectableRow() => HasSelectableRows = true;
}