@namespace Blatternfly.Components
@inherits BaseComponent

<table
  @attributes="AdditionalAttributes"
  aria-label="@AriaLabel"
  role="@TableRole"
  class="@CssClass"
  @ref="Element"
>
  @if (NestedHeaderColumnSpans != null && NestedHeaderColumnSpans.Length > 0)
  {
    @for (int i = 0; i < NestedHeaderColumnSpans.Length; ++i)
    {
      if (NestedHeaderColumnSpans[i] == 1)
      {
        <col @key="i" />
      }
      else
      {
        <colgroup @key="i" span="@NestedHeaderColumnSpans[i]" />
      }
    }
  }
  @ChildContent
</table>

@code {
  public ElementReference Element { get; protected  set; }

  /// Adds an accessible name for the Table.
  [Parameter] public string AriaLabel { get; set; }

  /// Style variant for the Table .
  [Parameter] public TableVariant? Variant { get; set; }

  /// Render borders. Borders can only currently be disabled if the variant is set to 'compact'.
  /// https://github.com/patternfly/patternfly/issues/3650
  [Parameter] public bool Borders { get; set; } = true;

  /// Specifies the grid breakpoints .
  [Parameter] public TableGridBreakPoint GridBreakPoint { get; set; } = TableGridBreakPoint.Medium;

  /// A valid WAI-ARIA role to be applied to the table element.
  [Parameter] public string Role { get; set; } = "grid";

  /// If set to true, the table header sticks to the top of its container.
  [Parameter] public bool IsStickyHeader { get; set; }

  /// Flag indicating table is a tree table.
  [Parameter] public bool IsTreeTable { get; set; }

  /// Flag indicating this table is nested within another table.
  [Parameter] public bool IsNested { get; set; }

  /// Flag indicating this table should be striped. This property works best for a single <tbody> table.
  /// Striping may also be done manually by applying this property to Tbody and Tr components.
  [Parameter] public bool IsStriped { get; set; }

  /// Flag indicating this table contains expandable rows to maintain proper striping.
  [Parameter] public bool IsExpandable { get; set; }

  // Collection of column spans for nested headers.
  [Parameter] public int[] NestedHeaderColumnSpans { get; set; }

  /// Modifies the body to allow for expandable rows.
  [Parameter] public bool IsExpanded { get; set; }

  private string TableRole { get => IsTreeTable ? "treegrid" : Role; }

  private string CssClass => new CssBuilder("pf-c-table")
    .AddClass("pf-m-compact"        , Variant == TableVariant.Compact)
    .AddClass("pf-m-no-border-rows" , !Borders)
    .AddClass("pf-m-sticky-header"  , IsStickyHeader)
    .AddClass("pf-m-tree-view"      , IsTreeTable)
    .AddClass("pf-m-nested"         , IsNested)
    .AddClass("pf-m-striped"        , IsStriped)
    .AddClass("pf-m-expandable"     , IsExpandable)
    .AddClass(GridClass)
    .AddClassFromAttributes(AdditionalAttributes)
    .Build();

  private string GridClass
  {
    get
    {
      return GridBreakPoint switch
      {
        TableGridBreakPoint.Medium      => IsTreeTable ? "pf-m-tree-view-grid-md"  : "pf-m-grid-md",
        TableGridBreakPoint.Large       => IsTreeTable ? "pf-m-tree-view-grid-lg"  : "pf-m-grid-lg",
        TableGridBreakPoint.ExtraLarge  => IsTreeTable ? "pf-m-tree-view-grid-xl"  : "pf-m-grid-xl",
        TableGridBreakPoint.ExtraLarge2 => IsTreeTable ? "pf-m-tree-view-grid-2xl" : "pf-m-grid-2xl",
        _                               => null
      };
    }
  }
}