@namespace Blatternfly.Components
@using System.Globalization
@inject IDomUtils DomUtils

<div
  @attributes="AdditionalAttributes"
  class="@CssClass"
  style="@CssStyle"
  @ref="Element"
>
  @ChildContent
</div>

@code {
  public ElementReference Element { get; protected set; }

  [CascadingParameter] public Menu Parent { get; set; }

  /// Additional attributes that will be applied to the component.
  [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

  /// Content rendered inside the component.
  [Parameter] public RenderFragment ChildContent { get; set; }

  /// Height of the menu content.
  [Parameter] public string MenuHeight { get; set; }

  /// Maximum height of menu content
  [Parameter] public string MaxMenuHeight { get; set; }

  /// Callback to return the height of the menu content.
  [Parameter] public EventCallback<string> GetHeight { get; set; }

  private string CssClass => new CssBuilder("pf-c-menu__content")
    .AddClassFromAttributes(AdditionalAttributes)
    .Build();

  private string CssStyle => new StyleBuilder()
    .AddStyle("--pf-c-menu__content--Height"   , MenuHeight   , !string.IsNullOrEmpty(MenuHeight))
    .AddStyle("--pf-c-menu__content--MaxHeight", MaxMenuHeight, !string.IsNullOrEmpty(MaxMenuHeight))
    .Build();

  private static string LastActiveMenu { get; set; }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);

    var activeMenu   = string.IsNullOrEmpty(Parent?.ActiveMenu) ? Parent?.InternalId : Parent?.ActiveMenu;
    var shouldRecalc = false;

    if (!string.IsNullOrEmpty(activeMenu) && LastActiveMenu != activeMenu)
    {
      LastActiveMenu = activeMenu;
      shouldRecalc   = true;
    }

    if (shouldRecalc)
    {
      LastActiveMenu = activeMenu;

      // Calc Height
      var clientHeight = await DomUtils.CalculateMenuContentHeightAsync(Element);

      if (clientHeight > 0)
      {
        if (Parent is not null)
        {
          await Parent.GetMenuHeight(clientHeight);
        }
        await GetHeight.InvokeAsync(clientHeight.ToString(CultureInfo.InvariantCulture));

        Console.WriteLine($"{activeMenu} height = {clientHeight}");
      }
    }
  }
}