@namespace Blatternfly.Components

<div
  @attributes="AdditionalAttributes"
  class="@CssClass"
>
  @ChildContent
</div>

@code {
  /// Additional attributes that will be applied to the component.
  [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

  /// Content rendered inside the component.
  [Parameter] public RenderFragment ChildContent { get; set; }

  /// Width (from 1-5) to the DataList cell.
  [Parameter] public int? Width { get; set; } = 1;

  /// Enables the body Content to fill the height of the card.
  [Parameter] public bool IsFilled { get; set; } = true;

  ///  Aligns the cell content to the right of its parent.
  [Parameter] public bool AlignRight { get; set; }

  /// Set to true if the cell content is an Icon.
  [Parameter] public bool IsIcon { get; set; }

  /// Determines which wrapping modifier to apply to the data list text.
  [Parameter] public DataListWrapModifier? WrapModifier { get; set; }

  private string CssClass => new CssBuilder("pf-c-data-list__cell")
    .AddClass($"pf-m-flex-{Width}", Width is > 1)
    .AddClass("pf-m-no-fill"      , !IsFilled)
    .AddClass("pf-m-align-right"  , AlignRight)
    .AddClass("pf-m-icon"         , IsIcon)
    .AddClass("pf-m-nowrap"       , WrapModifier is DataListWrapModifier.Nowrap)
    .AddClass("pf-m-truncate"     , WrapModifier is DataListWrapModifier.Truncate)
    .AddClass("pf-m-break-word"   , WrapModifier is DataListWrapModifier.BreakWord)
    .AddClassFromAttributes(AdditionalAttributes)
    .Build();

  protected override void OnParametersSet()
  {
    base.OnParametersSet();

    if (Width is < 1 or > 5)
    {
      throw new InvalidOperationException("DataListCell: Width should be between 1 and 5.");
    }
  }
}