@namespace Blatternfly.Components

<li
  @attributes="AdditionalAttributes"
  class="@CssClass"
  aria-labelledby="@AriaLabelledBy"
  tabindex="@TabIndex"
  @onclick="@SelectDataListItem"
  @onkeydown="@OnKeyDown"
  aria-selected="@AriaSelected"
>
  @if (Parent?.SelectionMode is not null && IsSelectable)
  {
    <input
      class="pf-screen-reader"
      type="radio"
      checked="@IsSelected"
      @onchange="OnSelectionChanged"
      tabindex="-1"
      aria-label="@SelectableInputAriaLabel"
      aria-labelledby="@AriaLabelledBy"
    />
  }
  @ChildContent
</li>

@code {
  /// Parent DataList component.
  [CascadingParameter] public DataList Parent { get; set; }

  /// Additional attributes that will be applied to the component.
  [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

  /// Content rendered inside the component.
  [Parameter] public RenderFragment ChildContent { get; set; }

  /// Flag to show if the expanded content of the DataList item is visible.
  [Parameter] public bool IsExpanded { get; set; }

  /// Adds accessible text to the DataList item.
  [Parameter] public string AriaLabelledBy { get; set; }

  /// Aria label to apply to the selectable input if one is rendered.
  [Parameter] public string SelectableInputAriaLabel { get; set; }

  private string CssClass => new CssBuilder("pf-c-data-list__item")
    .AddClass("pf-m-expanded"   , IsExpanded)
    .AddClass("pf-m-selectable" , IsSelectable)
    .AddClass("pf-m-selected"   , !string.IsNullOrEmpty(SelectedDataListItemId) && IsSelected)
    .AddClassFromAttributes(AdditionalAttributes)
    .Build();

  private string InternalId             { get => AdditionalAttributes?.GetPropertyValue(HtmlAttributes.Id); }
  private bool   IsSelected             { get => SelectedDataListItemId == InternalId; }
  private bool   IsSelectable           { get => !string.IsNullOrEmpty(InternalId); }
  private string SelectedDataListItemId { get => Parent?.SelectedDataListItemId; }
  private string TabIndex               { get => IsSelectable ? "0" : null; }
  private string AriaSelected
  {
    get => !string.IsNullOrEmpty(SelectedDataListItemId) && IsSelected ? "true" : null;
  }
  private async Task OnSelectionChanged(ChangeEventArgs args)
  {
    await Parent.SelectableRowChange(InternalId);
  }

  private async Task SelectDataListItem(MouseEventArgs args)
  {
    if (!IsSelectable)
    {
      return;
    }

    await Parent.SelectItem(InternalId);
  }

  private async Task OnKeyDown(KeyboardEventArgs args)
  {
    if (!IsSelectable)
    {
      return;
    }

    if (args.Key == Keys.Enter)
    {
      await Parent.SelectItem(InternalId);
    }
  }
}