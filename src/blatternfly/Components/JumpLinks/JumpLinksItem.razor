@namespace Blatternfly.Components
@inject IDomUtils DomUtils

<li @attributes="AdditionalAttributes" class="@CssClass" aria-current="@AriaCurrent">
  <a
    class="pf-c-jump-links__link"
    href="@Href"
    @onclick="@ClickHandler"
    @onclick:preventDefault="true"
    @ref="AnchorElement"
  >
    <span class="pf-c-jump-links__link-text">@ChildContent</span>
  </a>
  <CascadingValue Value="this" IsFixed="true">
    @SubLists
  </CascadingValue>
</li>

@code {
  /// Additional attributes that will be applied to the component.
  [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

  /// Content rendered inside the component.
  [Parameter] public RenderFragment ChildContent { get; set; }

  /// Parent JumpLinks component.
  [CascadingParameter] private JumpLinks Parent { get; set; }

  /// Parent JumpLinksItem component.
  [CascadingParameter] public JumpLinksItem ParentItem { get; set; }

  public ElementReference AnchorElement { get; protected set; }

  /// Whether this item is active. Parent JumpLinks component sets this when passed a `scrollableSelector`.
  [Parameter] public bool IsActive { get; set; }

  /// Href for this link.
  [Parameter] public string Href { get; set; }

  /// Click handler for anchor tag. Parent JumpLinks components tap into this.
  [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }

  [Parameter] public RenderFragment SubLists { get; set; }

  private string CssClass => new CssBuilder("pf-c-jump-links__item")
    .AddClass("pf-m-current", IsActive)
    .AddClassFromAttributes(AdditionalAttributes)
    .Build();

  private string AriaCurrent { get => IsActive ? "location" : null; }

  protected override void OnInitialized()
  {
    base.OnInitialized();

    Parent.RegisterItem(this);
  }

  internal void Activate()
  {
    IsActive = true;
    StateHasChanged();
  }

  internal void Deactivate()
  {
    IsActive = false;
    StateHasChanged();
  }

  private async Task ClickHandler(MouseEventArgs args)
  {
    if (!string.IsNullOrEmpty(Href))
    {
      try
      {
        await Parent.LockScrollAsync();
        await DomUtils.ScrollIntoViewAsync(Href[1..]);
        await OnClick.InvokeAsync(args);
        Parent.ActivateItem(this);
      }
      catch
      {
        throw;
      }
      finally
      {
        await Parent.UnlockScrollAsync();
      }
    }
  }
}