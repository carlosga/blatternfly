@namespace Blatternfly.Components

<Backdrop>
  <FocusTrap class="pf-l-bullseye" Active="@(!DisableFocusTrap)">
    <ModalBox
      id="@BoxId"
      style="@BoxStyle"
      class="@CssClass"
      Variant="@Variant"
      Position="@Position"
      PositionOffset="@PositionOffset"
      AriaLabel="@AriaLabel"
      AriaLabelledBy="@AriaLabelledByFormatted"
      AriaDescribedBy="@AriaDescribedByValue"
      @onkeydown="KeydownHandler"
    >
      @if (ShowClose)
      {
        <ModalBoxCloseButton OnClose="@OnClose" />
      }
      @if (Header is not null)
      {
        <ModalBoxHeader Help="@Help">
          <ChildContent>@Header</ChildContent>
        </ModalBoxHeader>
      }
      else if (!string.IsNullOrEmpty(Title))
      {
        <ModalBoxHeader Help="@Help">
          <ChildContent>
            <ModalBoxTitle
              TitleIconVariant="@TitleIconVariant"
              TitleLabel="@TitleLabel"
              id="@LabelId"
            >
              <CustomTitleIcon>@CustomTitleIcon</CustomTitleIcon>
              <Title>@Title</Title>
            </ModalBoxTitle>
            @if (Description is not null)
            {
              <ModalBoxDescription id="@DescriptorId">@Description</ModalBoxDescription>
            }
          </ChildContent>
        </ModalBoxHeader>
      }
      @if (HasNoBodyWrapper)
      {
        @ChildContent
      }
      else
      {
        <ModalBoxBody
          @attributes="AdditionalAttributes"
          aria-label="@BodyAriaLabel"
          role="@BodyRole"
          id="@ModalBodyId"
        >
          @ChildContent
        </ModalBoxBody>
      }
      @if (Footer is not null)
      {
        <ModalBoxFooter>@Footer</ModalBoxFooter>
      }
      else if (Actions is not null)
      {
        <ModalBoxFooter>@Actions</ModalBoxFooter>
      }
    </ModalBox>
  </FocusTrap>
</Backdrop>

@code {
  /// Additional attributes that will be applied to the component.
  [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

  /// Content rendered inside the component.
  [Parameter] public RenderFragment ChildContent { get; set; }

  /// Variant of the modal.
  [Parameter] public ModalVariant Variant { get; set; } = ModalVariant.Default;

  /// Alternate position of the modal.
  [Parameter] public ModalPosition? Position { get; set; }

  /// Offset from alternate position. Can be any valid CSS length/percentage.
  [Parameter] public string PositionOffset { get; set; }

  /// Flag to show the modal.
  [Parameter] public bool IsOpen { get; set; }

  /// Complex header (more than just text), supersedes title for header content.
  [Parameter] public RenderFragment Header { get; set; }

  /// Optional help section for the Modal Header.
  [Parameter] public string Help { get; set; }

  /// Description of the modal.
  [Parameter] public RenderFragment Description { get; set; }

  /// Simple text content of the Modal Header, also used for aria-label on the body.
  [Parameter] public string Title { get; set; }

  /// Optional alert icon (or other) to show before the title of the Modal Header
  /// When the predefined alert types are used the default styling will be automatically applied.
  [Parameter] public ModalTitleVariant? TitleIconVariant { get; set; }

  /// Custom icon for the modal title.
  [Parameter] public RenderFragment CustomTitleIcon { get; set; }

  /// Optional title label text for screen readers.
  [Parameter] public string TitleLabel { get; set; }

  /// Id of Modal Box label.
  [Parameter] public string AriaLabelledBy { get; set; }

  /// Accessible descriptor of modal.
  [Parameter] public string AriaLabel { get; set; }

  /// Id of Modal Box description.
  [Parameter] public string AriaDescribedBy { get; set; }

  /// Accessible label applied to the modal box body.
  /// This should be used to communicate important information about the modal box body div if needed, such as that it is scrollable.
  [Parameter] public string BodyAriaLabel { get; set; }

  /// Accessible role applied to the modal box body.
  /// This will default to region if a body aria label is applied.
  /// Set to a more appropriate role as applicable based on the modal content and context.
  [Parameter] public string BodyAriaRole { get; set; }

  /// Flag to show the close button in the header area of the modal.
  [Parameter] public bool ShowClose { get; set; } = true;

  /// Default width of the content.
  [Parameter] public string Width { get; set; }

  /// Custom footer.
  [Parameter] public RenderFragment Footer { get; set; }

  /// Action buttons to add to the standard Modal Footer, ignored if `footer` is given.
  [Parameter] public RenderFragment Actions { get; set; }

  /// A callback for when the close button is clicked.
  [Parameter] public EventCallback OnClose { get; set; }

  /// Id of the ModalBox container.
  [Parameter] public string BoxId { get; set; }

  /// Id of the ModalBox title.
  [Parameter] public string LabelId { get; set; }

  /// Id of the ModalBoxBody.
  [Parameter] public string DescriptorId { get; set; }

  /// Flag to disable focus trap.
  [Parameter] public bool DisableFocusTrap { get; set; }

  /// Flag indicating if modal content should be placed in a modal box body wrapper.
  [Parameter] public bool HasNoBodyWrapper { get; set; }

  /// Modal handles pressing of the Escape key and closes the modal.
  [Parameter] public EventCallback<KeyboardEventArgs> OnEscapePress { get; set; }

  private string CssClass => new CssBuilder()
    .AddClass("pf-m-danger"  , TitleIconVariant is ModalTitleVariant.Danger)
    .AddClass("pf-m-warning" , TitleIconVariant is ModalTitleVariant.Warning)
    .AddClass("pf-m-success" , TitleIconVariant is ModalTitleVariant.Success)
    .AddClass("pf-m-default" , TitleIconVariant is ModalTitleVariant.Default)
    .AddClass("pf-m-info"    , TitleIconVariant is ModalTitleVariant.Info)
    .AddClassFromAttributes(AdditionalAttributes)
    .Build();

  private string BoxStyle
  {
    get => !string.IsNullOrEmpty(Width) ? $"width: {Width};" : null;
  }

  private string ModalBodyId
  {
    get => Description is null && string.IsNullOrEmpty(AriaDescribedBy) ? DescriptorId : null;
  }

  private string AriaDescribedByValue
  {
    get
    {
      if (!string.IsNullOrEmpty(AriaDescribedBy))
      {
        return AriaDescribedBy;
      }
      return HasNoBodyWrapper ? null : DescriptorId;
    }
  }

  private string AriaLabelledByFormatted
  {
    get
    {
      if (string.IsNullOrEmpty(AriaLabelledBy))
      {
        return null;
      }
      var idRefList = new List<string>(4);
      if (!string.IsNullOrEmpty(AriaLabel) && !string.IsNullOrEmpty(BoxId))
      {
        idRefList.Add(AriaLabel);
        idRefList.Add(BoxId);
      }
      if (!string.IsNullOrEmpty(AriaLabelledBy))
      {
        idRefList.Add(AriaLabelledBy);
      }
      if (!string.IsNullOrEmpty(Title))
      {
        idRefList.Add(LabelId);
      }
      return string.Join(' ', idRefList);
    }
  }

  private string DefaultModalBodyAriaRole
  {
    get => !string.IsNullOrEmpty(BodyAriaLabel) ? "region" : null;
  }

  private string BodyRole
  {
    get => !string.IsNullOrEmpty(BodyAriaRole) ? BodyAriaRole : DefaultModalBodyAriaRole;
  }

  private async Task KeydownHandler(KeyboardEventArgs args)
  {
    if (args.Key == Keys.Escape)
    {
      await OnEscapePress.InvokeAsync(args);
    }
  }
}