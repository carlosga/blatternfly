@namespace Blatternfly.Components
@inject IComponentIdGenerator ComponentIdGenerator
@inject IDomUtils DomUtils

@if (IsTooltipVisible)
{
  <Tooltip id="@TooltipId" Reference="@TitleId">
    <Content>
      @Title
    </Content>
    <ChildContent>
      <h1
        @attributes="AdditionalAttributes"
        id="@TitleId"
        class="@CssClass"
        @ref="Element"
      >
        @if (TitleIconVariant.HasValue)
        {
          <span class="pf-c-modal-box__title-icon">
            @if (TitleIconVariant is ModalTitleVariant.Danger)
            {
              <ExclamationCircleIcon />
            }
            else if (TitleIconVariant is ModalTitleVariant.Default)
            {
              <BellIcon />
            }
            else if (TitleIconVariant is ModalTitleVariant.Info)
            {
              <InfoCircleIcon />
            }
            else if (TitleIconVariant is ModalTitleVariant.Success)
            {
              <CheckCircleIcon />
            }
            else if (TitleIconVariant is ModalTitleVariant.Warning)
            {
              <ExclamationTriangleIcon />
            }
            else if (TitleIconVariant is ModalTitleVariant.Custom)
            {
              @CustomTitleIcon
            }
          </span>
        }

        @if (!string.IsNullOrEmpty(Label))
        {
          <span class="pf-u-screen-reader">@Label</span>
        }
        <span class="pf-c-modal-box__title-text">@Title</span>
      </h1>
    </ChildContent>
  </Tooltip>
}
else
{
  <h1
    @attributes="AdditionalAttributes"
    id="@TitleId"
    class="@CssClass"
    @ref="Element"
  >
    @if (TitleIconVariant.HasValue)
    {
      <span class="pf-c-modal-box__title-icon">
        @if (TitleIconVariant is ModalTitleVariant.Danger)
        {
          <ExclamationCircleIcon />
        }
        else if (TitleIconVariant is ModalTitleVariant.Default)
        {
          <BellIcon />
        }
        else if (TitleIconVariant is ModalTitleVariant.Info)
        {
          <InfoCircleIcon />
        }
        else if (TitleIconVariant is ModalTitleVariant.Success)
        {
          <CheckCircleIcon />
        }
        else if (TitleIconVariant is ModalTitleVariant.Warning)
        {
          <ExclamationTriangleIcon />
        }
        else if (TitleIconVariant is ModalTitleVariant.Custom)
        {
          @CustomTitleIcon
        }
      </span>
    }

    @if (!string.IsNullOrEmpty(Label))
    {
      <span class="pf-u-screen-reader">@Label</span>
    }
    <span class="pf-c-modal-box__title-text">@Title</span>
  </h1>
}

@code {
  public ElementReference Element { get; protected set; }

  /// Additional attributes that will be applied to the component.
  [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

  /// Content rendered inside the modal box header title.
  [Parameter] public RenderFragment Title { get; set; }

  /// Optional alert icon (or other) to show before the title of the Modal Header
  /// When the predefined alert types are used the default styling will be automatically applied.
  [Parameter] public ModalTitleVariant? TitleIconVariant { get; set; }

  /// Custom icon for the modal title.
  [Parameter] public RenderFragment CustomTitleIcon { get; set; }

  /// Optional title label text for screen readers.
  [Parameter] public string TitleLabel { get; set; }

  private string CssClass => new CssBuilder("pf-c-modal-box__title")
    .AddClass("pf-m-icon", TitleIconVariant.HasValue)
    .AddClassFromAttributes(AdditionalAttributes)
    .Build();

  private string Label
  {
    get
    {
      @if (!string.IsNullOrEmpty(TitleLabel))
      {
        return TitleLabel;
      }
      else if (TitleIconVariant.HasValue && TitleIconVariant is not ModalTitleVariant.Custom)
      {
        return $"{TitleIconVariant} alert:";
      }
      else
      {
        return TitleLabel;
      }
    }
  }

  private string InternalId { get => AdditionalAttributes?.GetPropertyValue(HtmlAttributes.Id); }

  private bool   IsTooltipVisible { get; set; }
  private string TitleId          { get; set; }
  private string TooltipId        { get; set; }

  protected override void OnInitialized()
  {
    base.OnInitialized();

    TitleId   = InternalId ?? ComponentIdGenerator.Generate("pf-c-modal-box__title");
    TooltipId = $"{TitleId}-tooltip";
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);

    if (firstRender)
    {
      IsTooltipVisible = await DomUtils.HasTruncatedWidthAsync(Element);
      if (IsTooltipVisible)
      {
        StateHasChanged();
      }
    }
  }
}