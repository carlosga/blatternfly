@namespace Blatternfly.Components
@using System.Threading
@inherits BaseComponent

@if (IsOpen)
{
  <Portal IsOpen="@IsOpen">
    <CascadingValue Value="this" IsFixed="true">
      <ModalContent
        @attributes="AdditionalAttributes"
        AriaLabel="@AriaLabel"
        AriaDescribedBy="@AriaDescribedBy"
        AriaLabelledBy="@AriaLabelledBy"
        BoxId="@BoxId"
        DescriptorId="@DescriptorId"
        DisableFocusTrap="@DisableFocusTrap"
        HasNoBodyWrapper="@HasNoBodyWrapper"
        IsOpen="@IsOpen"
        LabelId="@LabelId"
        OnClose="@OnClose"
        Position="@Position"
        PositionOffset="@PositionOffset"
        ShowClose="@ShowClose"
        Title="@Title"
        TitleIconVariant="@TitleIconVariant"
        TitleLabel="@TitleLabel"
        Variant="@Variant"
        Width="@Width"
      >
        <Actions>@Actions</Actions>
        <CustomTitleIcon>@CustomTitleIcon</CustomTitleIcon>
        <Description>@Description</Description>
        <Footer>@Footer</Footer>
        <Header>@Header</Header>
        <Help>@Help</Help>
        <ChildContent>@ChildContent</ChildContent>
      </ModalContent>
    </CascadingValue>
  </Portal>
}

@code {
  /// Flag to show the modal.
  [Parameter] public bool IsOpen { get; set; }
  
  /// Complex header (more than just text), supersedes title for header content.
  [Parameter] public RenderFragment Header { get; set; }
  
  /// Optional help section for the Modal Header.
  [Parameter] public RenderFragment Help { get; set; }
  
  /// Simple text content of the Modal Header, also used for aria-label on the body.
  [Parameter] public string Title { get; set; }
  
  /// Optional alert icon (or other) to show before the title of the Modal Header
  /// When the predefined alert types are used the default styling will be automatically applied.
  [Parameter] public ModalTitleVariant? TitleIconVariant { get; set; }

  /// Custom icon for the modal title.
  [Parameter] public RenderFragment CustomTitleIcon { get; set; }
  
  /// Optional title label text for screen readers.
  [Parameter] public string TitleLabel { get; set; }
  
  /// Id to use for Modal Box label.
  [Parameter] public string AriaLabelledBy { get; set; }
  
  /// Accessible descriptor of modal.
  [Parameter] public string AriaLabel { get; set; }
  
  /// Id to use for Modal Box descriptor.
  [Parameter] public string AriaDescribedBy { get; set; }
  
  /// Flag to show the close button in the header area of the modal.
  [Parameter] public bool ShowClose { get; set; } = true;
  
  /// Custom footer.
  [Parameter] public RenderFragment Footer { get; set; }
  
  /// Action buttons to add to the standard Modal Footer, ignored if `footer` is given.
  [Parameter] public RenderFragment Actions { get; set; }
  
  /// A callback for when the close button is clicked.
  [Parameter] public EventCallback OnClose { get; set; }
  
  /// Default width of the Modal..
  [Parameter] public string Width { get; set; }
  
  /// Flag to disable focus trap.
  [Parameter] public bool DisableFocusTrap { get; set; }
  
  /// Description of the modal.
  [Parameter] public RenderFragment Description { get; set; }
  
  /// Variant of the modal.
  [Parameter] public ModalVariant Variant { get; set; } = ModalVariant.Default;
  
  /// Alternate position of the modal.
  [Parameter] public ModalPosition? Position { get; set; }
  
  /// Offset from alternate position. Can be any valid CSS length/percentage.
  [Parameter] public string PositionOffset { get; set; }
  
  /// Flag indicating if modal content should be placed in a modal box body wrapper.
  [Parameter] public bool HasNoBodyWrapper { get; set; }
  
  /// Modal handles pressing of the Escape key and closes the modal.
  /// If you want to handle this yourself you can use this callback function.
  [Parameter] public EventCallback<KeyboardEventArgs> OnEscapePress { get; set; }

  private static int _currentId = 0;
  
  private string BoxId { get; set; }
  private string LabelId { get; set; }
  private string DescriptorId { get; set; }
  
  protected override void OnInitialized()
  {
    base.OnInitialized();
    
    var boxIdNum        = Interlocked.Increment(ref _currentId);
    var labelIdNum      = boxIdNum + 1;
    var descriptorIdNum = boxIdNum + 2;

    BoxId        = !string.IsNullOrEmpty(InternalId) ? InternalId : $"pf-modal-part-{boxIdNum}";
    LabelId      = $"pf-modal-part-{labelIdNum}";
    DescriptorId = $"pf-modal-part-{descriptorIdNum}";
  }
}