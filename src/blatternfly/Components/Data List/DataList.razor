@namespace Blatternfly.Components
@inherits BaseComponent

<CascadingValue Value="this" IsFixed="true">
  <ul
    @attributes="AdditionalAttributes"
    class="@CssClass"
    aria-label="@AriaLabel"
  >
    @ChildContent
  </ul>  
</CascadingValue>

@code {
  /// Adds accessible text to the DataList list.
  [Parameter] public string AriaLabel { get; set; }
  
  /// Optional callback to make DataList selectable, fired when DataListItem selected.
  [Parameter] public EventCallback<string> OnSelectDataListItem { get; set; }
  
  /// Id of DataList item currently selected.
  [Parameter] public string SelectedDataListItemId { get; set; }
  
  /// Flag indicating if DataList should have compact styling.
  [Parameter] public bool IsCompact { get; set; }
  
  /// Specifies the grid breakpoints .
  [Parameter] public DataListGridBreakpoint GridBreakpoint { get; set; } = DataListGridBreakpoint.Medium;
  
  /// Determines which wrapping modifier to apply to the DataList.
  [Parameter] public DataListWrapModifier? WrapModifier { get; set; }
  
  private CssBuilder CssClass => new CssBuilder("pf-c-data-list")
    .AddClass("pf-m-compact"   , IsCompact)
    .AddClass("pf-m-grid-none" , GridBreakpoint == DataListGridBreakpoint.None)
    .AddClass("pf-m-grid"      , GridBreakpoint == DataListGridBreakpoint.Always)
    .AddClass("pf-m-grid-sm"   , GridBreakpoint == DataListGridBreakpoint.Small)
    .AddClass("pf-m-grid-md"   , GridBreakpoint == DataListGridBreakpoint.Medium)
    .AddClass("pf-m-grid-lg"   , GridBreakpoint == DataListGridBreakpoint.Large)
    .AddClass("pf-m-grid-xl"   , GridBreakpoint == DataListGridBreakpoint.ExtraLarge)
    .AddClass("pf-m-grid-2xl"  , GridBreakpoint == DataListGridBreakpoint.ExtraLarge2)
    .AddClass("pf-m-nowrap"    , WrapModifier   == DataListWrapModifier.Nowrap)
    .AddClass("pf-m-truncate"  , WrapModifier   == DataListWrapModifier.Truncate)
    .AddClass("pf-m-break-word", WrapModifier   == DataListWrapModifier.BreakWord)
    .AddClassFromAttributes(AdditionalAttributes);
  
  internal async Task SelectItem(string id)
  {
    SelectedDataListItemId = id;
    await OnSelectDataListItem.InvokeAsync(id);
  }
}