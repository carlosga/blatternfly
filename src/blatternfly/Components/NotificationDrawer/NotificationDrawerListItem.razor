@namespace Blatternfly.Components

<li
  @ref="Element"
  @attributes="AdditionalAttributes"
  class="@CssClass"
  tabindex="@TabIndex"
  @onclick="OnClick"
  @onkeydown="OnKeyDown"
>
  @ChildContent
</li>

@code {
  /// Additional attributes that will be applied to the component.
  [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

  /// Content rendered inside the component.
  [Parameter] public RenderFragment ChildContent { get; set; }

  public ElementReference Element { get; protected set; }

  ///  Modifies the list item to include hover styles on :hover .
  [Parameter] public bool IsHoverable { get; set; } = true;

  ///  Adds styling to the list item to indicate it has been read .
  [Parameter] public bool IsRead { get; set; }

  ///  Callback for when a list item is clicked .
  [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }

  ///  Tab index for the list item .
  [Parameter] public int? TabIndex { get; set; } = 0;

  ///  Variant indicates the severity level .
  [Parameter] public SeverityLevel Variant { get; set; } = SeverityLevel.Default;

  private string CssClass => new CssBuilder("pf-c-notification-drawer__list-item")
    .AddClass("pf-m-hoverable", IsHoverable)
    .AddClass("pf-m-read"     , IsRead)
    .AddClass("pf-m-success"  , Variant is SeverityLevel.Success)
    .AddClass("pf-m-danger"   , Variant is SeverityLevel.Danger)
    .AddClass("pf-m-warning"  , Variant is SeverityLevel.Warning)
    .AddClass("pf-m-info"     , Variant is SeverityLevel.Info)
    .AddClass("pf-m-default"  , Variant is SeverityLevel.Default)
    .AddClassFromAttributes(AdditionalAttributes)
    .Build();

  private async Task OnKeyDown(KeyboardEventArgs args)
  {
    // Accessibility function. Click on the list item when pressing Enter or Space on it.
    if (args.Key is Keys.Enter or Keys.Space)
    {
      await OnClick.InvokeAsync();
    }
  }
}

