@namespace Blatternfly.Components
@inject IComponentIdGenerator ComponentIdGenerator
@inject IDomUtils DomUtils

<div @attributes="AdditionalAttributes" class="@CssClass">
  <span class="pf-c-notification-drawer__list-item-header-icon">
    @if (Icon is not null)
    {
      @Icon
    }
    else
    {
      if (Variant is SeverityLevel.Success)
      {
        <CheckCircleIcon />
      }
      else if (Variant is SeverityLevel.Danger)
      {
        <ExclamationCircleIcon />
      }
      else if (Variant is SeverityLevel.Warning)
      {
        <ExclamationTriangleIcon />
      }
      else if (Variant is SeverityLevel.Info)
      {
        <InfoCircleIcon />
      }
      else
      {
        <BellIcon />
      }
    }
  </span>
  @if (IsTooltipVisible)
  {
    <Tooltip id="@TooltipId" Reference="@TitleId" Position="@TooltipPosition">
      <Content>
        @Title
      </Content>
      <ChildContent>
        <TitleHeadingLevel
          id="@TitleId"
          tabindex="0"
          class="@TitleCssClass"
          style="@TitleCssStyle"
          HeadingLevel="@HeadingLevel"
        >
          @if (!string.IsNullOrEmpty(ScreenReaderTitle))
          {
            <span class="pf-u-screen-reader">@ScreenReaderTitle</span>
          }
          @Title
        </TitleHeadingLevel>
      </ChildContent>
    </Tooltip>
  }
  else
  {
    <TitleHeadingLevel
      class="@TitleCssClass"
      style="@TitleCssStyle"
      HeadingLevel="@HeadingLevel"
      @ref="TitleRef"
    >
      @if (!string.IsNullOrEmpty(ScreenReaderTitle))
      {
        <span class="pf-u-screen-reader">@ScreenReaderTitle</span>
      }
      @Title
    </TitleHeadingLevel>
  }
</div>
@if (ChildContent is not null)
{
  <div class="pf-c-notification-drawer__list-item-action">@ChildContent</div>
}

@code {
  /// Additional attributes that will be applied to the component.
  [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

  /// Content rendered inside the component.
  [Parameter] public RenderFragment ChildContent { get; set; }

  ///  Add custom icon for notification drawer list item header.
  [Parameter] public RenderFragment Icon { get; set; }

  ///  Notification drawer list item header screen reader title.
  [Parameter] public string ScreenReaderTitle { get; set; }

  ///  Notification drawer list item title.
  [Parameter] public string Title { get; set; }

  ///  Variant indicates the severity level.
  [Parameter] public SeverityLevel Variant { get; set; } = SeverityLevel.Default;

  /// Truncate title to number of lines.
  [Parameter] public int TruncateTitle { get; set; }

  /// Position of the tooltip which is displayed if text is truncated.
  [Parameter] public TooltipPosition TooltipPosition { get; set; } = TooltipPosition.Top;

  /// Sets the heading level to use for the group title. Default is h2.
  [Parameter] public HeadingLevel HeadingLevel { get; set; } = HeadingLevel.h2;

  private string CssClass => new CssBuilder("pf-c-notification-drawer__list-item-header")
    .AddClassFromAttributes(AdditionalAttributes)
    .Build();

  private string TitleCssClass => new CssBuilder("pf-c-notification-drawer__list-item-header-title")
    .AddClass("pf-m-truncate", TruncateTitle > 0)
    .Build();

  private string TitleCssStyle => new StyleBuilder()
    .AddStyle("--pf-c-notification-drawer__list-item-header-title--max-lines", TruncateTitle, TruncateTitle > 0)
    .Build();

  private TitleHeadingLevel TitleRef { get; set; }

  private bool   IsTooltipVisible { get; set; }
  private string TitleId          { get; set; }
  private string TooltipId        { get; set; }

  protected override void OnInitialized()
  {
    base.OnInitialized();

    TitleId   = ComponentIdGenerator.Generate("pf-c-notification-drawer-group-toggle-title");
    TooltipId = $"{TitleId}-tooltip";
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);

    if (firstRender)
    {
      IsTooltipVisible = await DomUtils.HasTruncatedHeightAsync(TitleRef.Element);
      if (IsTooltipVisible)
      {
        StateHasChanged();
      }
    }
  }
}