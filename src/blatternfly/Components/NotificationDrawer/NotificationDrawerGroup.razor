@namespace Blatternfly.Components
@inject IRandomIdGenerator RandomIdGenerator
@inject IDomUtils DomUtils

<section @attributes="AdditionalAttributes" class="@CssClass">
  <h1>
    <button
      class="pf-c-notification-drawer__group-toggle"
      aria-expanded="@AriaExpanded"
      @onclick="HandleToggle"
      @onclick:stopPropagation="true"
      @onkeydown="OnKeyDown"
      @onkeydown:preventDefault="true"
    >
      @if (ShouldRenderTooltip)
      {
        <Tooltip id="@TooltipId" Reference="@TitleId" Position="@TooltipPosition">
          <Content>
            @Title
          </Content>
          <ChildContent>
            <div
              id="@TitleId"
              tabindex="0"
              class="pf-c-notification-drawer__group-toggle-title"
              style="@TitleCssStyle"
            >
              @Title
            </div>
          </ChildContent>
        </Tooltip>
      }
      else
      {
        <div
          class="pf-c-notification-drawer__group-toggle-title"
          style="@TitleCssStyle"
          @ref="TitleRef"
        >
          @Title
        </div>
      }
      <div class="pf-c-notification-drawer__group-toggle-count">
        <Badge IsRead="@IsRead">@Count</Badge>
      </div>

      <span class="pf-c-notification-drawer__group-toggle-icon">
        <AngleRightIcon />
      </span>
    </button>
  </h1>
  @ChildContent
</section>

@code {
  /// Additional attributes that will be applied to the component.
  [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

  /// Content rendered inside the component.
  [Parameter] public RenderFragment ChildContent { get; set; }

  /// Notification drawer group count.
  [Parameter] public int Count { get; set; }

  /// Adds styling to the group to indicate expanded state.
  [Parameter] public bool IsExpanded { get; set; }

  /// Adds styling to the group to indicate whether it has been read.
  [Parameter] public bool IsRead { get; set; }

  /// Callback for when group button is clicked to expand.
  [Parameter] public EventCallback<bool> OnExpand { get; set; }

  /// Notification drawer group title.
  [Parameter] public string Title { get; set; }

  /// Truncate title to number of lines.
  [Parameter] public int TruncateTitle { get; set; }

  /// Position of the tooltip which is displayed if text is truncated.
  [Parameter] public TooltipPosition TooltipPosition { get; set; } = TooltipPosition.Top;

  private string TitleCssStyle => new StyleBuilder()
    .AddStyle("--pf-c-notification-drawer__group-toggle-title--max-lines", TruncateTitle, TruncateTitle > 0)
    .Build();

  private string CssClass => new CssBuilder("pf-c-notification-drawer__group")
    .AddClass("pf-m-expanded", IsExpanded)
    .AddClassFromAttributes(AdditionalAttributes)
    .Build();

  private string AriaExpanded { get => IsExpanded ? "true" : "false"; }

  private ElementReference TitleRef { get; set; }

  private bool   ShouldRenderTooltip { get; set; }
  private string TitleId             { get; set; }
  private string TooltipId           { get; set; }

  protected override void OnInitialized()
  {
    base.OnInitialized();

    TitleId   = RandomIdGenerator.GenerateId("pf-c-notification-drawer__group-toggle-title");
    TooltipId = $"{TitleId}-tooltip";
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);

    if (firstRender)
    {
      ShouldRenderTooltip = await DomUtils.HasTruncatedHeight(TitleRef);
      if (ShouldRenderTooltip)
      {
        StateHasChanged();
      }
    }
  }

  private async Task HandleToggle(MouseEventArgs _)
  {
    IsExpanded = !IsExpanded;
    await OnExpand.InvokeAsync(IsExpanded);
  }

  private async Task OnKeyDown(KeyboardEventArgs args)
  {
    if (args.Key == Keys.Enter || args.Key == Keys.Space)
    {
      IsExpanded = !IsExpanded;
      await OnExpand.InvokeAsync(IsExpanded);
    }
  }
}