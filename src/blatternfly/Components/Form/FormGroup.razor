@namespace Blatternfly.Components
@using System.Runtime.CompilerServices
@inherits BaseComponent

<CascadingValue Value="this" IsFixed="true">
  <div @attributes="AdditionalAttributes" class="@CssClass">
    @if (!string.IsNullOrEmpty(Label))
    {
      <div class="@FormGroupLabelCssClass">
        @if (!string.IsNullOrEmpty(LabelInfo))
        {
          <div class="pf-c-form__group-label-main">
            <label class="pf-c-form__label" for="@FieldId">
              <span class="pf-c-form__label-text">@Label</span>
              @if (IsRequired)
              {
                <span class="pf-c-form__label-required" aria-hidden="true">&nbsp;*</span>
              }
            </label>
            @if (LabelIcon is not null)
            {
              @LabelIcon
            }
          </div>
          <div class="pf-c-form__group-label-info">@LabelInfo</div>
        }
        else
        {
          <label class="pf-c-form__label" for="@FieldId">
            <span class="pf-c-form__label-text">@Label</span>
            @if (IsRequired)
            {
              <span class="pf-c-form__label-required" aria-hidden="true">&nbsp;*</span>
            }
          </label>
          @if (LabelIcon is not null)
          {
            @LabelIcon
          }
        }
      </div>
    }

    <div class="@FormGroupControlCssClass">
      @if (IsHelperTextBeforeField)
      {
        @if (HasErrors && !string.IsNullOrEmpty(HelperTextInvalid))
        {
          <div
            class="pf-c-form__helper-text pf-m-error"
            id="@HelperTextId"
            aria-live="polite"
          >
            @if (HelperTextInvalidIcon is not null)
            {
              <span class="pf-c-form__helper-text-icon">
                @HelperTextInvalidIcon
              </span>
            }
            @HelperTextInvalid
          </div>
        }
        else if (!string.IsNullOrEmpty(HelperText))
        {
          <div
            class="@HelperTextCssClass"
            id="@HelperTextId"
            aria-live="polite"
          >
            @if (HelperTextIcon is not null)
            {
              <span class="pf-c-form__helper-text-icon">
                @HelperTextIcon
              </span>
            }
            @HelperText
          </div>
        }
      }

      @ChildContent

      @if (!IsHelperTextBeforeField)
      {
        @if (HasErrors && !string.IsNullOrEmpty(HelperTextInvalid))
        {
          <div class="pf-c-form__helper-text pf-m-error" id="@HelperTextId" aria-live="polite">
            @if (HelperTextInvalidIcon is not null)
            {
              <span class="pf-c-form__helper-text-icon">
                @HelperTextInvalidIcon
              </span>
            }
            @HelperTextInvalid
          </div>
        }
        else if (!string.IsNullOrEmpty(HelperText))
        {
          <div
            class="@HelperTextCssClass"
            id="@HelperTextId"
            aria-live="polite"
          >
            @if (HelperTextIcon is not null)
            {
              <span class="pf-c-form__helper-text-icon">
                @HelperTextIcon
              </span>
            }
            @HelperText
          </div>
        }
      }
    </div>
  </div>
</CascadingValue>

@code {
  /// Label text before the field.
  [Parameter] public string Label { get; set; }

  /// Additional label information displayed after the label.
  [Parameter] public string LabelInfo { get; set; }

  /// Sets an icon for the label.
  [Parameter] public RenderFragment LabelIcon { get; set; }

  /// Sets the FormGroup required.
  [Parameter] public bool IsRequired { get; set; }

  /// Sets the FormGroup validated. If you set to success, text color of helper text will be modified to indicate valid state.
  /// If set to error,  text color of helper text will be modified to indicate error state.
  [Parameter] public ValidatedOptions? Validated { get; set; }

  /// Sets the FormGroup isInline.
  [Parameter] public bool IsInline { get; set; }

  /// Sets the FormGroupControl to be stacked.
  [Parameter] public bool IsStack { get; set; }

  /// Removes top spacer from label.
  [Parameter] public bool HasNoPaddingTop { get; set; }

  /// Helper text after the field. It can be a simple text or an object.
  [Parameter] public string HelperText { get; set; }

  /// Hides the helper text
  [Parameter] public bool HelperTextHidden { get; set; }

  /// Flag to position the helper text before the field. False by default.
  [Parameter] public bool IsHelperTextBeforeField { get; set; }

  /// Helper text after the field when the field is isValid. It can be a simple text or an object.
  [Parameter] public string HelperTextInvalid { get; set; }

  /// Icon displayed to the left of the helper text.
  [Parameter] public RenderFragment HelperTextIcon { get; set; }

  /// Icon displayed to the left of the helper text when the field is invalid. */
  [Parameter] public RenderFragment HelperTextInvalidIcon { get; set; }

  /// ID of the included field. It has to be the same for proper working.
  [Parameter] public string FieldId { get; set; }

  private string CssClass => new CssBuilder("pf-c-form__group")
    .AddClassFromAttributes(AdditionalAttributes)
    .Build();

  private string FormGroupLabelCssClass => new CssBuilder("pf-c-form__group-label")
    .AddClass("pf-m-info"           , !string.IsNullOrEmpty(LabelInfo))
    .AddClass("pf-m-no-padding-top" , HasNoPaddingTop)
    .Build();

  private string FormGroupControlCssClass => new CssBuilder("pf-c-form__group-control")
    .AddClass("pf-m-inline", IsInline)
    .AddClass("pf-m-stack" , IsStack)
    .Build();

  private string HelperTextCssClass => new CssBuilder("pf-c-form__helper-text")
    .AddClass("pf-m-success", IsValid)
    .AddClass("pf-m-error"  , HasErrors)
    .AddClass("pf-m-warning", HasWarnings)
    .Build();

  private bool   IsValid      { get => Validated is ValidatedOptions.Success; }
  private bool   HasErrors    { get => Validated is ValidatedOptions.Error; }
  private bool   HasWarnings  { get => Validated is ValidatedOptions.Warning; }
  private string HelperTextId { get => $"{FieldId}-helper"; }

  internal void UpdateValidationState(ValidatedOptions? validated, string helperTextInvalid)
  {
    Validated         = validated;
    HelperTextInvalid = helperTextInvalid;
  }
}