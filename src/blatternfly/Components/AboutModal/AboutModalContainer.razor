@namespace Blatternfly.Components

<Backdrop>
  <FocusTrap class="pf-l-bullseye" Active="@IsFocusTrapActive" FocusTrapOptions="@FocusTrapOptions">
    <AboutModalBox
      class="pf-c-about-modal-box"
      aria-labelledby="@AboutModalBoxHeaderId"
      aria-describedby="@AboutModalBoxContentId"
      @onkeydown="KeydownHandler"
    >
      <AboutModalBoxBrand Src="@BrandImageSource" Alt="@BrandImageAlternateText" />
      <AboutModalBoxCloseButton AriaLabel="@CloseButtonAriaLabel" OnClose="@OnClose" />
      @if (!string.IsNullOrEmpty(ProductName))
      {
        <AboutModalBoxHeader id="@AboutModalBoxHeaderId" ProductName="@ProductName" />
      }
      <AboutModalBoxContent
        Trademark="@Trademark"
        NoAboutModalBoxContentContainer="@NoAboutModalBoxContentContainer"
        id="@AboutModalBoxContentId"
        @attributes="AdditionalAttributes"
      >
        @ChildContent
      </AboutModalBoxContent>
      <AboutModalBoxHero BackgroundImageSource="@BackgroundImageSource" />
    </AboutModalBox>
  </FocusTrap>
</Backdrop>

@code {
  /// Additional attributes that will be applied to the component.
  [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

  /// Content rendered inside the component.
  [Parameter] public RenderFragment ChildContent { get; set; }

  /// Flag to show the About Modal.
  [Parameter] public bool IsOpen { get; set; }

  /// Product Name.
  [Parameter] public string ProductName { get; set; }

  /// Trademark information.
  [Parameter] public string Trademark { get; set; }

  /// the URL of the image for the Brand.
  [Parameter] public string BrandImageSource { get; set; }

  /// the alternate text of the Brand image.
  [Parameter] public string BrandImageAlternateText { get; set; }

  /// the URL of the image for the background.
  [Parameter] public string BackgroundImageSource { get; set; }

  /// id to use for About Modal Box aria labeled by.
  [Parameter] public string AboutModalBoxHeaderId { get; set; }

  /** id to use for About Modal Box aria described by  */
  [Parameter] public string AboutModalBoxContentId { get; set; }

  /// Set close button aria label
  [Parameter] public string CloseButtonAriaLabel { get; set; }

  /// Flag to disable focus trap.
  [Parameter] public bool DisableFocusTrap { get; set; }

  /// Prevents the about modal from rendering content inside a container; allows for more flexible layouts.
  [Parameter] public bool NoAboutModalBoxContentContainer { get; set; }

  /// A callback for when the close button is clicked.
  [Parameter] public EventCallback<MouseEventArgs> OnClose { get; set; }

  /// Modal handles pressing of the Escape key and closes the modal.
  [Parameter] public EventCallback<KeyboardEventArgs> OnEscapePress { get; set; }

  private FocusTrapOptions FocusTrapOptions { get; } = new FocusTrapOptions
  {
    TabbableOptions = new TabbableOptions
    {
      DisplayCheck = TabbableDisplayCheck.None
    }
  };

  private bool IsFocusTrapActive { get => !DisableFocusTrap; }

  private async Task KeydownHandler(KeyboardEventArgs args)
  {
    if (args.Key == Keys.Escape)
    {
      await OnEscapePress.InvokeAsync(args);
    }
  }
}