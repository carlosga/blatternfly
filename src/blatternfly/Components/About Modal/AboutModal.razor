@namespace Blatternfly.Components
@inherits BaseComponent
@implements IDisposable
@inject IDomUtils DomUtils
@inject IPortalConnector PortalConnector
@inject ISequentialIdGenerator SequentialIdGenerator

<Portal IsOpen="@IsOpen">
  <AboutModalContainer
    AboutModalBoxHeaderId="@AboutModalBoxHeaderId"
    AboutModalBoxContentId="@AboutModalBoxContentId"
    ProductName="@ProductName"
    Trademark="@Trademark"
    BrandImageSource="@BrandImageSource"
    BrandImageAlternateText="@BrandImageAlternateText"
    BackgroundImageSource="@BackgroundImageSource"
    CloseButtonAriaLabel="@CloseButtonAriaLabel"
    DisableFocusTrap="@DisableFocusTrap"
    NoAboutModalBoxContentContainer="@NoAboutModalBoxContentContainer"
    OnClose="@OnCloseHandler"
    OnEscapePress="@OnEscapePressHandler"
    @attributes="AdditionalAttributes"
  >
    @ChildContent
  </AboutModalContainer>
</Portal>

@code {
  /// Flag to show the about modal.
  [Parameter] public bool IsOpen { get; set; }

  /// Product name.
  [Parameter] public string ProductName { get; set; }

  /// Trademark information.
  [Parameter] public string Trademark { get; set; }

  /// The URL of the image for the brand.
  [Parameter] public string BrandImageSource { get; set; }

  /// The alternate text of the brand image.
  [Parameter] public string BrandImageAlternateText { get; set; }

  /// The URL of the image for the background.
  [Parameter] public string BackgroundImageSource { get; set; }

  /// Prevents the about modal from rendering content inside a container; allows for more flexible layouts.
  [Parameter] public bool NoAboutModalBoxContentContainer { get; set; }

  /// Set aria label to the close button.
  [Parameter] public string CloseButtonAriaLabel { get; set; }

  /// Flag to disable focus trap.
  [Parameter] public bool DisableFocusTrap { get; set; }

  /// A callback for when the close button is clicked.
  [Parameter] public EventCallback OnClose { get; set; }

  private string _id;
  private IDisposable _portalConnectedSubscription;
  private IDisposable _portalDisconnectedSubscription;

  private string AboutModalBoxHeaderId  { get => $"pf-about-modal-title-{_id}"; }
  private string AboutModalBoxContentId { get => $"pf-about-modal-content-{_id}"; }

  public void Dispose()
  {
    _portalConnectedSubscription?.Dispose();
    _portalDisconnectedSubscription?.Dispose();
  }

  protected override void OnInitialized()
  {
    base.OnInitialized();

    _id                             = SequentialIdGenerator.GenerateId("pf-c-aboutmodal");
    _portalConnectedSubscription    = PortalConnector.OnConnect.Subscribe(async p => await OnPortalConnected(p));
    _portalDisconnectedSubscription = PortalConnector.OnDisconnect.Subscribe(async p => await OnPortalDisconnected(p));
  }

  protected override void OnParametersSet()
  {
    base.OnParametersSet();

    if (!string.IsNullOrEmpty(BrandImageSource) && string.IsNullOrEmpty(BrandImageAlternateText))
    {
      throw new InvalidOperationException($"AboutModal: {nameof(BrandImageAlternateText)} is required when a {nameof(BrandImageSource)} is specified");
    }
  }

  internal async Task CloseAsync()
  {
    IsOpen = false;
    StateHasChanged();
    await OnClose.InvokeAsync();
  }

  private async Task OnCloseHandler(MouseEventArgs args)
  {
    await CloseAsync();
  }

  private async Task OnEscapePressHandler(KeyboardEventArgs args)
  {
    await OnClose.InvokeAsync();
  }

  private async ValueTask OnPortalConnected(Portal portal)
  {
    await DomUtils.SetBodyClass("pf-c-backdrop__open");
  }

  private async ValueTask OnPortalDisconnected(Portal portal)
  {
    await DomUtils.RemoveBodyClass("pf-c-backdrop__open");
  }
}