@namespace Blatternfly.Components
@inherits BaseComponent

@if (IsOpen)
{
  <Portal IsOpen="@IsOpen">
    <CascadingValue Value="this">
      <AboutModalContainer
        AboutModalBoxHeaderId="@AboutModalBoxHeaderId"
        AboutModalBoxContentId="@AboutModalBoxContentId"
        ProductName="@ProductName"
        Trademark="@Trademark"
        BrandImageSource="@BrandImageSource"
        BrandImageAlternateText="@BrandImageAlternateText"
        BackgroundImageSource="@BackgroundImageSource"
        ChildContent="@ChildContent"
        CloseButtonAriaLabel="@CloseButtonAriaLabel"
        OnEscapePress="@OnEscapePressHandler"
        @attributes="AdditionalAttributes"
      />
    </CascadingValue>
  </Portal>
}

@code {
  /// Flag to show the about modal.
  [Parameter] public bool IsOpen { get; set; }

  /// Product name.
  [Parameter] public string ProductName { get; set; }

  /// Trademark information.
  [Parameter] public string Trademark { get; set; }

  /// The URL of the image for the brand.
  [Parameter] public string BrandImageSource { get; set; }

  /// The alternate text of the brand image.
  [Parameter] public string BrandImageAlternateText { get; set; }

  /// The URL of the image for the background.
  [Parameter] public string BackgroundImageSource { get; set; }

  /// Prevents the about modal from rendering content inside a container; allows for more flexible layouts.
  [Parameter] public bool NoAboutModalBoxContentContainer { get; set; }

  /// Set aria label to the close button.
  [Parameter] public string CloseButtonAriaLabel { get; set; }

  /// A callback for when the close button is clicked.
  [Parameter] public EventCallback OnClose { get; set; }

  private readonly string _id = Utils.GetUniqueId("pf-c-aboutmodal");

  private string AboutModalBoxHeaderId  { get => $"pf-about-modal-title-{_id}"; }
  private string AboutModalBoxContentId { get => $"pf-about-modal-content-{_id}"; }

  internal async Task CloseAsync()
  {
    IsOpen = false;
    StateHasChanged();
    await OnClose.InvokeAsync();
  }

  protected override void OnParametersSet()
  {
    base.OnParametersSet();

    if (!string.IsNullOrEmpty(BrandImageSource) && string.IsNullOrEmpty(BrandImageAlternateText))
    {
      throw new InvalidOperationException($"AboutModal: {nameof(BrandImageAlternateText)} is required when a {nameof(BrandImageSource)} is specified");
    }
  }

  private async Task OnEscapePressHandler(KeyboardEventArgs args)
  {
    await OnClose.InvokeAsync();
  }
}