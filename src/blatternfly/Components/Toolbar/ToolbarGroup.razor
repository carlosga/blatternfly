@namespace Blatternfly.Components

<div @attributes="AdditionalAttributes" class="@CssClass">
  @ChildContent
</div>

@code {
  /// Additional attributes that will be applied to the component.
  [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

  /// Content rendered inside the component.
  [Parameter] public RenderFragment ChildContent { get; set; }

  /// Parent Page component.
  [CascadingParameter] public Page ParentPage { get; set; }

  /// A type modifier which modifies spacing specifically depending on the type of group.
  [Parameter] public ToolbarGroupVariant? Variant { get; set; }

  /// Visibility at various breakpoints.
  [Parameter] public VisibilityModifiers Visibility { get; set; }

  /// Alignment at various breakpoints..
  [Parameter] public AlignmentModifiers Alignment { get; set; }

  /// Spacers at various breakpoints..
  [Parameter] public ToolbarSpacer ToolbarSpacer { get; set; }

  /// Space items at various breakpoints..
  [Parameter] public ToolbarSpaceItem ToolbarSpaceItems { get; set; }

  private string CssClass => new CssBuilder("pf-c-toolbar__group")
    .AddClass("pf-m-filter-group"     , Variant is ToolbarGroupVariant.FilterGroup)
    .AddClass("pf-m-icon-button-group", Variant is ToolbarGroupVariant.IconButtonGroup)
    .AddClass("pf-m-button-group"     , Variant is ToolbarGroupVariant.ButtonGroup)
    .AddClass(Visibility?.CssClass(ParentPage?.Breakpoint))
    .AddClass(Alignment?.CssClass(ParentPage?.Breakpoint))
    .AddClass(ToolbarSpacer?.CssClass(ParentPage?.Breakpoint))
    .AddClass(ToolbarSpaceItems?.CssClass(ParentPage?.Breakpoint))
    .AddClassFromAttributes(AdditionalAttributes)
    .Build();
}