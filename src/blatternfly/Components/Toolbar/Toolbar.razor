@namespace Blatternfly.Components
@inherits BaseComponent
@inject IDomUtils DomUtils
@inject ISequentialIdGenerator SequentialIdGenerator

<CascadingValue Value="this" IsFixed="true">
  <div
    @attributes="AdditionalAttributes"
    class="@CssClass"
    id="@ToolbarId"
  >
    @ChildContent
    <ToolbarChipGroupContent
      IsExpanded="IsExpanded"
      ClearAllFilters="@ClearAllFilters"
      ShowClearFiltersButton="@ShowClearFiltersButton"
      ClearFiltersButtonText="@ClearFiltersButtonText"
      NumberOfFilters="@NumberOfFilters"
      NumberOfFiltersText="@NumberOfFiltersText"
      CollapseListedFiltersBreakpoint="@CollapseListedFiltersBreakpoint"
    />
  </div>
</CascadingValue>

@code  {
  [CascadingParameter] public Page ParentPage { get; set; }

  /// Optional callback for clearing all filters in the toolbar.
  [Parameter] public EventCallback ClearAllFilters { get; set; }

  /// Text to display in the clear all filters button.
  [Parameter] public string ClearFiltersButtonText { get; set; }

  /// The breakpoint at which the listed fitlers in chip groups are collapsed down to a summary.
  [Parameter] public CollapseFilterBreakpoints CollapseListedFiltersBreakpoint { get; set; }

  /// Flag indicating if a data toolbar toggle group's expandable content is expanded.
  [Parameter] public bool IsExpanded { get; set; }

  /// A callback for setting the isExpanded flag.
  [Parameter] public EventCallback ToggleIsExpanded { get; set; }

  /// Flag indicating the toolbar height should expand to the full height of the container.
  [Parameter] public bool IsFullHeight { get; set; }

  /// Flag indicating the toolbar is static.
  [Parameter] public bool IsStatic { get; set; }

  /// Flag indicating the toolbar should use the Page insets.
  [Parameter] public bool UsePageInsets { get; set; }

  /// Flag indicating the toolbar should stick to the top of its container.
  [Parameter] public bool IsSticky { get; set; }

  /// Insets at various breakpoints..
  [Parameter] public Inset Inset { get; set; }

  /// Flag used if the user has opted NOT to manage the 'isExpanded' state of the toggle group.
  /// Indicates whether or not the toggle group is expanded..
  [Parameter] public bool IsManagedToggleExpanded { get; set; }

  /// Total number of filters currently being applied across all ToolbarFilter components.
  [Parameter] public int NumberOfFilters { get; set; }

  /// Text to display in the total number of applied filters ToolbarFilter
  [Parameter] public string NumberOfFiltersText { get; set; }

  /// Used to keep track of window width so we can collapse expanded content when window is resizing.
  [Parameter] public int WindowWidth { get; set; }

  private string CssClass => new CssBuilder("pf-c-toolbar")
    .AddClass("pf-m-page-insets", UsePageInsets)
    .AddClass(Inset?.CssClass(ParentPage?.Breakpoint))
    .AddClass("pf-m-full-height", IsFullHeight)
    .AddClass("pf-m-static"     , IsStatic)
    .AddClass("pf-m-sticky"     , IsSticky)
    .AddClassFromAttributes(AdditionalAttributes)
    .Build();

  internal string ToolbarId              { get; private set; }
  private  bool   IsToggleManaged        { get => !IsExpanded || ToggleIsExpanded.HasDelegate; }
  private  bool   ShowClearFiltersButton { get => NumberOfFilters > 0; }

  protected override void OnInitialized()
  {
    base.OnInitialized();

    ToolbarId = SequentialIdGenerator.GenerateId("pf-c-toolbar");
  }

  protected override async Task OnParametersSetAsync()
  {
    await base.OnParametersSetAsync();

    var windowSize = await DomUtils.GetWindowSizeAsync();

    WindowWidth = windowSize.Width;
  }
}