@namespace Blatternfly.Components
@using Blatternfly.Observers
@inherits BaseComponent
@inject IWindowObserver WindowObserver

<div
  class="pf-c-toolbar__group pf-m-toggle-group @VariantClass @BreakpointClass @VisibilityClass @AlignmentClass @SpacerClass @SpaceItemsClass"
  @attributes="AdditionalAttributes"
>
  <div class="pf-c-toolbar__toggle">
    <Button
      Variant="ButtonVariant.Plain"
      OnClick="@ToggleIsExpanded"
      aria-label="Show Filters"
      aria-expanded="@AriaExpanded"
      aria-haspopup="@AriaHaspopup"
      aria-controls="@ExpandableContentId"
    >
      @ToggleIcon
    </Button>
  </div>
  @ChildContent
</div>

@code {
  [CascadingParameter] public Toolbar Parent { get; set; }

  /// An icon to be rendered when the toggle group has collapsed down.
  [Parameter] public RenderFragment ToggleIcon { get; set; }

  /// Controls when filters are shown and when the toggle button is hidden.
  [Parameter] public CollapseFilterBreakpoints? Breakpoint { get; set; }

  /// Visibility at various breakpoints.
  [Parameter] public Visibility Visibility { get; set; }
  
  /// A type modifier which modifies spacing specifically depending on the type of group.
  [Parameter] public ToolbarGroupVariant? Variant { get; set; }

  /// Alignment at various breakpoints..
  [Parameter] public Alignment Alignment { get; set; }

  /// Spacers at various breakpoints..
  [Parameter] public ToolbarSpacer ToolbarSpacer { get; set; }

  /// Space items at various breakpoints..
  [Parameter] public ToolbarSpaceItem ToolbarSpaceItems { get; set; }

  [Parameter] public EventCallback<MouseEventArgs> ToggleIsExpanded { get; set; }

  private bool _canUseDom;
  private int  _windowInnerWidth;

  private string AriaExpanded        { get => Parent.IsExpanded ? "true" : null; }
  private string AriaHaspopup        { get => Parent.IsExpanded ? IsContentPopup() : null; }
  private string ExpandableContentId { get => ""; }

  private string AlignmentClass  { get => Alignment?.CssClass; }
  private string SpacerClass     { get => ToolbarSpacer?.CssClass; }
  private string SpaceItemsClass { get => ToolbarSpaceItems?.CssClass; }
  private string VisibilityClass { get => Visibility?.CssClass; }
  private string VariantClass
  {
    get => Variant switch
    {
        ToolbarGroupVariant.FilterGroup     => "pf-m-filter-group",
        ToolbarGroupVariant.IconButtonGroup => "pf-m-icon-button-group",
        ToolbarGroupVariant.ButtonGroup     => "pf-m-button-group",
        _                                   => null
    };
  }

  private string BreakpointClass
  {
    get => Breakpoint switch
    {
      CollapseFilterBreakpoints.All         => "pf-m-show",
      CollapseFilterBreakpoints.Small       => "pf-m-show-on-sm",
      CollapseFilterBreakpoints.Medium      => "pf-m-show-on-md",
      CollapseFilterBreakpoints.Large       => "pf-m-show-on-lg",
      CollapseFilterBreakpoints.ExtraLarge  => "pf-m-show-on-xl",
      CollapseFilterBreakpoints.ExtraLarge2 => "pf-m-show-on-2xl",
      _                                     => null
    };
  }

  private string IsContentPopup()
  {
    var viewportSize = _canUseDom ? _windowInnerWidth : 1200;

    return viewportSize < GlobalBreakpoints.Large ? "true" : null;
  }

  protected override async Task OnParametersSetAsync()
  {
    await base.OnParametersSetAsync();

    if (!Breakpoint.HasValue || ToggleIcon is null)
    {
      throw new Exception("ToolbarToggleGroup will not be visible without a breakpoint or toggleIcon.");
    }

    _canUseDom = WindowObserver.CanUseDom;
    if (_canUseDom)
    {
      var windowSize = await WindowObserver.WindowSize();
      _windowInnerWidth = windowSize.Width;
    }
  }
}