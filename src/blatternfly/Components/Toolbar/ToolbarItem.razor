@namespace Blatternfly.Components
@inherits BaseComponent

@if (Variant == ToolbarItemVariant.Separator)
{
  <Divider @attributes="AdditionalAttributes" IsVertical />
}
else
{
  <div
    class="@CssClass"
    aria-hidden="@AriaHidden"
    id="@InternalId"
    style="@WidthsStyle"
    @attributes="AdditionalAttributes"
  >
    @ChildContent
  </div>
}

@code {
  [CascadingParameter] public Page ParentPage { get; set; }

  /// A type modifier which modifies spacing specifically depending on the type of item.
  [Parameter] public ToolbarItemVariant? Variant { get; set; }

  /// Visibility at various breakpoints.
  [Parameter] public Visibility Visibility { get; set; }

  /// Alignment at various breakpoints.
  [Parameter] public Alignment Alignment { get; set; }

  /// Spacers at various breakpoints.
  [Parameter] public ToolbarSpacer ToolbarSpacer { get; set;}

  /// Widths at various breakpoints.
  [Parameter] public ToolbarItemWidths Widths { get; set; }

  /// Flag indicating if the expand-all variant is expanded or not.
  [Parameter] public bool IsAllExpanded { get; set; }

  private string CssClass => new CssBuilder("pf-c-toolbar__item")
    .AddClass("pf-m-bulk-select"  , Variant == ToolbarItemVariant.BulkSelect)
    .AddClass("pf-m-overflow-menu", Variant == ToolbarItemVariant.OverflowMenu)
    .AddClass("pf-m-pagination"   , Variant == ToolbarItemVariant.Pagination)
    .AddClass("pf-m-search-filter", Variant == ToolbarItemVariant.SearchFilter)
    .AddClass("pf-m-search-label" , Variant == ToolbarItemVariant.Label)
    .AddClass("pf-c-chip-group"   , Variant == ToolbarItemVariant.ChipGroup)
    .AddClass("pf-m-expand-all"   , Variant == ToolbarItemVariant.ExpandAll)
    .AddClass("pf-m-expanded"     , IsAllExpanded)
    .AddClass(Visibility?.CssClass(ParentPage?.Breakpoint))
    .AddClass(Alignment?.CssClass(ParentPage?.Breakpoint))
    .AddClass(ToolbarSpacer?.CssClass(ParentPage?.Breakpoint))
    .Build();

  private string AriaHidden  { get => Variant == ToolbarItemVariant.Label ? "true" : null; }
  private string WidthsStyle { get => Widths?.CssStyle; }
}
