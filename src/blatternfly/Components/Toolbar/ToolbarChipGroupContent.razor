@namespace Blatternfly.Components
@inject IDomUtils DomUtils

<div @attributes="AdditionalAttributes" class="@CssClass" hidden="@ContentHidden">
  <ToolbarGroup
    class="@ToolbarGroupClass"
    hidden="@ToolbarGroupHidden"
    aria-hidden="@ToolbarGroupHidden"
  />
  @if (CollapseListedFilters && NumberOfFilters > 0 && !IsExpanded)
  {
    <ToolbarGroup>
      <ToolbarItem>@FormattedNumberOfFiltersText</ToolbarItem>
    </ToolbarGroup>
  }
  @if (ShowClearFiltersButton && !IsExpanded && CustomChipGroupContent is null)
  {
    <ToolbarItem>
      <Button Variant="ButtonVariant.Link" OnClick="@ClearAllFilters">
        @ClearFiltersButtonText
      </Button>
    </ToolbarItem>
  }
  @if (CustomChipGroupContent is not null)
  {
    @CustomChipGroupContent
  }
</div>

@code {
  /// Additional attributes that will be applied to the component.
  [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

  /// Flag indicating if a data toolbar toggle group's expandable content is expanded.
  [Parameter] public  bool IsExpanded { get; set; }

  /// optional callback for clearing all filters in the toolbar.
  [Parameter] public EventCallback ClearAllFilters { get; set; }

  /// Flag indicating that the clear all filters button should be visible.
  [Parameter] public bool ShowClearFiltersButton { get; set; }

  /// Text to display in the clear all filters button.
  [Parameter] public string ClearFiltersButtonText { get; set; } = "Clear all filters";

  /// Total number of filters currently being applied across all ToolbarFilter components.
  [Parameter] public int NumberOfFilters { get; set; }

  /// Text to display in the total number of applied filters ToolbarFilter
  [Parameter] public string NumberOfFiltersText { get; set; } = "{0} filters applied";

  /// The breakpoint at which the listed filters in chip groups are collapsed down to a summary.
  [Parameter] public CollapseFilterBreakpoints CollapseListedFiltersBreakpoint { get; set; } = CollapseFilterBreakpoints.Large;

  /// Custom additional content appended to the generated chips.
  /// To maintain spacing and styling, each node should be a ToolbarItem or ToolbarGroup.
  /// This property will remove the built in "Clear all filters" button.
  [Parameter] public RenderFragment CustomChipGroupContent { get; set; }

  private string FormattedNumberOfFiltersText { get => string.Format(NumberOfFiltersText, NumberOfFilters); }

  private string CssClass => new CssBuilder("pf-c-toolbar__content")
    .AddClass("pf-m-hidden", IsHidden)
    .AddClassFromAttributes(AdditionalAttributes)
    .Build();

  private Size<int> _windowSize;

  private bool   IsHidden           { get => NumberOfFilters == 0 || IsExpanded; }
  private string ContentHidden      { get => IsHidden ? "true" : null; }
  private string ToolbarGroupClass  { get => CollapseListedFilters ? "pf-m-hidden" : null; }
  private string ToolbarGroupHidden { get => CollapseListedFilters ? "true" : null; }

  private int CollapseListedFiltersBreakpointValue
  {
    get => CollapseListedFiltersBreakpoint switch
    {
      CollapseFilterBreakpoints.Small       => GlobalBreakpoints.Small,
      CollapseFilterBreakpoints.Medium      => GlobalBreakpoints.Medium,
      CollapseFilterBreakpoints.Large       => GlobalBreakpoints.Large,
      CollapseFilterBreakpoints.ExtraLarge  => GlobalBreakpoints.ExtraLarge,
      CollapseFilterBreakpoints.ExtraLarge2 => GlobalBreakpoints.ExtraLarge2,
      _                                     => 0
    };
  }

  private bool CollapseListedFilters
  {
    get
    {
      return (CollapseListedFiltersBreakpoint == CollapseFilterBreakpoints.All)
        ? true
          : _windowSize.Width < CollapseListedFiltersBreakpointValue;
    }
  }

  protected override async Task OnParametersSetAsync()
  {
    await base.OnParametersSetAsync();

    _windowSize = await DomUtils.GetWindowSizeAsync();
  }
}
