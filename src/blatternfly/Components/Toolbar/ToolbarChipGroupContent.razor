@namespace Blatternfly.Components
@inherits BaseComponent
@inject Microsoft.JSInterop.IJSRuntime JS

<div class="pf-c-toolbar__content">
  <ToolbarGroup class="@ToolbarGroupClass"
    hidden="@ToolbarGroupHidden"
    aria-hidden="@ToolbarGroupHidden"
  />
  @if (CollapseListedFilters && NumberOfFilters > 0 && !IsExpanded)
  {
    <ToolbarGroup>
      <ToolbarItem>@NumberOfFilters filters applied</ToolbarItem>
    </ToolbarGroup>
  }
  @if (ShowClearFiltersButton && !IsExpanded)
  {
    <ToolbarItem>
      <Button Variant="ButtonVariant.Link" OnClick="@ClearAllFilters" IsInline="true">
        @ClearFiltersButtonText
      </Button>
    </ToolbarItem>
  }
</div>

@code {
  /// Flag indicating if a data toolbar toggle group's expandable content is expanded.
  [Parameter] public  bool IsExpanded { get; set; }

  /// optional callback for clearing all filters in the toolbar.
  [Parameter] public EventCallback ClearAllFilters { get; set; }

  /// Flag indicating that the clear all filters button should be visible.
  [Parameter] public bool ShowClearFiltersButton { get; set; }

  /// Text to display in the clear all filters button.
  [Parameter] public string ClearFiltersButtonText { get; set; } = "Clear all filters";

  /// Total number of filters currently being applied across all ToolbarFilter components.
  [Parameter] public int NumberOfFilters { get; set; }

  /// The breakpoint at which the listed filters in chip groups are collapsed down to a summary.
  [Parameter] public CollapseFilterBreakpoints CollapseListedFiltersBreakpoint { get; set; } = CollapseFilterBreakpoints.Large;

  private bool _canUseDom;
  private int _windowInnerWidth;

  private bool   IsHidden           { get => NumberOfFilters == 0 || IsExpanded; }
  private string ToolbarGroupClass  { get => CollapseListedFilters ? "pf-m-hidden" : null; }
  private string ToolbarGroupHidden { get => CollapseListedFilters ? "true" : null; }

  private int CollapseListedFiltersBreakpointValue
  {
    get => CollapseListedFiltersBreakpoint switch
    {
      CollapseFilterBreakpoints.Small       => GlobalBreakpoints.Small,
      CollapseFilterBreakpoints.Medium      => GlobalBreakpoints.Medium,
      CollapseFilterBreakpoints.Large       => GlobalBreakpoints.Large,
      CollapseFilterBreakpoints.ExtraLarge  => GlobalBreakpoints.ExtraLarge,
      CollapseFilterBreakpoints.ExtraLarge2 => GlobalBreakpoints.ExtraLarge2,
      _                                     => 0
    };
  }

  private bool CollapseListedFilters
  {
    get
    {
      if (CollapseListedFiltersBreakpoint == CollapseFilterBreakpoints.All)
      {
        return true;
      }
      else if (_canUseDom)
      {
        return (_canUseDom ? _windowInnerWidth : 1200) < CollapseListedFiltersBreakpointValue;
      }

      return false;
    }
  }

  protected override async Task OnParametersSetAsync()
  {
    await base.OnParametersSetAsync();

    _canUseDom = await JS.InvokeAsync<bool>("Blatternfly.canUseDOM", null);
    if (_canUseDom)
    {
      _windowInnerWidth = await JS.InvokeAsync<int>("Blatternfly.windowInnerWidth", null);
    }
  }
}
