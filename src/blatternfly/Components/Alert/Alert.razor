@namespace Blatternfly.Components
@inherits BaseComponent

@if (!IsClosed)
{
  <div
    class="@CssClass"
    aria-label="@AriaLabelValue"
    aria-live="@AriaLive"
    aria-atomic="@AriaAtomic"
  >
    @if (IsExpandable)
    {
      <CascadingValue Value="this" IsFixed="true">
        <div class="pf-c-alert__toggle">
          <AlertToggleExpandButton
            IsExpanded="@IsExpanded"
            OnToggleExpand="@OnToggleExpand"
            AriaLabel="@ToggleAriaLabelValue"
          />
        </div>
      </CascadingValue>
    }
    @if (CustomIcon is not null)
    {
      <AlertIcon Variant="@AlertIconVariant">
        <CustomIcon>@CustomIcon</CustomIcon>
      </AlertIcon>
    }
    else
    {
      <AlertIcon Variant="@AlertIconVariant"/>
    }
    <TitleHeadingLevel class="@TitleCssClass" style="@TruncateTitleStyle" HeadingLevel="@TitleHeadingLevel">
      <span class="pf-u-screen-reader">@VariantLabelValue</span> @Title
    </TitleHeadingLevel>
    @if (ActionClose is not null)
    {
      <div class="pf-c-alert__action">@ActionClose</div>
    }
    @if (ChildContent is not null && (!IsExpandable || (IsExpandable && IsExpanded)))
    {
      <div class="pf-c-alert__description">@ChildContent</div>
    }
    @if (ActionLinks is not null)
    {
      <div class="pf-c-alert__action-group">@ActionLinks</div>
    }
  </div>
}

@code {
  /// Adds alert variant styles.
  [Parameter] public AlertVariant Variant { get; set; } = AlertVariant.Default;

  /// Flag to indicate if the Alert is inline.
  [Parameter] public bool IsInline { get; set; }

  /// Flag to indicate if the alert is plain.
  [Parameter] public bool IsPlain { get; set; }

  /// Title of the Alert.
  [Parameter] public string Title { get; set; }

  /// Sets the heading level to use for the alert title. Default is h4.
  [Parameter] public HeadingLevel TitleHeadingLevel { get; set; } = HeadingLevel.h4;

  /// Close button; use the AlertActionCloseButton component.
  [Parameter] public RenderFragment ActionClose { get; set; }

  /// Action links; use a single AlertActionLink component or multiple wrapped in an array or React.Fragment.
  [Parameter] public RenderFragment ActionLinks { get; set; }

  /// Adds accessible text to the Alert.
  [Parameter] public string AriaLabel { get; set; }

  /// Variant label text for screen readers.
  [Parameter] public string VariantLabel { get; set; }

  /// Flag to indicate if the Alert is in a live region.
  [Parameter] public bool IsLiveRegion { get; set; }

  /// Truncate title to number of lines.
  [Parameter] public int TruncateTitle { get; set; }

  /// Set a custom icon to the Alert. If not set the icon is set according to the variant.
  [Parameter] public RenderFragment CustomIcon { get; set; }

  /// Flag indicating that the alert is expandable
  [Parameter] public bool IsExpandable { get; set; }

  /// Adds accessible text to the alert Toggle.
  [Parameter] public string ToggleAriaLabel { get; set; }

  private string CssClass => new CssBuilder("pf-c-alert")
    .AddClass("pf-m-inline"     ,  IsInline)
    .AddClass("pf-m-plain"      ,  IsPlain)
    .AddClass("pf-m-expandable" ,  IsExpandable)
    .AddClass("pf-m-expanded"   ,  IsExpanded)
    .AddClass("pf-m-danger"     ,  Variant == AlertVariant.Danger)
    .AddClass("pf-m-info"       ,  Variant == AlertVariant.Info)
    .AddClass("pf-m-success"    ,  Variant == AlertVariant.Success)
    .AddClass("pf-m-warning"    ,  Variant == AlertVariant.Warning)
    .Build();

  private string TitleCssClass => new CssBuilder("pf-c-alert__title")
    .AddClass("pf-m-truncate",  TruncateTitle > 0)
    .Build();

  private string TruncateTitleStyle => new StyleBuilder()
    .AddStyle("--pf-c-alert__title--max-lines", TruncateTitle, TruncateTitle > 0)
    .Build();

  private bool IsClosed   { get; set; }
  private bool IsExpanded { get; set; }

  private AlertIconVariants AlertIconVariant
  {
    get => Variant switch
    {
      AlertVariant.Success => AlertIconVariants.Success,
      AlertVariant.Danger  => AlertIconVariants.Danger,
      AlertVariant.Warning => AlertIconVariants.Warning,
      AlertVariant.Info    => AlertIconVariants.Info,
      _                    => AlertIconVariants.Default
    };
  }

  private string AriaLabelValue { get => string.IsNullOrEmpty(AriaLabel) ? $"{Variant} Alert" : AriaLabel; }
  private string AriaLive       { get => IsLiveRegion ? "polite" : null; }
  private string AriaAtomic     { get => IsLiveRegion ? "false" : null; }

  private string ToggleAriaLabelValue
  {
    get => string.IsNullOrEmpty(ToggleAriaLabel) ? $"{Variant} alert details" : ToggleAriaLabel;
  }

  private string VariantLabelValue
  {
    get => string.IsNullOrEmpty(VariantLabel) ? $"{Variant} alert:" : VariantLabel;
  }

  private void OnToggleExpand(MouseEventArgs _)
  {
    IsExpanded = !IsExpanded;
  }
}
