@namespace Blatternfly.Components
@inject IComponentIdGenerator ComponentIdGenerator
@inject IDomUtils DomUtils

@typeparam TItem

@if (Items is not null && Items.Count > 0)
{
  <div
    class="@CssClass"
  >
    <div class="pf-c-label-group__main">
      @if (!string.IsNullOrEmpty(CategoryName))
      {
        @if (IsTooltipVisible)
        {
          <Tooltip id="@TooltipId" Reference="@LabelGroupId" Position="@TooltipPosition">
            <Content>
              @CategoryName
            </Content>
            <ChildContent>
              <span
                class="pf-c-label-group__label"
                @ref="HeadingRef"
              >
                <span aria-hidden="true" id="@LabelGroupId">
                  @CategoryName
                </span>
              </span>
            </ChildContent>
          </Tooltip>
        }
        else
        {
          <span
            class="pf-c-label-group__label"
            aria-hidden="true"
            id="@LabelGroupId"
            @ref="HeadingRef"
          >
            @CategoryName
          </span>
        }
      }
      <ul
        class="pf-c-label-group__list"
        aria-labelledby="@AriaLabelledByValue"
        aria-label="@AriaLabelValue"
        role="list"
      >
        @foreach (var item in Slice)
        {
          <li class="pf-c-label-group__list-item" @key="item">
            @ItemTemplate(item)
          </li>
        }
        @if (Items.Count > NumLabels)
        {
          <li class="pf-c-label-group__list-item">
            <Label IsOverflowLabel IsCompact="@IsCompact" OnClick="@ToggleCollapse">
              @if (IsOpen)
              {
                @ExpandedText
              }
              else
              {
                @CollapsedTextResult
              }
            </Label>
          </li>
        }
      </ul>
    </div>
    @if (IsClosable)
    {
      <div class="pf-c-label-group__close">
        <Button
          Variant="ButtonVariant.Plain"
          AriaLabel="@CloseBtnAriaLabel"
          OnClick="@OnClick"
          id="@CloseButtonId"
          aria-labelledby="@CloseButtonAriaLabelledBy"
        >
          <TimesCircleIcon aria-hidden="true" />
        </Button>
      </div>
    }
  </div>
}

@code {
  /// Additional attributes that will be applied to the component.
  [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }

  /// Content rendered inside the component.
  [Parameter] public RenderFragment ChildContent { get; set; }

  /// Flag for having the label group default to expanded.
  [Parameter] public bool DefaultIsOpen { get; set; }

  /// Customizable "Show Less" text string.
  [Parameter] public string ExpandedText { get; set; } = "Show Less";

  /// Customizable template string. Use placeholder "{0}" for the overflow label count.
  [Parameter] public string CollapsedText { get; set; } = "{0} more";

  /// Category name text for the label group category.  If this prop is supplied the label group with have a label and category styling applied.
  [Parameter] public string CategoryName { get; set; }

  /// Aria label for label group that does not have a category name.
  [Parameter] public string AriaLabel { get; set; } = "Label group category";

  /// Set number of labels to show before overflow.
  [Parameter] public int NumLabels { get; set; } = 3;

  /// Flag if label group can be closed.
  [Parameter] public bool IsClosable { get; set; }

  /// Flag indicating the labels in the group are compact.
  [Parameter] public bool IsCompact { get; set; }

  /// Aria label for close button.
  [Parameter] public string CloseBtnAriaLabel { get; set; } = "Close label group";

  /// Function that is called when clicking on the label group close button.
  [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }

  /// Flag to implement a vertical layout.
  [Parameter] public bool IsVertical { get; set; }

  /// Item template
  [Parameter] public RenderFragment<TItem> ItemTemplate { get; set; }

  /// Label Group items.
  [Parameter] public IReadOnlyList<TItem> Items { get; set; }

  /// Position of the tooltip which is displayed if text is truncated.
  [Parameter] public TooltipPosition TooltipPosition { get; set; } = TooltipPosition.Top;

  private string CssClass => new CssBuilder("pf-c-label-group")
    .AddClass("pf-m-category", !string.IsNullOrEmpty(CategoryName))
    .AddClass("pf-m-vertical", IsVertical)
    .AddClassFromAttributes(AdditionalAttributes)
    .Build();

  private IEnumerable<TItem> Slice { get => !IsOpen ? Items.Take(NumLabels) : Items; }

  private bool   IsOpen                    { get; set; }
  private string LabelGroupId              { get; set; }
  private string InternalId                { get => AdditionalAttributes.GetPropertyValue(HtmlAttributes.Id); }
  private string AriaLabelValue            { get => string.IsNullOrEmpty(CategoryName) ? AriaLabel : null; }
  private string AriaLabelledByValue       { get => !string.IsNullOrEmpty(CategoryName) ? LabelGroupId : null; }
  private string CollapsedTextResult       { get => string.Format(CollapsedText, Items.Count - NumLabels); }
  private string CloseButtonId             { get => $"remove_group_{LabelGroupId}"; }
  private string CloseButtonAriaLabelledBy { get => $"remove_group_{LabelGroupId} {LabelGroupId}"; }

  private string TooltipId        { get => $"{LabelGroupId}-tooltip"; }
  private bool   IsTooltipVisible { get; set; }

  private ElementReference HeadingRef { get; set; }

  protected override void OnInitialized()
  {
    base.OnInitialized();

    LabelGroupId = !string.IsNullOrEmpty(InternalId) ? InternalId : ComponentIdGenerator.Generate("pf-c-chip__group");
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);

    if (firstRender)
    {
      IsTooltipVisible = await DomUtils.HasTruncatedWidth(HeadingRef);
      if (IsTooltipVisible)
      {
        StateHasChanged();
      }
    }
  }

  private async Task ToggleCollapse(MouseEventArgs _)
  {
    IsOpen           = !IsOpen;
    IsTooltipVisible = await DomUtils.HasTruncatedWidth(HeadingRef);
  }
}