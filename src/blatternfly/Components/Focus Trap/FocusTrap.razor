@namespace Blatternfly.Components
@inherits BaseComponent
@implements IAsyncDisposable
@using Microsoft.JSInterop
@inject IFocusTrapInteropModule FocusTrapInterop

<div @attributes="AdditionalAttributes" @ref="Element">
  @ChildContent
</div>

@code {
  [Parameter] public bool Active { get; set; } = true;
  [Parameter] public bool Paused { get; set; }
  [Parameter] public bool FocusTrapOptions { get; set; }
  [Parameter] public bool PreventScrollOnDeactivate { get; set; }
  [Parameter] public FocusTrapOptions Options { get; set; }

  private ElementReference Element { get; set; }
  private IJSObjectReference FocusTrapInstance { get; set; }

  public async ValueTask DisposeAsync()
  {
    if (FocusTrapInstance is not null)
    {
      await FocusTrapInterop.DeactivateAsync(FocusTrapInstance);
      await FocusTrapInstance.DisposeAsync();
    }
  }

  public override async Task SetParametersAsync(ParameterView parameters)
  {
    var active = Active;
    var paused = Paused;

    await base.SetParametersAsync(parameters);

    if (FocusTrapInstance is not null)
    {
      if (active && !Active)
      {
        await FocusTrapInterop.DeactivateAsync(FocusTrapInstance);
      }
      else if (!active && Active)
      {
        await FocusTrapInterop.ActivateAsync(FocusTrapInstance);
      }
      if (paused && !Paused)
      {
        await FocusTrapInterop.UnpauseAsync(FocusTrapInstance);
      }
      else if (!paused && Paused)
      {
        await FocusTrapInterop.PauseAsync(FocusTrapInstance);
      }
    }
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);

    if (firstRender)
    {
      FocusTrapInstance = await FocusTrapInterop.CreateAsync(Element, Options);
      if (Active)
      {
        await FocusTrapInterop.ActivateAsync(FocusTrapInstance);
      }
      if (Paused)
      {
        await FocusTrapInterop.PauseAsync(FocusTrapInstance);
      }
    }
  }
}