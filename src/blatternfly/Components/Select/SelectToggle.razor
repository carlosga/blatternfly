@namespace Blatternfly.Components
@inherits BaseComponent
@using Microsoft.JSInterop
@using Blatternfly.Events
@inject ISelectToggleInteropModule SelectToggleInterop

<button
  id="@Id"
  type="@ButtonToggleType"
  class="@CssClass"
  aria-label="@AriaLabel"
  aria-expanded="@AriaExpanded"
  aria-haspopup="listbox"
  @onclick="@ToggleHandler"
  disabled="@IsDisabled"
  @attributes="AdditionalAttributes"
  @ref="Element"
>
  @ChildContent
  <span class="pf-c-select__toggle-arrow">
    <CaretDownIcon />
  </span>
</button>

@code {
  public ElementReference Element { get; protected set; }

  /// HTML ID of dropdown toggle.
  [Parameter] public string Id { get; set; }

  /// Flag to indicate if select is open.
  [Parameter] public bool IsOpen { get; set; }

  /// Callback called when toggle is clicked.
  [Parameter] public EventCallback<bool> OnToggle { get; set; }

  /// Callback for toggle open on keyboard entry.
  [Parameter] public EventCallback OnEnter { get; set; }

  /// Callback for toggle close.
  [Parameter] public EventCallback OnClose { get; set; }

  /// Forces active state.
  [Parameter] public bool IsActive { get; set; }

  /// Display the toggle with no border or background.
  [Parameter] public bool IsPlain { get; set; }

  /// Flag indicating if select is disabled.
  [Parameter] public bool IsDisabled { get; set; }

  /// Flag indicating if placeholder styles should be applied.
  [Parameter] public bool HasPlaceholderStyle { get; set; }

  /// Type of the toggle button, defaults to 'button'.
  [Parameter] public ButtonType? Type { get; set; } = ButtonType.Button;

  /// Id of label for the Select aria-labelledby.
  [Parameter] public string AriaLabelledBy { get; set; }

  /// Label for toggle of select variants.
  [Parameter] public string AriaLabel { get; set; }

  /// Flag for variant, determines toggle rules and interaction.
  [Parameter] public SelectVariant Variant { get; set; }

  /// Flag indicating if select toggle has an clear button.
  [Parameter] public bool HasClearButton { get; set; }

  /// Flag indicating if select menu has a footer.
  [Parameter] public bool HasFooter { get; set; }

  private string CssClass => new CssBuilder("pf-c-select__toggle")
    .AddClass("pf-m-disabled"   , IsDisabled)
    .AddClass("pf-m-plain"      , IsPlain)
    .AddClass("pf-m-active"     , IsActive)
    .AddClass("pf-m-placeholder", HasPlaceholderStyle)
    .Build();

  private string AriaExpanded { get => IsOpen ? "true" : "false"; }
  private string ButtonToggleType
  {
    get
    {
      return Type switch
      {
        ButtonType.Button => "button",
        ButtonType.Submit => "submit",
        ButtonType.Reset  => "reset",
        _                 => "button"
      };
    }
  }

  [JSInvokable]
  public Task<ToggleState> KeydownState()
  {
    return Task.FromResult(new ToggleState(IsOpen, false));
  }

  [JSInvokable]
  public async Task KeydownOnToggle()
  {
    IsOpen = !IsOpen;
    await OnToggle.InvokeAsync(IsOpen);
    await OnClose.InvokeAsync();
    await Element.FocusAsync();
    StateHasChanged();
  }

  [JSInvokable]
  public async Task KeyDownOnEnter()
  {
    IsOpen = !IsOpen;
    await OnToggle.InvokeAsync(IsOpen);
    await OnEnter.InvokeAsync();
    StateHasChanged();
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);

    if (firstRender)
    {
      var dotNetObjRef = DotNetObjectReference.Create(this);
      await SelectToggleInterop.OnKeydown(dotNetObjRef, Element);
    }
  }

  private async Task ToggleHandler(MouseEventArgs args)
  {
    IsOpen = !IsOpen;
    await OnToggle.InvokeAsync(IsOpen);
    if (IsOpen)
    {
      await OnClose.InvokeAsync();
    }
  }
}
